ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"Pump_AL.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	Pump_AL_initVar
  19              		.bss
  20              		.type	Pump_AL_initVar, %object
  21              		.size	Pump_AL_initVar, 1
  22              	Pump_AL_initVar:
  23 0000 00       		.space	1
  24              		.comm	Pump_AL_rxBuffer,256,4
  25              		.global	Pump_AL_rxBufferRead
  26 0001 00       		.align	1
  27              		.type	Pump_AL_rxBufferRead, %object
  28              		.size	Pump_AL_rxBufferRead, 2
  29              	Pump_AL_rxBufferRead:
  30 0002 0000     		.space	2
  31              		.global	Pump_AL_rxBufferWrite
  32              		.align	1
  33              		.type	Pump_AL_rxBufferWrite, %object
  34              		.size	Pump_AL_rxBufferWrite, 2
  35              	Pump_AL_rxBufferWrite:
  36 0004 0000     		.space	2
  37              		.global	Pump_AL_rxBufferLoopDetect
  38              		.type	Pump_AL_rxBufferLoopDetect, %object
  39              		.size	Pump_AL_rxBufferLoopDetect, 1
  40              	Pump_AL_rxBufferLoopDetect:
  41 0006 00       		.space	1
  42              		.global	Pump_AL_rxBufferOverflow
  43              		.type	Pump_AL_rxBufferOverflow, %object
  44              		.size	Pump_AL_rxBufferOverflow, 1
  45              	Pump_AL_rxBufferOverflow:
  46 0007 00       		.space	1
  47              		.section	.text.Pump_AL_Start,"ax",%progbits
  48              		.align	2
  49              		.global	Pump_AL_Start
  50              		.thumb
  51              		.thumb_func
  52              		.type	Pump_AL_Start, %function
  53              	Pump_AL_Start:
  54              	.LFB0:
  55              		.file 1 ".\\Generated_Source\\PSoC5\\Pump_AL.c"
   1:.\Generated_Source\PSoC5/Pump_AL.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC5/Pump_AL.c **** * File Name: Pump_AL.c
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 2


   3:.\Generated_Source\PSoC5/Pump_AL.c **** * Version 2.30
   4:.\Generated_Source\PSoC5/Pump_AL.c **** *
   5:.\Generated_Source\PSoC5/Pump_AL.c **** * Description:
   6:.\Generated_Source\PSoC5/Pump_AL.c **** *  This file provides all API functionality of the UART component
   7:.\Generated_Source\PSoC5/Pump_AL.c **** *
   8:.\Generated_Source\PSoC5/Pump_AL.c **** * Note:
   9:.\Generated_Source\PSoC5/Pump_AL.c **** *
  10:.\Generated_Source\PSoC5/Pump_AL.c **** ********************************************************************************
  11:.\Generated_Source\PSoC5/Pump_AL.c **** * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  12:.\Generated_Source\PSoC5/Pump_AL.c **** * You may use this file only in accordance with the license, terms, conditions,
  13:.\Generated_Source\PSoC5/Pump_AL.c **** * disclaimers, and limitations in the end user license agreement accompanying
  14:.\Generated_Source\PSoC5/Pump_AL.c **** * the software package with which this file was provided.
  15:.\Generated_Source\PSoC5/Pump_AL.c **** *******************************************************************************/
  16:.\Generated_Source\PSoC5/Pump_AL.c **** 
  17:.\Generated_Source\PSoC5/Pump_AL.c **** #include "Pump_AL.h"
  18:.\Generated_Source\PSoC5/Pump_AL.c **** #include "CyLib.h"
  19:.\Generated_Source\PSoC5/Pump_AL.c **** #if(Pump_AL_INTERNAL_CLOCK_USED)
  20:.\Generated_Source\PSoC5/Pump_AL.c ****     #include "Pump_AL_IntClock.h"
  21:.\Generated_Source\PSoC5/Pump_AL.c **** #endif /* End Pump_AL_INTERNAL_CLOCK_USED */
  22:.\Generated_Source\PSoC5/Pump_AL.c **** 
  23:.\Generated_Source\PSoC5/Pump_AL.c **** 
  24:.\Generated_Source\PSoC5/Pump_AL.c **** /***************************************
  25:.\Generated_Source\PSoC5/Pump_AL.c **** * Global data allocation
  26:.\Generated_Source\PSoC5/Pump_AL.c **** ***************************************/
  27:.\Generated_Source\PSoC5/Pump_AL.c **** 
  28:.\Generated_Source\PSoC5/Pump_AL.c **** uint8 Pump_AL_initVar = 0u;
  29:.\Generated_Source\PSoC5/Pump_AL.c **** #if( Pump_AL_TX_ENABLED && (Pump_AL_TXBUFFERSIZE > Pump_AL_FIFO_LENGTH))
  30:.\Generated_Source\PSoC5/Pump_AL.c ****     volatile uint8 Pump_AL_txBuffer[Pump_AL_TXBUFFERSIZE];
  31:.\Generated_Source\PSoC5/Pump_AL.c ****     volatile uint8 Pump_AL_txBufferRead = 0u;
  32:.\Generated_Source\PSoC5/Pump_AL.c ****     uint8 Pump_AL_txBufferWrite = 0u;
  33:.\Generated_Source\PSoC5/Pump_AL.c **** #endif /* End Pump_AL_TX_ENABLED */
  34:.\Generated_Source\PSoC5/Pump_AL.c **** #if( ( Pump_AL_RX_ENABLED || Pump_AL_HD_ENABLED ) && \
  35:.\Generated_Source\PSoC5/Pump_AL.c ****      (Pump_AL_RXBUFFERSIZE > Pump_AL_FIFO_LENGTH) )
  36:.\Generated_Source\PSoC5/Pump_AL.c ****     volatile uint8 Pump_AL_rxBuffer[Pump_AL_RXBUFFERSIZE];
  37:.\Generated_Source\PSoC5/Pump_AL.c ****     volatile uint16 Pump_AL_rxBufferRead = 0u;
  38:.\Generated_Source\PSoC5/Pump_AL.c ****     volatile uint16 Pump_AL_rxBufferWrite = 0u;
  39:.\Generated_Source\PSoC5/Pump_AL.c ****     volatile uint8 Pump_AL_rxBufferLoopDetect = 0u;
  40:.\Generated_Source\PSoC5/Pump_AL.c ****     volatile uint8 Pump_AL_rxBufferOverflow = 0u;
  41:.\Generated_Source\PSoC5/Pump_AL.c ****     #if (Pump_AL_RXHW_ADDRESS_ENABLED)
  42:.\Generated_Source\PSoC5/Pump_AL.c ****         volatile uint8 Pump_AL_rxAddressMode = Pump_AL_RXADDRESSMODE;
  43:.\Generated_Source\PSoC5/Pump_AL.c ****         volatile uint8 Pump_AL_rxAddressDetected = 0u;
  44:.\Generated_Source\PSoC5/Pump_AL.c ****     #endif /* End EnableHWAddress */
  45:.\Generated_Source\PSoC5/Pump_AL.c **** #endif /* End Pump_AL_RX_ENABLED */
  46:.\Generated_Source\PSoC5/Pump_AL.c **** 
  47:.\Generated_Source\PSoC5/Pump_AL.c **** 
  48:.\Generated_Source\PSoC5/Pump_AL.c **** /*******************************************************************************
  49:.\Generated_Source\PSoC5/Pump_AL.c **** * Function Name: Pump_AL_Start
  50:.\Generated_Source\PSoC5/Pump_AL.c **** ********************************************************************************
  51:.\Generated_Source\PSoC5/Pump_AL.c **** *
  52:.\Generated_Source\PSoC5/Pump_AL.c **** * Summary:
  53:.\Generated_Source\PSoC5/Pump_AL.c **** *  Initialize and Enable the UART component.
  54:.\Generated_Source\PSoC5/Pump_AL.c **** *  Enable the clock input to enable operation.
  55:.\Generated_Source\PSoC5/Pump_AL.c **** *
  56:.\Generated_Source\PSoC5/Pump_AL.c **** * Parameters:
  57:.\Generated_Source\PSoC5/Pump_AL.c **** *  None.
  58:.\Generated_Source\PSoC5/Pump_AL.c **** *
  59:.\Generated_Source\PSoC5/Pump_AL.c **** * Return:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 3


  60:.\Generated_Source\PSoC5/Pump_AL.c **** *  None.
  61:.\Generated_Source\PSoC5/Pump_AL.c **** *
  62:.\Generated_Source\PSoC5/Pump_AL.c **** * Global variables:
  63:.\Generated_Source\PSoC5/Pump_AL.c **** *  The Pump_AL_intiVar variable is used to indicate initial
  64:.\Generated_Source\PSoC5/Pump_AL.c **** *  configuration of this component. The variable is initialized to zero (0u)
  65:.\Generated_Source\PSoC5/Pump_AL.c **** *  and set to one (1u) the first time UART_Start() is called. This allows for
  66:.\Generated_Source\PSoC5/Pump_AL.c **** *  component initialization without re-initialization in all subsequent calls
  67:.\Generated_Source\PSoC5/Pump_AL.c **** *  to the Pump_AL_Start() routine.
  68:.\Generated_Source\PSoC5/Pump_AL.c **** *
  69:.\Generated_Source\PSoC5/Pump_AL.c **** * Reentrant:
  70:.\Generated_Source\PSoC5/Pump_AL.c **** *  No.
  71:.\Generated_Source\PSoC5/Pump_AL.c **** *
  72:.\Generated_Source\PSoC5/Pump_AL.c **** *******************************************************************************/
  73:.\Generated_Source\PSoC5/Pump_AL.c **** void Pump_AL_Start(void) 
  74:.\Generated_Source\PSoC5/Pump_AL.c **** {
  56              		.loc 1 74 0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 1, uses_anonymous_args = 0
  60 0000 80B5     		push	{r7, lr}
  61              		.cfi_def_cfa_offset 8
  62              		.cfi_offset 7, -8
  63              		.cfi_offset 14, -4
  64 0002 00AF     		add	r7, sp, #0
  65              		.cfi_def_cfa_register 7
  75:.\Generated_Source\PSoC5/Pump_AL.c ****     /* If not Initialized then initialize all required hardware and software */
  76:.\Generated_Source\PSoC5/Pump_AL.c ****     if(Pump_AL_initVar == 0u)
  66              		.loc 1 76 0
  67 0004 054B     		ldr	r3, .L3
  68 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  69 0008 002B     		cmp	r3, #0
  70 000a 04D1     		bne	.L2
  77:.\Generated_Source\PSoC5/Pump_AL.c ****     {
  78:.\Generated_Source\PSoC5/Pump_AL.c ****         Pump_AL_Init();
  71              		.loc 1 78 0
  72 000c FFF7FEFF 		bl	Pump_AL_Init
  79:.\Generated_Source\PSoC5/Pump_AL.c ****         Pump_AL_initVar = 1u;
  73              		.loc 1 79 0
  74 0010 024B     		ldr	r3, .L3
  75 0012 0122     		movs	r2, #1
  76 0014 1A70     		strb	r2, [r3]
  77              	.L2:
  80:.\Generated_Source\PSoC5/Pump_AL.c ****     }
  81:.\Generated_Source\PSoC5/Pump_AL.c ****     Pump_AL_Enable();
  78              		.loc 1 81 0
  79 0016 FFF7FEFF 		bl	Pump_AL_Enable
  82:.\Generated_Source\PSoC5/Pump_AL.c **** }
  80              		.loc 1 82 0
  81 001a 80BD     		pop	{r7, pc}
  82              	.L4:
  83              		.align	2
  84              	.L3:
  85 001c 00000000 		.word	Pump_AL_initVar
  86              		.cfi_endproc
  87              	.LFE0:
  88              		.size	Pump_AL_Start, .-Pump_AL_Start
  89              		.section	.text.Pump_AL_Init,"ax",%progbits
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 4


  90              		.align	2
  91              		.global	Pump_AL_Init
  92              		.thumb
  93              		.thumb_func
  94              		.type	Pump_AL_Init, %function
  95              	Pump_AL_Init:
  96              	.LFB1:
  83:.\Generated_Source\PSoC5/Pump_AL.c **** 
  84:.\Generated_Source\PSoC5/Pump_AL.c **** 
  85:.\Generated_Source\PSoC5/Pump_AL.c **** /*******************************************************************************
  86:.\Generated_Source\PSoC5/Pump_AL.c **** * Function Name: Pump_AL_Init
  87:.\Generated_Source\PSoC5/Pump_AL.c **** ********************************************************************************
  88:.\Generated_Source\PSoC5/Pump_AL.c **** *
  89:.\Generated_Source\PSoC5/Pump_AL.c **** * Summary:
  90:.\Generated_Source\PSoC5/Pump_AL.c **** *  Initialize component's parameters to the parameters set by user in the
  91:.\Generated_Source\PSoC5/Pump_AL.c **** *  customizer of the component placed onto schematic. Usually called in
  92:.\Generated_Source\PSoC5/Pump_AL.c **** *  Pump_AL_Start().
  93:.\Generated_Source\PSoC5/Pump_AL.c **** *
  94:.\Generated_Source\PSoC5/Pump_AL.c **** * Parameters:
  95:.\Generated_Source\PSoC5/Pump_AL.c **** *  None.
  96:.\Generated_Source\PSoC5/Pump_AL.c **** *
  97:.\Generated_Source\PSoC5/Pump_AL.c **** * Return:
  98:.\Generated_Source\PSoC5/Pump_AL.c **** *  None.
  99:.\Generated_Source\PSoC5/Pump_AL.c **** *
 100:.\Generated_Source\PSoC5/Pump_AL.c **** *******************************************************************************/
 101:.\Generated_Source\PSoC5/Pump_AL.c **** void Pump_AL_Init(void) 
 102:.\Generated_Source\PSoC5/Pump_AL.c **** {
  97              		.loc 1 102 0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 1, uses_anonymous_args = 0
 101 0000 80B5     		push	{r7, lr}
 102              		.cfi_def_cfa_offset 8
 103              		.cfi_offset 7, -8
 104              		.cfi_offset 14, -4
 105 0002 00AF     		add	r7, sp, #0
 106              		.cfi_def_cfa_register 7
 103:.\Generated_Source\PSoC5/Pump_AL.c ****     #if(Pump_AL_RX_ENABLED || Pump_AL_HD_ENABLED)
 104:.\Generated_Source\PSoC5/Pump_AL.c **** 
 105:.\Generated_Source\PSoC5/Pump_AL.c ****         #if(Pump_AL_RX_INTERRUPT_ENABLED && (Pump_AL_RXBUFFERSIZE > Pump_AL_FIFO_LENGTH))
 106:.\Generated_Source\PSoC5/Pump_AL.c ****             /* Set the RX Interrupt. */
 107:.\Generated_Source\PSoC5/Pump_AL.c ****             (void)CyIntSetVector(Pump_AL_RX_VECT_NUM, &Pump_AL_RXISR);
 107              		.loc 1 107 0
 108 0004 0420     		movs	r0, #4
 109 0006 0B49     		ldr	r1, .L6
 110 0008 FFF7FEFF 		bl	CyIntSetVector
 108:.\Generated_Source\PSoC5/Pump_AL.c ****             CyIntSetPriority(Pump_AL_RX_VECT_NUM, Pump_AL_RX_PRIOR_NUM);
 111              		.loc 1 108 0
 112 000c 0420     		movs	r0, #4
 113 000e 0721     		movs	r1, #7
 114 0010 FFF7FEFF 		bl	CyIntSetPriority
 109:.\Generated_Source\PSoC5/Pump_AL.c ****         #endif /* End Pump_AL_RX_INTERRUPT_ENABLED */
 110:.\Generated_Source\PSoC5/Pump_AL.c **** 
 111:.\Generated_Source\PSoC5/Pump_AL.c ****         #if (Pump_AL_RXHW_ADDRESS_ENABLED)
 112:.\Generated_Source\PSoC5/Pump_AL.c ****             Pump_AL_SetRxAddressMode(Pump_AL_RXAddressMode);
 113:.\Generated_Source\PSoC5/Pump_AL.c ****             Pump_AL_SetRxAddress1(Pump_AL_RXHWADDRESS1);
 114:.\Generated_Source\PSoC5/Pump_AL.c ****             Pump_AL_SetRxAddress2(Pump_AL_RXHWADDRESS2);
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 5


 115:.\Generated_Source\PSoC5/Pump_AL.c ****         #endif /* End Pump_AL_RXHW_ADDRESS_ENABLED */
 116:.\Generated_Source\PSoC5/Pump_AL.c **** 
 117:.\Generated_Source\PSoC5/Pump_AL.c ****         /* Init Count7 period */
 118:.\Generated_Source\PSoC5/Pump_AL.c ****         Pump_AL_RXBITCTR_PERIOD_REG = Pump_AL_RXBITCTR_INIT;
 115              		.loc 1 118 0
 116 0014 084B     		ldr	r3, .L6+4
 117 0016 7222     		movs	r2, #114
 118 0018 1A70     		strb	r2, [r3]
 119:.\Generated_Source\PSoC5/Pump_AL.c ****         /* Configure the Initial RX interrupt mask */
 120:.\Generated_Source\PSoC5/Pump_AL.c ****         Pump_AL_RXSTATUS_MASK_REG  = Pump_AL_INIT_RX_INTERRUPTS_MASK;
 119              		.loc 1 120 0
 120 001a 084B     		ldr	r3, .L6+8
 121 001c 2022     		movs	r2, #32
 122 001e 1A70     		strb	r2, [r3]
 121:.\Generated_Source\PSoC5/Pump_AL.c ****     #endif /* End Pump_AL_RX_ENABLED || Pump_AL_HD_ENABLED*/
 122:.\Generated_Source\PSoC5/Pump_AL.c **** 
 123:.\Generated_Source\PSoC5/Pump_AL.c ****     #if(Pump_AL_TX_ENABLED)
 124:.\Generated_Source\PSoC5/Pump_AL.c ****         #if(Pump_AL_TX_INTERRUPT_ENABLED && (Pump_AL_TXBUFFERSIZE > Pump_AL_FIFO_LENGTH))
 125:.\Generated_Source\PSoC5/Pump_AL.c ****             /* Set the TX Interrupt. */
 126:.\Generated_Source\PSoC5/Pump_AL.c ****             (void)CyIntSetVector(Pump_AL_TX_VECT_NUM, &Pump_AL_TXISR);
 127:.\Generated_Source\PSoC5/Pump_AL.c ****             CyIntSetPriority(Pump_AL_TX_VECT_NUM, Pump_AL_TX_PRIOR_NUM);
 128:.\Generated_Source\PSoC5/Pump_AL.c ****         #endif /* End Pump_AL_TX_INTERRUPT_ENABLED */
 129:.\Generated_Source\PSoC5/Pump_AL.c **** 
 130:.\Generated_Source\PSoC5/Pump_AL.c ****         /* Write Counter Value for TX Bit Clk Generator*/
 131:.\Generated_Source\PSoC5/Pump_AL.c ****         #if(Pump_AL_TXCLKGEN_DP)
 132:.\Generated_Source\PSoC5/Pump_AL.c ****             Pump_AL_TXBITCLKGEN_CTR_REG = Pump_AL_BIT_CENTER;
 123              		.loc 1 132 0
 124 0020 074B     		ldr	r3, .L6+12
 125 0022 0722     		movs	r2, #7
 126 0024 1A70     		strb	r2, [r3]
 133:.\Generated_Source\PSoC5/Pump_AL.c ****             Pump_AL_TXBITCLKTX_COMPLETE_REG = (Pump_AL_NUMBER_OF_DATA_BITS +
 127              		.loc 1 133 0
 128 0026 074B     		ldr	r3, .L6+16
 129 0028 4822     		movs	r2, #72
 130 002a 1A70     		strb	r2, [r3]
 134:.\Generated_Source\PSoC5/Pump_AL.c ****                         Pump_AL_NUMBER_OF_START_BIT) * Pump_AL_OVER_SAMPLE_COUNT;
 135:.\Generated_Source\PSoC5/Pump_AL.c ****         #else
 136:.\Generated_Source\PSoC5/Pump_AL.c ****             Pump_AL_TXBITCTR_PERIOD_REG = ((Pump_AL_NUMBER_OF_DATA_BITS +
 137:.\Generated_Source\PSoC5/Pump_AL.c ****                         Pump_AL_NUMBER_OF_START_BIT) * Pump_AL_OVER_SAMPLE_8) - 1u;
 138:.\Generated_Source\PSoC5/Pump_AL.c ****         #endif /* End Pump_AL_TXCLKGEN_DP */
 139:.\Generated_Source\PSoC5/Pump_AL.c **** 
 140:.\Generated_Source\PSoC5/Pump_AL.c ****         /* Configure the Initial TX interrupt mask */
 141:.\Generated_Source\PSoC5/Pump_AL.c ****         #if(Pump_AL_TX_INTERRUPT_ENABLED && (Pump_AL_TXBUFFERSIZE > Pump_AL_FIFO_LENGTH))
 142:.\Generated_Source\PSoC5/Pump_AL.c ****             Pump_AL_TXSTATUS_MASK_REG = Pump_AL_TX_STS_FIFO_EMPTY;
 143:.\Generated_Source\PSoC5/Pump_AL.c ****         #else
 144:.\Generated_Source\PSoC5/Pump_AL.c ****             Pump_AL_TXSTATUS_MASK_REG = Pump_AL_INIT_TX_INTERRUPTS_MASK;
 131              		.loc 1 144 0
 132 002c 064B     		ldr	r3, .L6+20
 133 002e 0022     		movs	r2, #0
 134 0030 1A70     		strb	r2, [r3]
 145:.\Generated_Source\PSoC5/Pump_AL.c ****         #endif /*End Pump_AL_TX_INTERRUPT_ENABLED*/
 146:.\Generated_Source\PSoC5/Pump_AL.c **** 
 147:.\Generated_Source\PSoC5/Pump_AL.c ****     #endif /* End Pump_AL_TX_ENABLED */
 148:.\Generated_Source\PSoC5/Pump_AL.c **** 
 149:.\Generated_Source\PSoC5/Pump_AL.c ****     #if(Pump_AL_PARITY_TYPE_SW)  /* Write Parity to Control Register */
 150:.\Generated_Source\PSoC5/Pump_AL.c ****         Pump_AL_WriteControlRegister( \
 151:.\Generated_Source\PSoC5/Pump_AL.c ****             (Pump_AL_ReadControlRegister() & (uint8)~Pump_AL_CTRL_PARITY_TYPE_MASK) | \
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 6


 152:.\Generated_Source\PSoC5/Pump_AL.c ****             (uint8)(Pump_AL_PARITY_TYPE << Pump_AL_CTRL_PARITY_TYPE0_SHIFT) );
 153:.\Generated_Source\PSoC5/Pump_AL.c ****     #endif /* End Pump_AL_PARITY_TYPE_SW */
 154:.\Generated_Source\PSoC5/Pump_AL.c **** }
 135              		.loc 1 154 0
 136 0032 80BD     		pop	{r7, pc}
 137              	.L7:
 138              		.align	2
 139              	.L6:
 140 0034 00000000 		.word	Pump_AL_RXISR
 141 0038 85650040 		.word	1073767813
 142 003c 84650040 		.word	1073767812
 143 0040 28640040 		.word	1073767464
 144 0044 38640040 		.word	1073767480
 145 0048 8A650040 		.word	1073767818
 146              		.cfi_endproc
 147              	.LFE1:
 148              		.size	Pump_AL_Init, .-Pump_AL_Init
 149              		.section	.text.Pump_AL_Enable,"ax",%progbits
 150              		.align	2
 151              		.global	Pump_AL_Enable
 152              		.thumb
 153              		.thumb_func
 154              		.type	Pump_AL_Enable, %function
 155              	Pump_AL_Enable:
 156              	.LFB2:
 155:.\Generated_Source\PSoC5/Pump_AL.c **** 
 156:.\Generated_Source\PSoC5/Pump_AL.c **** 
 157:.\Generated_Source\PSoC5/Pump_AL.c **** /*******************************************************************************
 158:.\Generated_Source\PSoC5/Pump_AL.c **** * Function Name: Pump_AL_Enable
 159:.\Generated_Source\PSoC5/Pump_AL.c **** ********************************************************************************
 160:.\Generated_Source\PSoC5/Pump_AL.c **** *
 161:.\Generated_Source\PSoC5/Pump_AL.c **** * Summary:
 162:.\Generated_Source\PSoC5/Pump_AL.c **** *  Enables the UART block operation
 163:.\Generated_Source\PSoC5/Pump_AL.c **** *
 164:.\Generated_Source\PSoC5/Pump_AL.c **** * Parameters:
 165:.\Generated_Source\PSoC5/Pump_AL.c **** *  None.
 166:.\Generated_Source\PSoC5/Pump_AL.c **** *
 167:.\Generated_Source\PSoC5/Pump_AL.c **** * Return:
 168:.\Generated_Source\PSoC5/Pump_AL.c **** *  None.
 169:.\Generated_Source\PSoC5/Pump_AL.c **** *
 170:.\Generated_Source\PSoC5/Pump_AL.c **** * Global Variables:
 171:.\Generated_Source\PSoC5/Pump_AL.c **** *  Pump_AL_rxAddressDetected - set to initial state (0).
 172:.\Generated_Source\PSoC5/Pump_AL.c **** *
 173:.\Generated_Source\PSoC5/Pump_AL.c **** *******************************************************************************/
 174:.\Generated_Source\PSoC5/Pump_AL.c **** void Pump_AL_Enable(void) 
 175:.\Generated_Source\PSoC5/Pump_AL.c **** {
 157              		.loc 1 175 0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 8
 160              		@ frame_needed = 1, uses_anonymous_args = 0
 161 0000 80B5     		push	{r7, lr}
 162              		.cfi_def_cfa_offset 8
 163              		.cfi_offset 7, -8
 164              		.cfi_offset 14, -4
 165 0002 82B0     		sub	sp, sp, #8
 166              		.cfi_def_cfa_offset 16
 167 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 7


 168              		.cfi_def_cfa_register 7
 176:.\Generated_Source\PSoC5/Pump_AL.c ****     uint8 enableInterrupts;
 177:.\Generated_Source\PSoC5/Pump_AL.c ****     enableInterrupts = CyEnterCriticalSection();
 169              		.loc 1 177 0
 170 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 171 000a 0346     		mov	r3, r0
 172 000c FB71     		strb	r3, [r7, #7]
 178:.\Generated_Source\PSoC5/Pump_AL.c **** 
 179:.\Generated_Source\PSoC5/Pump_AL.c ****     #if(Pump_AL_RX_ENABLED || Pump_AL_HD_ENABLED)
 180:.\Generated_Source\PSoC5/Pump_AL.c ****         /*RX Counter (Count7) Enable */
 181:.\Generated_Source\PSoC5/Pump_AL.c ****         Pump_AL_RXBITCTR_CONTROL_REG |= Pump_AL_CNTR_ENABLE;
 173              		.loc 1 181 0
 174 000e 114A     		ldr	r2, .L9
 175 0010 104B     		ldr	r3, .L9
 176 0012 1B78     		ldrb	r3, [r3]
 177 0014 DBB2     		uxtb	r3, r3
 178 0016 43F02003 		orr	r3, r3, #32
 179 001a DBB2     		uxtb	r3, r3
 180 001c 1370     		strb	r3, [r2]
 182:.\Generated_Source\PSoC5/Pump_AL.c ****         /* Enable the RX Interrupt. */
 183:.\Generated_Source\PSoC5/Pump_AL.c ****         Pump_AL_RXSTATUS_ACTL_REG  |= Pump_AL_INT_ENABLE;
 181              		.loc 1 183 0
 182 001e 0E4A     		ldr	r2, .L9+4
 183 0020 0D4B     		ldr	r3, .L9+4
 184 0022 1B78     		ldrb	r3, [r3]
 185 0024 DBB2     		uxtb	r3, r3
 186 0026 43F01003 		orr	r3, r3, #16
 187 002a DBB2     		uxtb	r3, r3
 188 002c 1370     		strb	r3, [r2]
 184:.\Generated_Source\PSoC5/Pump_AL.c ****         #if(Pump_AL_RX_INTERRUPT_ENABLED && (Pump_AL_RXBUFFERSIZE > Pump_AL_FIFO_LENGTH))
 185:.\Generated_Source\PSoC5/Pump_AL.c ****             CyIntEnable(Pump_AL_RX_VECT_NUM);
 189              		.loc 1 185 0
 190 002e 0B4B     		ldr	r3, .L9+8
 191 0030 1022     		movs	r2, #16
 192 0032 1A60     		str	r2, [r3]
 186:.\Generated_Source\PSoC5/Pump_AL.c ****             #if (Pump_AL_RXHW_ADDRESS_ENABLED)
 187:.\Generated_Source\PSoC5/Pump_AL.c ****                 Pump_AL_rxAddressDetected = 0u;
 188:.\Generated_Source\PSoC5/Pump_AL.c ****             #endif /* End Pump_AL_RXHW_ADDRESS_ENABLED */
 189:.\Generated_Source\PSoC5/Pump_AL.c ****         #endif /* End Pump_AL_RX_INTERRUPT_ENABLED */
 190:.\Generated_Source\PSoC5/Pump_AL.c ****     #endif /* End Pump_AL_RX_ENABLED || Pump_AL_HD_ENABLED*/
 191:.\Generated_Source\PSoC5/Pump_AL.c **** 
 192:.\Generated_Source\PSoC5/Pump_AL.c ****     #if(Pump_AL_TX_ENABLED)
 193:.\Generated_Source\PSoC5/Pump_AL.c ****         /*TX Counter (DP/Count7) Enable */
 194:.\Generated_Source\PSoC5/Pump_AL.c ****         #if(!Pump_AL_TXCLKGEN_DP)
 195:.\Generated_Source\PSoC5/Pump_AL.c ****             Pump_AL_TXBITCTR_CONTROL_REG |= Pump_AL_CNTR_ENABLE;
 196:.\Generated_Source\PSoC5/Pump_AL.c ****         #endif /* End Pump_AL_TXCLKGEN_DP */
 197:.\Generated_Source\PSoC5/Pump_AL.c ****         /* Enable the TX Interrupt. */
 198:.\Generated_Source\PSoC5/Pump_AL.c ****         Pump_AL_TXSTATUS_ACTL_REG |= Pump_AL_INT_ENABLE;
 193              		.loc 1 198 0
 194 0034 0A4A     		ldr	r2, .L9+12
 195 0036 0A4B     		ldr	r3, .L9+12
 196 0038 1B78     		ldrb	r3, [r3]
 197 003a DBB2     		uxtb	r3, r3
 198 003c 43F01003 		orr	r3, r3, #16
 199 0040 DBB2     		uxtb	r3, r3
 200 0042 1370     		strb	r3, [r2]
 199:.\Generated_Source\PSoC5/Pump_AL.c ****         #if(Pump_AL_TX_INTERRUPT_ENABLED && (Pump_AL_TXBUFFERSIZE > Pump_AL_FIFO_LENGTH))
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 8


 200:.\Generated_Source\PSoC5/Pump_AL.c ****             CyIntEnable(Pump_AL_TX_VECT_NUM);
 201:.\Generated_Source\PSoC5/Pump_AL.c ****         #endif /* End Pump_AL_TX_INTERRUPT_ENABLED*/
 202:.\Generated_Source\PSoC5/Pump_AL.c ****      #endif /* End Pump_AL_TX_ENABLED */
 203:.\Generated_Source\PSoC5/Pump_AL.c **** 
 204:.\Generated_Source\PSoC5/Pump_AL.c ****     #if(Pump_AL_INTERNAL_CLOCK_USED)
 205:.\Generated_Source\PSoC5/Pump_AL.c ****         /* Enable the clock. */
 206:.\Generated_Source\PSoC5/Pump_AL.c ****         Pump_AL_IntClock_Start();
 207:.\Generated_Source\PSoC5/Pump_AL.c ****     #endif /* End Pump_AL_INTERNAL_CLOCK_USED */
 208:.\Generated_Source\PSoC5/Pump_AL.c **** 
 209:.\Generated_Source\PSoC5/Pump_AL.c ****     CyExitCriticalSection(enableInterrupts);
 201              		.loc 1 209 0
 202 0044 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 203 0046 1846     		mov	r0, r3
 204 0048 FFF7FEFF 		bl	CyExitCriticalSection
 210:.\Generated_Source\PSoC5/Pump_AL.c **** }
 205              		.loc 1 210 0
 206 004c 0837     		adds	r7, r7, #8
 207              		.cfi_def_cfa_offset 8
 208 004e BD46     		mov	sp, r7
 209              		.cfi_def_cfa_register 13
 210              		@ sp needed
 211 0050 80BD     		pop	{r7, pc}
 212              	.L10:
 213 0052 00BF     		.align	2
 214              	.L9:
 215 0054 95650040 		.word	1073767829
 216 0058 94650040 		.word	1073767828
 217 005c 00E100E0 		.word	-536813312
 218 0060 9A650040 		.word	1073767834
 219              		.cfi_endproc
 220              	.LFE2:
 221              		.size	Pump_AL_Enable, .-Pump_AL_Enable
 222              		.section	.text.Pump_AL_Stop,"ax",%progbits
 223              		.align	2
 224              		.global	Pump_AL_Stop
 225              		.thumb
 226              		.thumb_func
 227              		.type	Pump_AL_Stop, %function
 228              	Pump_AL_Stop:
 229              	.LFB3:
 211:.\Generated_Source\PSoC5/Pump_AL.c **** 
 212:.\Generated_Source\PSoC5/Pump_AL.c **** 
 213:.\Generated_Source\PSoC5/Pump_AL.c **** /*******************************************************************************
 214:.\Generated_Source\PSoC5/Pump_AL.c **** * Function Name: Pump_AL_Stop
 215:.\Generated_Source\PSoC5/Pump_AL.c **** ********************************************************************************
 216:.\Generated_Source\PSoC5/Pump_AL.c **** *
 217:.\Generated_Source\PSoC5/Pump_AL.c **** * Summary:
 218:.\Generated_Source\PSoC5/Pump_AL.c **** *  Disable the UART component
 219:.\Generated_Source\PSoC5/Pump_AL.c **** *
 220:.\Generated_Source\PSoC5/Pump_AL.c **** * Parameters:
 221:.\Generated_Source\PSoC5/Pump_AL.c **** *  None.
 222:.\Generated_Source\PSoC5/Pump_AL.c **** *
 223:.\Generated_Source\PSoC5/Pump_AL.c **** * Return:
 224:.\Generated_Source\PSoC5/Pump_AL.c **** *  None.
 225:.\Generated_Source\PSoC5/Pump_AL.c **** *
 226:.\Generated_Source\PSoC5/Pump_AL.c **** *******************************************************************************/
 227:.\Generated_Source\PSoC5/Pump_AL.c **** void Pump_AL_Stop(void) 
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 9


 228:.\Generated_Source\PSoC5/Pump_AL.c **** {
 230              		.loc 1 228 0
 231              		.cfi_startproc
 232              		@ args = 0, pretend = 0, frame = 8
 233              		@ frame_needed = 1, uses_anonymous_args = 0
 234 0000 80B5     		push	{r7, lr}
 235              		.cfi_def_cfa_offset 8
 236              		.cfi_offset 7, -8
 237              		.cfi_offset 14, -4
 238 0002 82B0     		sub	sp, sp, #8
 239              		.cfi_def_cfa_offset 16
 240 0004 00AF     		add	r7, sp, #0
 241              		.cfi_def_cfa_register 7
 229:.\Generated_Source\PSoC5/Pump_AL.c ****     uint8 enableInterrupts;
 230:.\Generated_Source\PSoC5/Pump_AL.c ****     enableInterrupts = CyEnterCriticalSection();
 242              		.loc 1 230 0
 243 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 244 000a 0346     		mov	r3, r0
 245 000c FB71     		strb	r3, [r7, #7]
 231:.\Generated_Source\PSoC5/Pump_AL.c **** 
 232:.\Generated_Source\PSoC5/Pump_AL.c ****     /* Write Bit Counter Disable */
 233:.\Generated_Source\PSoC5/Pump_AL.c ****     #if(Pump_AL_RX_ENABLED || Pump_AL_HD_ENABLED)
 234:.\Generated_Source\PSoC5/Pump_AL.c ****         Pump_AL_RXBITCTR_CONTROL_REG &= (uint8)~Pump_AL_CNTR_ENABLE;
 246              		.loc 1 234 0
 247 000e 104A     		ldr	r2, .L12
 248 0010 0F4B     		ldr	r3, .L12
 249 0012 1B78     		ldrb	r3, [r3]
 250 0014 DBB2     		uxtb	r3, r3
 251 0016 23F02003 		bic	r3, r3, #32
 252 001a DBB2     		uxtb	r3, r3
 253 001c 1370     		strb	r3, [r2]
 235:.\Generated_Source\PSoC5/Pump_AL.c ****     #endif /* End Pump_AL_RX_ENABLED */
 236:.\Generated_Source\PSoC5/Pump_AL.c **** 
 237:.\Generated_Source\PSoC5/Pump_AL.c ****     #if(Pump_AL_TX_ENABLED)
 238:.\Generated_Source\PSoC5/Pump_AL.c ****         #if(!Pump_AL_TXCLKGEN_DP)
 239:.\Generated_Source\PSoC5/Pump_AL.c ****             Pump_AL_TXBITCTR_CONTROL_REG &= (uint8)~Pump_AL_CNTR_ENABLE;
 240:.\Generated_Source\PSoC5/Pump_AL.c ****         #endif /* End Pump_AL_TXCLKGEN_DP */
 241:.\Generated_Source\PSoC5/Pump_AL.c ****     #endif /* Pump_AL_TX_ENABLED */
 242:.\Generated_Source\PSoC5/Pump_AL.c **** 
 243:.\Generated_Source\PSoC5/Pump_AL.c ****     #if(Pump_AL_INTERNAL_CLOCK_USED)
 244:.\Generated_Source\PSoC5/Pump_AL.c ****         /* Disable the clock. */
 245:.\Generated_Source\PSoC5/Pump_AL.c ****         Pump_AL_IntClock_Stop();
 246:.\Generated_Source\PSoC5/Pump_AL.c ****     #endif /* End Pump_AL_INTERNAL_CLOCK_USED */
 247:.\Generated_Source\PSoC5/Pump_AL.c **** 
 248:.\Generated_Source\PSoC5/Pump_AL.c ****     /* Disable internal interrupt component */
 249:.\Generated_Source\PSoC5/Pump_AL.c ****     #if(Pump_AL_RX_ENABLED || Pump_AL_HD_ENABLED)
 250:.\Generated_Source\PSoC5/Pump_AL.c ****         Pump_AL_RXSTATUS_ACTL_REG  &= (uint8)~Pump_AL_INT_ENABLE;
 254              		.loc 1 250 0
 255 001e 0D4A     		ldr	r2, .L12+4
 256 0020 0C4B     		ldr	r3, .L12+4
 257 0022 1B78     		ldrb	r3, [r3]
 258 0024 DBB2     		uxtb	r3, r3
 259 0026 23F01003 		bic	r3, r3, #16
 260 002a DBB2     		uxtb	r3, r3
 261 002c 1370     		strb	r3, [r2]
 251:.\Generated_Source\PSoC5/Pump_AL.c ****         #if(Pump_AL_RX_INTERRUPT_ENABLED && (Pump_AL_RXBUFFERSIZE > Pump_AL_FIFO_LENGTH))
 252:.\Generated_Source\PSoC5/Pump_AL.c ****             Pump_AL_DisableRxInt();
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 10


 262              		.loc 1 252 0
 263 002e FFF7FEFF 		bl	Pump_AL_DisableRxInt
 253:.\Generated_Source\PSoC5/Pump_AL.c ****         #endif /* End Pump_AL_RX_INTERRUPT_ENABLED */
 254:.\Generated_Source\PSoC5/Pump_AL.c ****     #endif /* End Pump_AL_RX_ENABLED */
 255:.\Generated_Source\PSoC5/Pump_AL.c **** 
 256:.\Generated_Source\PSoC5/Pump_AL.c ****     #if(Pump_AL_TX_ENABLED)
 257:.\Generated_Source\PSoC5/Pump_AL.c ****         Pump_AL_TXSTATUS_ACTL_REG &= (uint8)~Pump_AL_INT_ENABLE;
 264              		.loc 1 257 0
 265 0032 094A     		ldr	r2, .L12+8
 266 0034 084B     		ldr	r3, .L12+8
 267 0036 1B78     		ldrb	r3, [r3]
 268 0038 DBB2     		uxtb	r3, r3
 269 003a 23F01003 		bic	r3, r3, #16
 270 003e DBB2     		uxtb	r3, r3
 271 0040 1370     		strb	r3, [r2]
 258:.\Generated_Source\PSoC5/Pump_AL.c ****         #if(Pump_AL_TX_INTERRUPT_ENABLED && (Pump_AL_TXBUFFERSIZE > Pump_AL_FIFO_LENGTH))
 259:.\Generated_Source\PSoC5/Pump_AL.c ****             Pump_AL_DisableTxInt();
 260:.\Generated_Source\PSoC5/Pump_AL.c ****         #endif /* End Pump_AL_TX_INTERRUPT_ENABLED */
 261:.\Generated_Source\PSoC5/Pump_AL.c ****     #endif /* End Pump_AL_TX_ENABLED */
 262:.\Generated_Source\PSoC5/Pump_AL.c **** 
 263:.\Generated_Source\PSoC5/Pump_AL.c ****     CyExitCriticalSection(enableInterrupts);
 272              		.loc 1 263 0
 273 0042 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 274 0044 1846     		mov	r0, r3
 275 0046 FFF7FEFF 		bl	CyExitCriticalSection
 264:.\Generated_Source\PSoC5/Pump_AL.c **** }
 276              		.loc 1 264 0
 277 004a 0837     		adds	r7, r7, #8
 278              		.cfi_def_cfa_offset 8
 279 004c BD46     		mov	sp, r7
 280              		.cfi_def_cfa_register 13
 281              		@ sp needed
 282 004e 80BD     		pop	{r7, pc}
 283              	.L13:
 284              		.align	2
 285              	.L12:
 286 0050 95650040 		.word	1073767829
 287 0054 94650040 		.word	1073767828
 288 0058 9A650040 		.word	1073767834
 289              		.cfi_endproc
 290              	.LFE3:
 291              		.size	Pump_AL_Stop, .-Pump_AL_Stop
 292              		.section	.text.Pump_AL_ReadControlRegister,"ax",%progbits
 293              		.align	2
 294              		.global	Pump_AL_ReadControlRegister
 295              		.thumb
 296              		.thumb_func
 297              		.type	Pump_AL_ReadControlRegister, %function
 298              	Pump_AL_ReadControlRegister:
 299              	.LFB4:
 265:.\Generated_Source\PSoC5/Pump_AL.c **** 
 266:.\Generated_Source\PSoC5/Pump_AL.c **** 
 267:.\Generated_Source\PSoC5/Pump_AL.c **** /*******************************************************************************
 268:.\Generated_Source\PSoC5/Pump_AL.c **** * Function Name: Pump_AL_ReadControlRegister
 269:.\Generated_Source\PSoC5/Pump_AL.c **** ********************************************************************************
 270:.\Generated_Source\PSoC5/Pump_AL.c **** *
 271:.\Generated_Source\PSoC5/Pump_AL.c **** * Summary:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 11


 272:.\Generated_Source\PSoC5/Pump_AL.c **** *  Read the current state of the control register
 273:.\Generated_Source\PSoC5/Pump_AL.c **** *
 274:.\Generated_Source\PSoC5/Pump_AL.c **** * Parameters:
 275:.\Generated_Source\PSoC5/Pump_AL.c **** *  None.
 276:.\Generated_Source\PSoC5/Pump_AL.c **** *
 277:.\Generated_Source\PSoC5/Pump_AL.c **** * Return:
 278:.\Generated_Source\PSoC5/Pump_AL.c **** *  Current state of the control register.
 279:.\Generated_Source\PSoC5/Pump_AL.c **** *
 280:.\Generated_Source\PSoC5/Pump_AL.c **** *******************************************************************************/
 281:.\Generated_Source\PSoC5/Pump_AL.c **** uint8 Pump_AL_ReadControlRegister(void) 
 282:.\Generated_Source\PSoC5/Pump_AL.c **** {
 300              		.loc 1 282 0
 301              		.cfi_startproc
 302              		@ args = 0, pretend = 0, frame = 0
 303              		@ frame_needed = 1, uses_anonymous_args = 0
 304              		@ link register save eliminated.
 305 0000 80B4     		push	{r7}
 306              		.cfi_def_cfa_offset 4
 307              		.cfi_offset 7, -4
 308 0002 00AF     		add	r7, sp, #0
 309              		.cfi_def_cfa_register 7
 283:.\Generated_Source\PSoC5/Pump_AL.c ****     #if( Pump_AL_CONTROL_REG_REMOVED )
 284:.\Generated_Source\PSoC5/Pump_AL.c ****         return(0u);
 310              		.loc 1 284 0
 311 0004 0023     		movs	r3, #0
 285:.\Generated_Source\PSoC5/Pump_AL.c ****     #else
 286:.\Generated_Source\PSoC5/Pump_AL.c ****         return(Pump_AL_CONTROL_REG);
 287:.\Generated_Source\PSoC5/Pump_AL.c ****     #endif /* End Pump_AL_CONTROL_REG_REMOVED */
 288:.\Generated_Source\PSoC5/Pump_AL.c **** }
 312              		.loc 1 288 0
 313 0006 1846     		mov	r0, r3
 314 0008 BD46     		mov	sp, r7
 315              		.cfi_def_cfa_register 13
 316              		@ sp needed
 317 000a 5DF8047B 		ldr	r7, [sp], #4
 318              		.cfi_restore 7
 319              		.cfi_def_cfa_offset 0
 320 000e 7047     		bx	lr
 321              		.cfi_endproc
 322              	.LFE4:
 323              		.size	Pump_AL_ReadControlRegister, .-Pump_AL_ReadControlRegister
 324              		.section	.text.Pump_AL_WriteControlRegister,"ax",%progbits
 325              		.align	2
 326              		.global	Pump_AL_WriteControlRegister
 327              		.thumb
 328              		.thumb_func
 329              		.type	Pump_AL_WriteControlRegister, %function
 330              	Pump_AL_WriteControlRegister:
 331              	.LFB5:
 289:.\Generated_Source\PSoC5/Pump_AL.c **** 
 290:.\Generated_Source\PSoC5/Pump_AL.c **** 
 291:.\Generated_Source\PSoC5/Pump_AL.c **** /*******************************************************************************
 292:.\Generated_Source\PSoC5/Pump_AL.c **** * Function Name: Pump_AL_WriteControlRegister
 293:.\Generated_Source\PSoC5/Pump_AL.c **** ********************************************************************************
 294:.\Generated_Source\PSoC5/Pump_AL.c **** *
 295:.\Generated_Source\PSoC5/Pump_AL.c **** * Summary:
 296:.\Generated_Source\PSoC5/Pump_AL.c **** *  Writes an 8-bit value into the control register
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 12


 297:.\Generated_Source\PSoC5/Pump_AL.c **** *
 298:.\Generated_Source\PSoC5/Pump_AL.c **** * Parameters:
 299:.\Generated_Source\PSoC5/Pump_AL.c **** *  control:  control register value
 300:.\Generated_Source\PSoC5/Pump_AL.c **** *
 301:.\Generated_Source\PSoC5/Pump_AL.c **** * Return:
 302:.\Generated_Source\PSoC5/Pump_AL.c **** *  None.
 303:.\Generated_Source\PSoC5/Pump_AL.c **** *
 304:.\Generated_Source\PSoC5/Pump_AL.c **** *******************************************************************************/
 305:.\Generated_Source\PSoC5/Pump_AL.c **** void  Pump_AL_WriteControlRegister(uint8 control) 
 306:.\Generated_Source\PSoC5/Pump_AL.c **** {
 332              		.loc 1 306 0
 333              		.cfi_startproc
 334              		@ args = 0, pretend = 0, frame = 8
 335              		@ frame_needed = 1, uses_anonymous_args = 0
 336              		@ link register save eliminated.
 337 0000 80B4     		push	{r7}
 338              		.cfi_def_cfa_offset 4
 339              		.cfi_offset 7, -4
 340 0002 83B0     		sub	sp, sp, #12
 341              		.cfi_def_cfa_offset 16
 342 0004 00AF     		add	r7, sp, #0
 343              		.cfi_def_cfa_register 7
 344 0006 0346     		mov	r3, r0
 345 0008 FB71     		strb	r3, [r7, #7]
 307:.\Generated_Source\PSoC5/Pump_AL.c ****     #if( Pump_AL_CONTROL_REG_REMOVED )
 308:.\Generated_Source\PSoC5/Pump_AL.c ****         if(control != 0u) { }      /* release compiler warning */
 309:.\Generated_Source\PSoC5/Pump_AL.c ****     #else
 310:.\Generated_Source\PSoC5/Pump_AL.c ****        Pump_AL_CONTROL_REG = control;
 311:.\Generated_Source\PSoC5/Pump_AL.c ****     #endif /* End Pump_AL_CONTROL_REG_REMOVED */
 312:.\Generated_Source\PSoC5/Pump_AL.c **** }
 346              		.loc 1 312 0
 347 000a 0C37     		adds	r7, r7, #12
 348              		.cfi_def_cfa_offset 4
 349 000c BD46     		mov	sp, r7
 350              		.cfi_def_cfa_register 13
 351              		@ sp needed
 352 000e 5DF8047B 		ldr	r7, [sp], #4
 353              		.cfi_restore 7
 354              		.cfi_def_cfa_offset 0
 355 0012 7047     		bx	lr
 356              		.cfi_endproc
 357              	.LFE5:
 358              		.size	Pump_AL_WriteControlRegister, .-Pump_AL_WriteControlRegister
 359              		.section	.text.Pump_AL_EnableRxInt,"ax",%progbits
 360              		.align	2
 361              		.global	Pump_AL_EnableRxInt
 362              		.thumb
 363              		.thumb_func
 364              		.type	Pump_AL_EnableRxInt, %function
 365              	Pump_AL_EnableRxInt:
 366              	.LFB6:
 313:.\Generated_Source\PSoC5/Pump_AL.c **** 
 314:.\Generated_Source\PSoC5/Pump_AL.c **** 
 315:.\Generated_Source\PSoC5/Pump_AL.c **** #if(Pump_AL_RX_ENABLED || Pump_AL_HD_ENABLED)
 316:.\Generated_Source\PSoC5/Pump_AL.c **** 
 317:.\Generated_Source\PSoC5/Pump_AL.c ****     #if(Pump_AL_RX_INTERRUPT_ENABLED)
 318:.\Generated_Source\PSoC5/Pump_AL.c **** 
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 13


 319:.\Generated_Source\PSoC5/Pump_AL.c ****         /*******************************************************************************
 320:.\Generated_Source\PSoC5/Pump_AL.c ****         * Function Name: Pump_AL_EnableRxInt
 321:.\Generated_Source\PSoC5/Pump_AL.c ****         ********************************************************************************
 322:.\Generated_Source\PSoC5/Pump_AL.c ****         *
 323:.\Generated_Source\PSoC5/Pump_AL.c ****         * Summary:
 324:.\Generated_Source\PSoC5/Pump_AL.c ****         *  Enable RX interrupt generation
 325:.\Generated_Source\PSoC5/Pump_AL.c ****         *
 326:.\Generated_Source\PSoC5/Pump_AL.c ****         * Parameters:
 327:.\Generated_Source\PSoC5/Pump_AL.c ****         *  None.
 328:.\Generated_Source\PSoC5/Pump_AL.c ****         *
 329:.\Generated_Source\PSoC5/Pump_AL.c ****         * Return:
 330:.\Generated_Source\PSoC5/Pump_AL.c ****         *  None.
 331:.\Generated_Source\PSoC5/Pump_AL.c ****         *
 332:.\Generated_Source\PSoC5/Pump_AL.c ****         * Theory:
 333:.\Generated_Source\PSoC5/Pump_AL.c ****         *  Enable the interrupt output -or- the interrupt component itself
 334:.\Generated_Source\PSoC5/Pump_AL.c ****         *
 335:.\Generated_Source\PSoC5/Pump_AL.c ****         *******************************************************************************/
 336:.\Generated_Source\PSoC5/Pump_AL.c ****         void Pump_AL_EnableRxInt(void) 
 337:.\Generated_Source\PSoC5/Pump_AL.c ****         {
 367              		.loc 1 337 0
 368              		.cfi_startproc
 369              		@ args = 0, pretend = 0, frame = 0
 370              		@ frame_needed = 1, uses_anonymous_args = 0
 371              		@ link register save eliminated.
 372 0000 80B4     		push	{r7}
 373              		.cfi_def_cfa_offset 4
 374              		.cfi_offset 7, -4
 375 0002 00AF     		add	r7, sp, #0
 376              		.cfi_def_cfa_register 7
 338:.\Generated_Source\PSoC5/Pump_AL.c ****             CyIntEnable(Pump_AL_RX_VECT_NUM);
 377              		.loc 1 338 0
 378 0004 034B     		ldr	r3, .L18
 379 0006 1022     		movs	r2, #16
 380 0008 1A60     		str	r2, [r3]
 339:.\Generated_Source\PSoC5/Pump_AL.c ****         }
 381              		.loc 1 339 0
 382 000a BD46     		mov	sp, r7
 383              		.cfi_def_cfa_register 13
 384              		@ sp needed
 385 000c 5DF8047B 		ldr	r7, [sp], #4
 386              		.cfi_restore 7
 387              		.cfi_def_cfa_offset 0
 388 0010 7047     		bx	lr
 389              	.L19:
 390 0012 00BF     		.align	2
 391              	.L18:
 392 0014 00E100E0 		.word	-536813312
 393              		.cfi_endproc
 394              	.LFE6:
 395              		.size	Pump_AL_EnableRxInt, .-Pump_AL_EnableRxInt
 396              		.section	.text.Pump_AL_DisableRxInt,"ax",%progbits
 397              		.align	2
 398              		.global	Pump_AL_DisableRxInt
 399              		.thumb
 400              		.thumb_func
 401              		.type	Pump_AL_DisableRxInt, %function
 402              	Pump_AL_DisableRxInt:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 14


 403              	.LFB7:
 340:.\Generated_Source\PSoC5/Pump_AL.c **** 
 341:.\Generated_Source\PSoC5/Pump_AL.c **** 
 342:.\Generated_Source\PSoC5/Pump_AL.c ****         /*******************************************************************************
 343:.\Generated_Source\PSoC5/Pump_AL.c ****         * Function Name: Pump_AL_DisableRxInt
 344:.\Generated_Source\PSoC5/Pump_AL.c ****         ********************************************************************************
 345:.\Generated_Source\PSoC5/Pump_AL.c ****         *
 346:.\Generated_Source\PSoC5/Pump_AL.c ****         * Summary:
 347:.\Generated_Source\PSoC5/Pump_AL.c ****         *  Disable RX interrupt generation
 348:.\Generated_Source\PSoC5/Pump_AL.c ****         *
 349:.\Generated_Source\PSoC5/Pump_AL.c ****         * Parameters:
 350:.\Generated_Source\PSoC5/Pump_AL.c ****         *  None.
 351:.\Generated_Source\PSoC5/Pump_AL.c ****         *
 352:.\Generated_Source\PSoC5/Pump_AL.c ****         * Return:
 353:.\Generated_Source\PSoC5/Pump_AL.c ****         *  None.
 354:.\Generated_Source\PSoC5/Pump_AL.c ****         *
 355:.\Generated_Source\PSoC5/Pump_AL.c ****         * Theory:
 356:.\Generated_Source\PSoC5/Pump_AL.c ****         *  Disable the interrupt output -or- the interrupt component itself
 357:.\Generated_Source\PSoC5/Pump_AL.c ****         *
 358:.\Generated_Source\PSoC5/Pump_AL.c ****         *******************************************************************************/
 359:.\Generated_Source\PSoC5/Pump_AL.c ****         void Pump_AL_DisableRxInt(void) 
 360:.\Generated_Source\PSoC5/Pump_AL.c ****         {
 404              		.loc 1 360 0
 405              		.cfi_startproc
 406              		@ args = 0, pretend = 0, frame = 0
 407              		@ frame_needed = 1, uses_anonymous_args = 0
 408              		@ link register save eliminated.
 409 0000 80B4     		push	{r7}
 410              		.cfi_def_cfa_offset 4
 411              		.cfi_offset 7, -4
 412 0002 00AF     		add	r7, sp, #0
 413              		.cfi_def_cfa_register 7
 361:.\Generated_Source\PSoC5/Pump_AL.c ****             CyIntDisable(Pump_AL_RX_VECT_NUM);
 414              		.loc 1 361 0
 415 0004 034B     		ldr	r3, .L21
 416 0006 1022     		movs	r2, #16
 417 0008 1A60     		str	r2, [r3]
 362:.\Generated_Source\PSoC5/Pump_AL.c ****         }
 418              		.loc 1 362 0
 419 000a BD46     		mov	sp, r7
 420              		.cfi_def_cfa_register 13
 421              		@ sp needed
 422 000c 5DF8047B 		ldr	r7, [sp], #4
 423              		.cfi_restore 7
 424              		.cfi_def_cfa_offset 0
 425 0010 7047     		bx	lr
 426              	.L22:
 427 0012 00BF     		.align	2
 428              	.L21:
 429 0014 80E100E0 		.word	-536813184
 430              		.cfi_endproc
 431              	.LFE7:
 432              		.size	Pump_AL_DisableRxInt, .-Pump_AL_DisableRxInt
 433              		.section	.text.Pump_AL_SetRxInterruptMode,"ax",%progbits
 434              		.align	2
 435              		.global	Pump_AL_SetRxInterruptMode
 436              		.thumb
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 15


 437              		.thumb_func
 438              		.type	Pump_AL_SetRxInterruptMode, %function
 439              	Pump_AL_SetRxInterruptMode:
 440              	.LFB8:
 363:.\Generated_Source\PSoC5/Pump_AL.c **** 
 364:.\Generated_Source\PSoC5/Pump_AL.c ****     #endif /* Pump_AL_RX_INTERRUPT_ENABLED */
 365:.\Generated_Source\PSoC5/Pump_AL.c **** 
 366:.\Generated_Source\PSoC5/Pump_AL.c **** 
 367:.\Generated_Source\PSoC5/Pump_AL.c ****     /*******************************************************************************
 368:.\Generated_Source\PSoC5/Pump_AL.c ****     * Function Name: Pump_AL_SetRxInterruptMode
 369:.\Generated_Source\PSoC5/Pump_AL.c ****     ********************************************************************************
 370:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 371:.\Generated_Source\PSoC5/Pump_AL.c ****     * Summary:
 372:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Configure which status bits trigger an interrupt event
 373:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 374:.\Generated_Source\PSoC5/Pump_AL.c ****     * Parameters:
 375:.\Generated_Source\PSoC5/Pump_AL.c ****     *  IntSrc:  An or'd combination of the desired status bit masks (defined in
 376:.\Generated_Source\PSoC5/Pump_AL.c ****     *           the header file)
 377:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 378:.\Generated_Source\PSoC5/Pump_AL.c ****     * Return:
 379:.\Generated_Source\PSoC5/Pump_AL.c ****     *  None.
 380:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 381:.\Generated_Source\PSoC5/Pump_AL.c ****     * Theory:
 382:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Enables the output of specific status bits to the interrupt controller
 383:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 384:.\Generated_Source\PSoC5/Pump_AL.c ****     *******************************************************************************/
 385:.\Generated_Source\PSoC5/Pump_AL.c ****     void Pump_AL_SetRxInterruptMode(uint8 intSrc) 
 386:.\Generated_Source\PSoC5/Pump_AL.c ****     {
 441              		.loc 1 386 0
 442              		.cfi_startproc
 443              		@ args = 0, pretend = 0, frame = 8
 444              		@ frame_needed = 1, uses_anonymous_args = 0
 445              		@ link register save eliminated.
 446 0000 80B4     		push	{r7}
 447              		.cfi_def_cfa_offset 4
 448              		.cfi_offset 7, -4
 449 0002 83B0     		sub	sp, sp, #12
 450              		.cfi_def_cfa_offset 16
 451 0004 00AF     		add	r7, sp, #0
 452              		.cfi_def_cfa_register 7
 453 0006 0346     		mov	r3, r0
 454 0008 FB71     		strb	r3, [r7, #7]
 387:.\Generated_Source\PSoC5/Pump_AL.c ****         Pump_AL_RXSTATUS_MASK_REG  = intSrc;
 455              		.loc 1 387 0
 456 000a 044A     		ldr	r2, .L24
 457 000c FB79     		ldrb	r3, [r7, #7]
 458 000e 1370     		strb	r3, [r2]
 388:.\Generated_Source\PSoC5/Pump_AL.c ****     }
 459              		.loc 1 388 0
 460 0010 0C37     		adds	r7, r7, #12
 461              		.cfi_def_cfa_offset 4
 462 0012 BD46     		mov	sp, r7
 463              		.cfi_def_cfa_register 13
 464              		@ sp needed
 465 0014 5DF8047B 		ldr	r7, [sp], #4
 466              		.cfi_restore 7
 467              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 16


 468 0018 7047     		bx	lr
 469              	.L25:
 470 001a 00BF     		.align	2
 471              	.L24:
 472 001c 84650040 		.word	1073767812
 473              		.cfi_endproc
 474              	.LFE8:
 475              		.size	Pump_AL_SetRxInterruptMode, .-Pump_AL_SetRxInterruptMode
 476              		.section	.text.Pump_AL_ReadRxData,"ax",%progbits
 477              		.align	2
 478              		.global	Pump_AL_ReadRxData
 479              		.thumb
 480              		.thumb_func
 481              		.type	Pump_AL_ReadRxData, %function
 482              	Pump_AL_ReadRxData:
 483              	.LFB9:
 389:.\Generated_Source\PSoC5/Pump_AL.c **** 
 390:.\Generated_Source\PSoC5/Pump_AL.c **** 
 391:.\Generated_Source\PSoC5/Pump_AL.c ****     /*******************************************************************************
 392:.\Generated_Source\PSoC5/Pump_AL.c ****     * Function Name: Pump_AL_ReadRxData
 393:.\Generated_Source\PSoC5/Pump_AL.c ****     ********************************************************************************
 394:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 395:.\Generated_Source\PSoC5/Pump_AL.c ****     * Summary:
 396:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Returns data in RX Data register without checking status register to
 397:.\Generated_Source\PSoC5/Pump_AL.c ****     *  determine if data is valid
 398:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 399:.\Generated_Source\PSoC5/Pump_AL.c ****     * Parameters:
 400:.\Generated_Source\PSoC5/Pump_AL.c ****     *  None.
 401:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 402:.\Generated_Source\PSoC5/Pump_AL.c ****     * Return:
 403:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Received data from RX register
 404:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 405:.\Generated_Source\PSoC5/Pump_AL.c ****     * Global Variables:
 406:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_rxBuffer - RAM buffer pointer for save received data.
 407:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_rxBufferWrite - cyclic index for write to rxBuffer,
 408:.\Generated_Source\PSoC5/Pump_AL.c ****     *     checked to identify new data.
 409:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_rxBufferRead - cyclic index for read from rxBuffer,
 410:.\Generated_Source\PSoC5/Pump_AL.c ****     *     incremented after each byte has been read from buffer.
 411:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_rxBufferLoopDetect - creared if loop condition was detected
 412:.\Generated_Source\PSoC5/Pump_AL.c ****     *     in RX ISR.
 413:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 414:.\Generated_Source\PSoC5/Pump_AL.c ****     * Reentrant:
 415:.\Generated_Source\PSoC5/Pump_AL.c ****     *  No.
 416:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 417:.\Generated_Source\PSoC5/Pump_AL.c ****     *******************************************************************************/
 418:.\Generated_Source\PSoC5/Pump_AL.c ****     uint8 Pump_AL_ReadRxData(void) 
 419:.\Generated_Source\PSoC5/Pump_AL.c ****     {
 484              		.loc 1 419 0
 485              		.cfi_startproc
 486              		@ args = 0, pretend = 0, frame = 8
 487              		@ frame_needed = 1, uses_anonymous_args = 0
 488 0000 80B5     		push	{r7, lr}
 489              		.cfi_def_cfa_offset 8
 490              		.cfi_offset 7, -8
 491              		.cfi_offset 14, -4
 492 0002 82B0     		sub	sp, sp, #8
 493              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 17


 494 0004 00AF     		add	r7, sp, #0
 495              		.cfi_def_cfa_register 7
 420:.\Generated_Source\PSoC5/Pump_AL.c ****         uint8 rxData;
 421:.\Generated_Source\PSoC5/Pump_AL.c **** 
 422:.\Generated_Source\PSoC5/Pump_AL.c ****         #if(Pump_AL_RXBUFFERSIZE > Pump_AL_FIFO_LENGTH)
 423:.\Generated_Source\PSoC5/Pump_AL.c ****             uint16 loc_rxBufferRead;
 424:.\Generated_Source\PSoC5/Pump_AL.c ****             uint16 loc_rxBufferWrite;
 425:.\Generated_Source\PSoC5/Pump_AL.c ****             /* Protect variables that could change on interrupt. */
 426:.\Generated_Source\PSoC5/Pump_AL.c ****             /* Disable Rx interrupt. */
 427:.\Generated_Source\PSoC5/Pump_AL.c ****             #if(Pump_AL_RX_INTERRUPT_ENABLED)
 428:.\Generated_Source\PSoC5/Pump_AL.c ****                 Pump_AL_DisableRxInt();
 496              		.loc 1 428 0
 497 0006 FFF7FEFF 		bl	Pump_AL_DisableRxInt
 429:.\Generated_Source\PSoC5/Pump_AL.c ****             #endif /* Pump_AL_RX_INTERRUPT_ENABLED */
 430:.\Generated_Source\PSoC5/Pump_AL.c ****             loc_rxBufferRead = Pump_AL_rxBufferRead;
 498              		.loc 1 430 0
 499 000a 194B     		ldr	r3, .L33
 500 000c 1B88     		ldrh	r3, [r3]	@ movhi
 501 000e BB80     		strh	r3, [r7, #4]	@ movhi
 431:.\Generated_Source\PSoC5/Pump_AL.c ****             loc_rxBufferWrite = Pump_AL_rxBufferWrite;
 502              		.loc 1 431 0
 503 0010 184B     		ldr	r3, .L33+4
 504 0012 1B88     		ldrh	r3, [r3]	@ movhi
 505 0014 7B80     		strh	r3, [r7, #2]	@ movhi
 432:.\Generated_Source\PSoC5/Pump_AL.c **** 
 433:.\Generated_Source\PSoC5/Pump_AL.c ****             if( (Pump_AL_rxBufferLoopDetect != 0u) || (loc_rxBufferRead != loc_rxBufferWrite) )
 506              		.loc 1 433 0
 507 0016 184B     		ldr	r3, .L33+8
 508 0018 1B78     		ldrb	r3, [r3]
 509 001a DBB2     		uxtb	r3, r3
 510 001c 002B     		cmp	r3, #0
 511 001e 03D1     		bne	.L27
 512              		.loc 1 433 0 is_stmt 0 discriminator 1
 513 0020 BA88     		ldrh	r2, [r7, #4]
 514 0022 7B88     		ldrh	r3, [r7, #2]
 515 0024 9A42     		cmp	r2, r3
 516 0026 18D0     		beq	.L28
 517              	.L27:
 434:.\Generated_Source\PSoC5/Pump_AL.c ****             {
 435:.\Generated_Source\PSoC5/Pump_AL.c ****                 rxData = Pump_AL_rxBuffer[loc_rxBufferRead];
 518              		.loc 1 435 0 is_stmt 1
 519 0028 BB88     		ldrh	r3, [r7, #4]
 520 002a 144A     		ldr	r2, .L33+12
 521 002c D35C     		ldrb	r3, [r2, r3]
 522 002e FB71     		strb	r3, [r7, #7]
 436:.\Generated_Source\PSoC5/Pump_AL.c ****                 loc_rxBufferRead++;
 523              		.loc 1 436 0
 524 0030 BB88     		ldrh	r3, [r7, #4]
 525 0032 0133     		adds	r3, r3, #1
 526 0034 BB80     		strh	r3, [r7, #4]	@ movhi
 437:.\Generated_Source\PSoC5/Pump_AL.c **** 
 438:.\Generated_Source\PSoC5/Pump_AL.c ****                 if(loc_rxBufferRead >= Pump_AL_RXBUFFERSIZE)
 527              		.loc 1 438 0
 528 0036 BB88     		ldrh	r3, [r7, #4]
 529 0038 FF2B     		cmp	r3, #255
 530 003a 01D9     		bls	.L29
 439:.\Generated_Source\PSoC5/Pump_AL.c ****                 {
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 18


 440:.\Generated_Source\PSoC5/Pump_AL.c ****                     loc_rxBufferRead = 0u;
 531              		.loc 1 440 0
 532 003c 0023     		movs	r3, #0
 533 003e BB80     		strh	r3, [r7, #4]	@ movhi
 534              	.L29:
 441:.\Generated_Source\PSoC5/Pump_AL.c ****                 }
 442:.\Generated_Source\PSoC5/Pump_AL.c ****                 /* Update the real pointer */
 443:.\Generated_Source\PSoC5/Pump_AL.c ****                 Pump_AL_rxBufferRead = loc_rxBufferRead;
 535              		.loc 1 443 0
 536 0040 0B4A     		ldr	r2, .L33
 537 0042 BB88     		ldrh	r3, [r7, #4]	@ movhi
 538 0044 1380     		strh	r3, [r2]	@ movhi
 444:.\Generated_Source\PSoC5/Pump_AL.c **** 
 445:.\Generated_Source\PSoC5/Pump_AL.c ****                 if(Pump_AL_rxBufferLoopDetect != 0u )
 539              		.loc 1 445 0
 540 0046 0C4B     		ldr	r3, .L33+8
 541 0048 1B78     		ldrb	r3, [r3]
 542 004a DBB2     		uxtb	r3, r3
 543 004c 002B     		cmp	r3, #0
 544 004e 03D0     		beq	.L30
 446:.\Generated_Source\PSoC5/Pump_AL.c ****                 {
 447:.\Generated_Source\PSoC5/Pump_AL.c ****                     Pump_AL_rxBufferLoopDetect = 0u;
 545              		.loc 1 447 0
 546 0050 094B     		ldr	r3, .L33+8
 547 0052 0022     		movs	r2, #0
 548 0054 1A70     		strb	r2, [r3]
 445:.\Generated_Source\PSoC5/Pump_AL.c ****                 {
 549              		.loc 1 445 0
 550 0056 03E0     		b	.L31
 551              	.L30:
 552 0058 02E0     		b	.L31
 553              	.L28:
 448:.\Generated_Source\PSoC5/Pump_AL.c ****                     #if( (Pump_AL_RX_INTERRUPT_ENABLED) && (Pump_AL_FLOW_CONTROL != 0u) && \
 449:.\Generated_Source\PSoC5/Pump_AL.c ****                          (Pump_AL_RXBUFFERSIZE > Pump_AL_FIFO_LENGTH) )
 450:.\Generated_Source\PSoC5/Pump_AL.c ****                         /* When Hardware Flow Control selected - return RX mask */
 451:.\Generated_Source\PSoC5/Pump_AL.c ****                         #if( Pump_AL_HD_ENABLED )
 452:.\Generated_Source\PSoC5/Pump_AL.c ****                             if((Pump_AL_CONTROL_REG & Pump_AL_CTRL_HD_SEND) == 0u)
 453:.\Generated_Source\PSoC5/Pump_AL.c ****                             {   /* In Half duplex mode return RX mask only in RX
 454:.\Generated_Source\PSoC5/Pump_AL.c ****                                 *  configuration set, otherwise
 455:.\Generated_Source\PSoC5/Pump_AL.c ****                                 *  mask will be returned in LoadRxConfig() API.
 456:.\Generated_Source\PSoC5/Pump_AL.c ****                                 */
 457:.\Generated_Source\PSoC5/Pump_AL.c ****                                 Pump_AL_RXSTATUS_MASK_REG  |= Pump_AL_RX_STS_FIFO_NOTEMPTY;
 458:.\Generated_Source\PSoC5/Pump_AL.c ****                             }
 459:.\Generated_Source\PSoC5/Pump_AL.c ****                         #else
 460:.\Generated_Source\PSoC5/Pump_AL.c ****                             Pump_AL_RXSTATUS_MASK_REG  |= Pump_AL_RX_STS_FIFO_NOTEMPTY;
 461:.\Generated_Source\PSoC5/Pump_AL.c ****                         #endif /* end Pump_AL_HD_ENABLED */
 462:.\Generated_Source\PSoC5/Pump_AL.c ****                     #endif /* Pump_AL_RX_INTERRUPT_ENABLED and Hardware flow control*/
 463:.\Generated_Source\PSoC5/Pump_AL.c ****                 }
 464:.\Generated_Source\PSoC5/Pump_AL.c ****             }
 465:.\Generated_Source\PSoC5/Pump_AL.c ****             else
 466:.\Generated_Source\PSoC5/Pump_AL.c ****             {   /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit*/
 467:.\Generated_Source\PSoC5/Pump_AL.c ****                 rxData = Pump_AL_RXDATA_REG;
 554              		.loc 1 467 0
 555 005a 094B     		ldr	r3, .L33+16
 556 005c 1B78     		ldrb	r3, [r3]
 557 005e FB71     		strb	r3, [r7, #7]
 558              	.L31:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 19


 468:.\Generated_Source\PSoC5/Pump_AL.c ****             }
 469:.\Generated_Source\PSoC5/Pump_AL.c **** 
 470:.\Generated_Source\PSoC5/Pump_AL.c ****             /* Enable Rx interrupt. */
 471:.\Generated_Source\PSoC5/Pump_AL.c ****             #if(Pump_AL_RX_INTERRUPT_ENABLED)
 472:.\Generated_Source\PSoC5/Pump_AL.c ****                 Pump_AL_EnableRxInt();
 559              		.loc 1 472 0
 560 0060 FFF7FEFF 		bl	Pump_AL_EnableRxInt
 473:.\Generated_Source\PSoC5/Pump_AL.c ****             #endif /* End Pump_AL_RX_INTERRUPT_ENABLED */
 474:.\Generated_Source\PSoC5/Pump_AL.c **** 
 475:.\Generated_Source\PSoC5/Pump_AL.c ****         #else /* Pump_AL_RXBUFFERSIZE > Pump_AL_FIFO_LENGTH */
 476:.\Generated_Source\PSoC5/Pump_AL.c **** 
 477:.\Generated_Source\PSoC5/Pump_AL.c ****             /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit*/
 478:.\Generated_Source\PSoC5/Pump_AL.c ****             rxData = Pump_AL_RXDATA_REG;
 479:.\Generated_Source\PSoC5/Pump_AL.c **** 
 480:.\Generated_Source\PSoC5/Pump_AL.c ****         #endif /* Pump_AL_RXBUFFERSIZE > Pump_AL_FIFO_LENGTH */
 481:.\Generated_Source\PSoC5/Pump_AL.c **** 
 482:.\Generated_Source\PSoC5/Pump_AL.c ****         return(rxData);
 561              		.loc 1 482 0
 562 0064 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 483:.\Generated_Source\PSoC5/Pump_AL.c ****     }
 563              		.loc 1 483 0
 564 0066 1846     		mov	r0, r3
 565 0068 0837     		adds	r7, r7, #8
 566              		.cfi_def_cfa_offset 8
 567 006a BD46     		mov	sp, r7
 568              		.cfi_def_cfa_register 13
 569              		@ sp needed
 570 006c 80BD     		pop	{r7, pc}
 571              	.L34:
 572 006e 00BF     		.align	2
 573              	.L33:
 574 0070 00000000 		.word	Pump_AL_rxBufferRead
 575 0074 00000000 		.word	Pump_AL_rxBufferWrite
 576 0078 00000000 		.word	Pump_AL_rxBufferLoopDetect
 577 007c 00000000 		.word	Pump_AL_rxBuffer
 578 0080 46650040 		.word	1073767750
 579              		.cfi_endproc
 580              	.LFE9:
 581              		.size	Pump_AL_ReadRxData, .-Pump_AL_ReadRxData
 582              		.section	.text.Pump_AL_ReadRxStatus,"ax",%progbits
 583              		.align	2
 584              		.global	Pump_AL_ReadRxStatus
 585              		.thumb
 586              		.thumb_func
 587              		.type	Pump_AL_ReadRxStatus, %function
 588              	Pump_AL_ReadRxStatus:
 589              	.LFB10:
 484:.\Generated_Source\PSoC5/Pump_AL.c **** 
 485:.\Generated_Source\PSoC5/Pump_AL.c **** 
 486:.\Generated_Source\PSoC5/Pump_AL.c ****     /*******************************************************************************
 487:.\Generated_Source\PSoC5/Pump_AL.c ****     * Function Name: Pump_AL_ReadRxStatus
 488:.\Generated_Source\PSoC5/Pump_AL.c ****     ********************************************************************************
 489:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 490:.\Generated_Source\PSoC5/Pump_AL.c ****     * Summary:
 491:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Read the current state of the status register
 492:.\Generated_Source\PSoC5/Pump_AL.c ****     *  And detect software buffer overflow.
 493:.\Generated_Source\PSoC5/Pump_AL.c ****     *
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 20


 494:.\Generated_Source\PSoC5/Pump_AL.c ****     * Parameters:
 495:.\Generated_Source\PSoC5/Pump_AL.c ****     *  None.
 496:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 497:.\Generated_Source\PSoC5/Pump_AL.c ****     * Return:
 498:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Current state of the status register.
 499:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 500:.\Generated_Source\PSoC5/Pump_AL.c ****     * Global Variables:
 501:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_rxBufferOverflow - used to indicate overload condition.
 502:.\Generated_Source\PSoC5/Pump_AL.c ****     *   It set to one in RX interrupt when there isn?t free space in
 503:.\Generated_Source\PSoC5/Pump_AL.c ****     *   Pump_AL_rxBufferRead to write new data. This condition returned
 504:.\Generated_Source\PSoC5/Pump_AL.c ****     *   and cleared to zero by this API as an
 505:.\Generated_Source\PSoC5/Pump_AL.c ****     *   Pump_AL_RX_STS_SOFT_BUFF_OVER bit along with RX Status register
 506:.\Generated_Source\PSoC5/Pump_AL.c ****     *   bits.
 507:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 508:.\Generated_Source\PSoC5/Pump_AL.c ****     *******************************************************************************/
 509:.\Generated_Source\PSoC5/Pump_AL.c ****     uint8 Pump_AL_ReadRxStatus(void) 
 510:.\Generated_Source\PSoC5/Pump_AL.c ****     {
 590              		.loc 1 510 0
 591              		.cfi_startproc
 592              		@ args = 0, pretend = 0, frame = 8
 593              		@ frame_needed = 1, uses_anonymous_args = 0
 594              		@ link register save eliminated.
 595 0000 80B4     		push	{r7}
 596              		.cfi_def_cfa_offset 4
 597              		.cfi_offset 7, -4
 598 0002 83B0     		sub	sp, sp, #12
 599              		.cfi_def_cfa_offset 16
 600 0004 00AF     		add	r7, sp, #0
 601              		.cfi_def_cfa_register 7
 511:.\Generated_Source\PSoC5/Pump_AL.c ****         uint8 status;
 512:.\Generated_Source\PSoC5/Pump_AL.c **** 
 513:.\Generated_Source\PSoC5/Pump_AL.c ****         status = Pump_AL_RXSTATUS_REG & Pump_AL_RX_HW_MASK;
 602              		.loc 1 513 0
 603 0006 0C4B     		ldr	r3, .L38
 604 0008 1B78     		ldrb	r3, [r3]
 605 000a DBB2     		uxtb	r3, r3
 606 000c 03F07F03 		and	r3, r3, #127
 607 0010 FB71     		strb	r3, [r7, #7]
 514:.\Generated_Source\PSoC5/Pump_AL.c **** 
 515:.\Generated_Source\PSoC5/Pump_AL.c ****         #if(Pump_AL_RXBUFFERSIZE > Pump_AL_FIFO_LENGTH)
 516:.\Generated_Source\PSoC5/Pump_AL.c ****             if( Pump_AL_rxBufferOverflow != 0u )
 608              		.loc 1 516 0
 609 0012 0A4B     		ldr	r3, .L38+4
 610 0014 1B78     		ldrb	r3, [r3]
 611 0016 DBB2     		uxtb	r3, r3
 612 0018 002B     		cmp	r3, #0
 613 001a 06D0     		beq	.L36
 517:.\Generated_Source\PSoC5/Pump_AL.c ****             {
 518:.\Generated_Source\PSoC5/Pump_AL.c ****                 status |= Pump_AL_RX_STS_SOFT_BUFF_OVER;
 614              		.loc 1 518 0
 615 001c FB79     		ldrb	r3, [r7, #7]
 616 001e 63F07F03 		orn	r3, r3, #127
 617 0022 FB71     		strb	r3, [r7, #7]
 519:.\Generated_Source\PSoC5/Pump_AL.c ****                 Pump_AL_rxBufferOverflow = 0u;
 618              		.loc 1 519 0
 619 0024 054B     		ldr	r3, .L38+4
 620 0026 0022     		movs	r2, #0
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 21


 621 0028 1A70     		strb	r2, [r3]
 622              	.L36:
 520:.\Generated_Source\PSoC5/Pump_AL.c ****             }
 521:.\Generated_Source\PSoC5/Pump_AL.c ****         #endif /* Pump_AL_RXBUFFERSIZE */
 522:.\Generated_Source\PSoC5/Pump_AL.c **** 
 523:.\Generated_Source\PSoC5/Pump_AL.c ****         return(status);
 623              		.loc 1 523 0
 624 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 524:.\Generated_Source\PSoC5/Pump_AL.c ****     }
 625              		.loc 1 524 0
 626 002c 1846     		mov	r0, r3
 627 002e 0C37     		adds	r7, r7, #12
 628              		.cfi_def_cfa_offset 4
 629 0030 BD46     		mov	sp, r7
 630              		.cfi_def_cfa_register 13
 631              		@ sp needed
 632 0032 5DF8047B 		ldr	r7, [sp], #4
 633              		.cfi_restore 7
 634              		.cfi_def_cfa_offset 0
 635 0036 7047     		bx	lr
 636              	.L39:
 637              		.align	2
 638              	.L38:
 639 0038 64650040 		.word	1073767780
 640 003c 00000000 		.word	Pump_AL_rxBufferOverflow
 641              		.cfi_endproc
 642              	.LFE10:
 643              		.size	Pump_AL_ReadRxStatus, .-Pump_AL_ReadRxStatus
 644              		.section	.text.Pump_AL_GetChar,"ax",%progbits
 645              		.align	2
 646              		.global	Pump_AL_GetChar
 647              		.thumb
 648              		.thumb_func
 649              		.type	Pump_AL_GetChar, %function
 650              	Pump_AL_GetChar:
 651              	.LFB11:
 525:.\Generated_Source\PSoC5/Pump_AL.c **** 
 526:.\Generated_Source\PSoC5/Pump_AL.c **** 
 527:.\Generated_Source\PSoC5/Pump_AL.c ****     /*******************************************************************************
 528:.\Generated_Source\PSoC5/Pump_AL.c ****     * Function Name: Pump_AL_GetChar
 529:.\Generated_Source\PSoC5/Pump_AL.c ****     ********************************************************************************
 530:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 531:.\Generated_Source\PSoC5/Pump_AL.c ****     * Summary:
 532:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Reads UART RX buffer immediately, if data is not available or an error
 533:.\Generated_Source\PSoC5/Pump_AL.c ****     *  condition exists, zero is returned; otherwise, character is read and
 534:.\Generated_Source\PSoC5/Pump_AL.c ****     *  returned.
 535:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 536:.\Generated_Source\PSoC5/Pump_AL.c ****     * Parameters:
 537:.\Generated_Source\PSoC5/Pump_AL.c ****     *  None.
 538:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 539:.\Generated_Source\PSoC5/Pump_AL.c ****     * Return:
 540:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Character read from UART RX buffer. ASCII characters from 1 to 255 are valid.
 541:.\Generated_Source\PSoC5/Pump_AL.c ****     *  A returned zero signifies an error condition or no data available.
 542:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 543:.\Generated_Source\PSoC5/Pump_AL.c ****     * Global Variables:
 544:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_rxBuffer - RAM buffer pointer for save received data.
 545:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_rxBufferWrite - cyclic index for write to rxBuffer,
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 22


 546:.\Generated_Source\PSoC5/Pump_AL.c ****     *     checked to identify new data.
 547:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_rxBufferRead - cyclic index for read from rxBuffer,
 548:.\Generated_Source\PSoC5/Pump_AL.c ****     *     incremented after each byte has been read from buffer.
 549:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_rxBufferLoopDetect - creared if loop condition was detected
 550:.\Generated_Source\PSoC5/Pump_AL.c ****     *     in RX ISR.
 551:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 552:.\Generated_Source\PSoC5/Pump_AL.c ****     * Reentrant:
 553:.\Generated_Source\PSoC5/Pump_AL.c ****     *  No.
 554:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 555:.\Generated_Source\PSoC5/Pump_AL.c ****     *******************************************************************************/
 556:.\Generated_Source\PSoC5/Pump_AL.c ****     uint8 Pump_AL_GetChar(void) 
 557:.\Generated_Source\PSoC5/Pump_AL.c ****     {
 652              		.loc 1 557 0
 653              		.cfi_startproc
 654              		@ args = 0, pretend = 0, frame = 8
 655              		@ frame_needed = 1, uses_anonymous_args = 0
 656 0000 80B5     		push	{r7, lr}
 657              		.cfi_def_cfa_offset 8
 658              		.cfi_offset 7, -8
 659              		.cfi_offset 14, -4
 660 0002 82B0     		sub	sp, sp, #8
 661              		.cfi_def_cfa_offset 16
 662 0004 00AF     		add	r7, sp, #0
 663              		.cfi_def_cfa_register 7
 558:.\Generated_Source\PSoC5/Pump_AL.c ****         uint8 rxData = 0u;
 664              		.loc 1 558 0
 665 0006 0023     		movs	r3, #0
 666 0008 FB71     		strb	r3, [r7, #7]
 559:.\Generated_Source\PSoC5/Pump_AL.c ****         uint8 rxStatus;
 560:.\Generated_Source\PSoC5/Pump_AL.c **** 
 561:.\Generated_Source\PSoC5/Pump_AL.c ****         #if(Pump_AL_RXBUFFERSIZE > Pump_AL_FIFO_LENGTH)
 562:.\Generated_Source\PSoC5/Pump_AL.c ****             uint16 loc_rxBufferRead;
 563:.\Generated_Source\PSoC5/Pump_AL.c ****             uint16 loc_rxBufferWrite;
 564:.\Generated_Source\PSoC5/Pump_AL.c ****             /* Protect variables that could change on interrupt. */
 565:.\Generated_Source\PSoC5/Pump_AL.c ****             /* Disable Rx interrupt. */
 566:.\Generated_Source\PSoC5/Pump_AL.c ****             #if(Pump_AL_RX_INTERRUPT_ENABLED)
 567:.\Generated_Source\PSoC5/Pump_AL.c ****                 Pump_AL_DisableRxInt();
 667              		.loc 1 567 0
 668 000a FFF7FEFF 		bl	Pump_AL_DisableRxInt
 568:.\Generated_Source\PSoC5/Pump_AL.c ****             #endif /* Pump_AL_RX_INTERRUPT_ENABLED */
 569:.\Generated_Source\PSoC5/Pump_AL.c ****             loc_rxBufferRead = Pump_AL_rxBufferRead;
 669              		.loc 1 569 0
 670 000e 204B     		ldr	r3, .L47
 671 0010 1B88     		ldrh	r3, [r3]	@ movhi
 672 0012 BB80     		strh	r3, [r7, #4]	@ movhi
 570:.\Generated_Source\PSoC5/Pump_AL.c ****             loc_rxBufferWrite = Pump_AL_rxBufferWrite;
 673              		.loc 1 570 0
 674 0014 1F4B     		ldr	r3, .L47+4
 675 0016 1B88     		ldrh	r3, [r3]	@ movhi
 676 0018 7B80     		strh	r3, [r7, #2]	@ movhi
 571:.\Generated_Source\PSoC5/Pump_AL.c **** 
 572:.\Generated_Source\PSoC5/Pump_AL.c ****             if( (Pump_AL_rxBufferLoopDetect != 0u) || (loc_rxBufferRead != loc_rxBufferWrite) )
 677              		.loc 1 572 0
 678 001a 1F4B     		ldr	r3, .L47+8
 679 001c 1B78     		ldrb	r3, [r3]
 680 001e DBB2     		uxtb	r3, r3
 681 0020 002B     		cmp	r3, #0
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 23


 682 0022 03D1     		bne	.L41
 683              		.loc 1 572 0 is_stmt 0 discriminator 1
 684 0024 BA88     		ldrh	r2, [r7, #4]
 685 0026 7B88     		ldrh	r3, [r7, #2]
 686 0028 9A42     		cmp	r2, r3
 687 002a 18D0     		beq	.L42
 688              	.L41:
 573:.\Generated_Source\PSoC5/Pump_AL.c ****             {
 574:.\Generated_Source\PSoC5/Pump_AL.c ****                 rxData = Pump_AL_rxBuffer[loc_rxBufferRead];
 689              		.loc 1 574 0 is_stmt 1
 690 002c BB88     		ldrh	r3, [r7, #4]
 691 002e 1B4A     		ldr	r2, .L47+12
 692 0030 D35C     		ldrb	r3, [r2, r3]
 693 0032 FB71     		strb	r3, [r7, #7]
 575:.\Generated_Source\PSoC5/Pump_AL.c ****                 loc_rxBufferRead++;
 694              		.loc 1 575 0
 695 0034 BB88     		ldrh	r3, [r7, #4]
 696 0036 0133     		adds	r3, r3, #1
 697 0038 BB80     		strh	r3, [r7, #4]	@ movhi
 576:.\Generated_Source\PSoC5/Pump_AL.c ****                 if(loc_rxBufferRead >= Pump_AL_RXBUFFERSIZE)
 698              		.loc 1 576 0
 699 003a BB88     		ldrh	r3, [r7, #4]
 700 003c FF2B     		cmp	r3, #255
 701 003e 01D9     		bls	.L43
 577:.\Generated_Source\PSoC5/Pump_AL.c ****                 {
 578:.\Generated_Source\PSoC5/Pump_AL.c ****                     loc_rxBufferRead = 0u;
 702              		.loc 1 578 0
 703 0040 0023     		movs	r3, #0
 704 0042 BB80     		strh	r3, [r7, #4]	@ movhi
 705              	.L43:
 579:.\Generated_Source\PSoC5/Pump_AL.c ****                 }
 580:.\Generated_Source\PSoC5/Pump_AL.c ****                 /* Update the real pointer */
 581:.\Generated_Source\PSoC5/Pump_AL.c ****                 Pump_AL_rxBufferRead = loc_rxBufferRead;
 706              		.loc 1 581 0
 707 0044 124A     		ldr	r2, .L47
 708 0046 BB88     		ldrh	r3, [r7, #4]	@ movhi
 709 0048 1380     		strh	r3, [r2]	@ movhi
 582:.\Generated_Source\PSoC5/Pump_AL.c **** 
 583:.\Generated_Source\PSoC5/Pump_AL.c ****                 if(Pump_AL_rxBufferLoopDetect > 0u )
 710              		.loc 1 583 0
 711 004a 134B     		ldr	r3, .L47+8
 712 004c 1B78     		ldrb	r3, [r3]
 713 004e DBB2     		uxtb	r3, r3
 714 0050 002B     		cmp	r3, #0
 715 0052 03D0     		beq	.L44
 584:.\Generated_Source\PSoC5/Pump_AL.c ****                 {
 585:.\Generated_Source\PSoC5/Pump_AL.c ****                     Pump_AL_rxBufferLoopDetect = 0u;
 716              		.loc 1 585 0
 717 0054 104B     		ldr	r3, .L47+8
 718 0056 0022     		movs	r2, #0
 719 0058 1A70     		strb	r2, [r3]
 583:.\Generated_Source\PSoC5/Pump_AL.c ****                 {
 720              		.loc 1 583 0
 721 005a 12E0     		b	.L45
 722              	.L44:
 723 005c 11E0     		b	.L45
 724              	.L42:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 24


 586:.\Generated_Source\PSoC5/Pump_AL.c ****                     #if( (Pump_AL_RX_INTERRUPT_ENABLED) && (Pump_AL_FLOW_CONTROL != 0u) )
 587:.\Generated_Source\PSoC5/Pump_AL.c ****                         /* When Hardware Flow Control selected - return RX mask */
 588:.\Generated_Source\PSoC5/Pump_AL.c ****                         #if( Pump_AL_HD_ENABLED )
 589:.\Generated_Source\PSoC5/Pump_AL.c ****                             if((Pump_AL_CONTROL_REG & Pump_AL_CTRL_HD_SEND) == 0u)
 590:.\Generated_Source\PSoC5/Pump_AL.c ****                             {   /* In Half duplex mode return RX mask only if
 591:.\Generated_Source\PSoC5/Pump_AL.c ****                                 *  RX configuration set, otherwise
 592:.\Generated_Source\PSoC5/Pump_AL.c ****                                 *  mask will be returned in LoadRxConfig() API.
 593:.\Generated_Source\PSoC5/Pump_AL.c ****                                 */
 594:.\Generated_Source\PSoC5/Pump_AL.c ****                                 Pump_AL_RXSTATUS_MASK_REG  |= Pump_AL_RX_STS_FIFO_NOTEMPTY;
 595:.\Generated_Source\PSoC5/Pump_AL.c ****                             }
 596:.\Generated_Source\PSoC5/Pump_AL.c ****                         #else
 597:.\Generated_Source\PSoC5/Pump_AL.c ****                             Pump_AL_RXSTATUS_MASK_REG  |= Pump_AL_RX_STS_FIFO_NOTEMPTY;
 598:.\Generated_Source\PSoC5/Pump_AL.c ****                         #endif /* end Pump_AL_HD_ENABLED */
 599:.\Generated_Source\PSoC5/Pump_AL.c ****                     #endif /* Pump_AL_RX_INTERRUPT_ENABLED and Hardware flow control*/
 600:.\Generated_Source\PSoC5/Pump_AL.c ****                 }
 601:.\Generated_Source\PSoC5/Pump_AL.c **** 
 602:.\Generated_Source\PSoC5/Pump_AL.c ****             }
 603:.\Generated_Source\PSoC5/Pump_AL.c ****             else
 604:.\Generated_Source\PSoC5/Pump_AL.c ****             {   rxStatus = Pump_AL_RXSTATUS_REG;
 725              		.loc 1 604 0
 726 005e 104B     		ldr	r3, .L47+16
 727 0060 1B78     		ldrb	r3, [r3]
 728 0062 7B70     		strb	r3, [r7, #1]
 605:.\Generated_Source\PSoC5/Pump_AL.c ****                 if((rxStatus & Pump_AL_RX_STS_FIFO_NOTEMPTY) != 0u)
 729              		.loc 1 605 0
 730 0064 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 731 0066 03F02003 		and	r3, r3, #32
 732 006a 002B     		cmp	r3, #0
 733 006c 09D0     		beq	.L45
 606:.\Generated_Source\PSoC5/Pump_AL.c ****                 {   /* Read received data from FIFO*/
 607:.\Generated_Source\PSoC5/Pump_AL.c ****                     rxData = Pump_AL_RXDATA_REG;
 734              		.loc 1 607 0
 735 006e 0D4B     		ldr	r3, .L47+20
 736 0070 1B78     		ldrb	r3, [r3]
 737 0072 FB71     		strb	r3, [r7, #7]
 608:.\Generated_Source\PSoC5/Pump_AL.c ****                     /*Check status on error*/
 609:.\Generated_Source\PSoC5/Pump_AL.c ****                     if((rxStatus & (Pump_AL_RX_STS_BREAK | Pump_AL_RX_STS_PAR_ERROR |
 610:.\Generated_Source\PSoC5/Pump_AL.c ****                                    Pump_AL_RX_STS_STOP_ERROR | Pump_AL_RX_STS_OVERRUN)) != 0u)
 738              		.loc 1 610 0
 739 0074 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 740 0076 03F01E03 		and	r3, r3, #30
 609:.\Generated_Source\PSoC5/Pump_AL.c ****                                    Pump_AL_RX_STS_STOP_ERROR | Pump_AL_RX_STS_OVERRUN)) != 0u)
 741              		.loc 1 609 0
 742 007a 002B     		cmp	r3, #0
 743 007c 01D0     		beq	.L45
 611:.\Generated_Source\PSoC5/Pump_AL.c ****                     {
 612:.\Generated_Source\PSoC5/Pump_AL.c ****                         rxData = 0u;
 744              		.loc 1 612 0
 745 007e 0023     		movs	r3, #0
 746 0080 FB71     		strb	r3, [r7, #7]
 747              	.L45:
 613:.\Generated_Source\PSoC5/Pump_AL.c ****                     }
 614:.\Generated_Source\PSoC5/Pump_AL.c ****                 }
 615:.\Generated_Source\PSoC5/Pump_AL.c ****             }
 616:.\Generated_Source\PSoC5/Pump_AL.c **** 
 617:.\Generated_Source\PSoC5/Pump_AL.c ****             /* Enable Rx interrupt. */
 618:.\Generated_Source\PSoC5/Pump_AL.c ****             #if(Pump_AL_RX_INTERRUPT_ENABLED)
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 25


 619:.\Generated_Source\PSoC5/Pump_AL.c ****                 Pump_AL_EnableRxInt();
 748              		.loc 1 619 0
 749 0082 FFF7FEFF 		bl	Pump_AL_EnableRxInt
 620:.\Generated_Source\PSoC5/Pump_AL.c ****             #endif /* Pump_AL_RX_INTERRUPT_ENABLED */
 621:.\Generated_Source\PSoC5/Pump_AL.c **** 
 622:.\Generated_Source\PSoC5/Pump_AL.c ****         #else /* Pump_AL_RXBUFFERSIZE > Pump_AL_FIFO_LENGTH */
 623:.\Generated_Source\PSoC5/Pump_AL.c **** 
 624:.\Generated_Source\PSoC5/Pump_AL.c ****             rxStatus =Pump_AL_RXSTATUS_REG;
 625:.\Generated_Source\PSoC5/Pump_AL.c ****             if((rxStatus & Pump_AL_RX_STS_FIFO_NOTEMPTY) != 0u)
 626:.\Generated_Source\PSoC5/Pump_AL.c ****             {   /* Read received data from FIFO*/
 627:.\Generated_Source\PSoC5/Pump_AL.c ****                 rxData = Pump_AL_RXDATA_REG;
 628:.\Generated_Source\PSoC5/Pump_AL.c ****                 /*Check status on error*/
 629:.\Generated_Source\PSoC5/Pump_AL.c ****                 if((rxStatus & (Pump_AL_RX_STS_BREAK | Pump_AL_RX_STS_PAR_ERROR |
 630:.\Generated_Source\PSoC5/Pump_AL.c ****                                Pump_AL_RX_STS_STOP_ERROR | Pump_AL_RX_STS_OVERRUN)) != 0u)
 631:.\Generated_Source\PSoC5/Pump_AL.c ****                 {
 632:.\Generated_Source\PSoC5/Pump_AL.c ****                     rxData = 0u;
 633:.\Generated_Source\PSoC5/Pump_AL.c ****                 }
 634:.\Generated_Source\PSoC5/Pump_AL.c ****             }
 635:.\Generated_Source\PSoC5/Pump_AL.c ****         #endif /* Pump_AL_RXBUFFERSIZE > Pump_AL_FIFO_LENGTH */
 636:.\Generated_Source\PSoC5/Pump_AL.c **** 
 637:.\Generated_Source\PSoC5/Pump_AL.c ****         return(rxData);
 750              		.loc 1 637 0
 751 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 638:.\Generated_Source\PSoC5/Pump_AL.c ****     }
 752              		.loc 1 638 0
 753 0088 1846     		mov	r0, r3
 754 008a 0837     		adds	r7, r7, #8
 755              		.cfi_def_cfa_offset 8
 756 008c BD46     		mov	sp, r7
 757              		.cfi_def_cfa_register 13
 758              		@ sp needed
 759 008e 80BD     		pop	{r7, pc}
 760              	.L48:
 761              		.align	2
 762              	.L47:
 763 0090 00000000 		.word	Pump_AL_rxBufferRead
 764 0094 00000000 		.word	Pump_AL_rxBufferWrite
 765 0098 00000000 		.word	Pump_AL_rxBufferLoopDetect
 766 009c 00000000 		.word	Pump_AL_rxBuffer
 767 00a0 64650040 		.word	1073767780
 768 00a4 46650040 		.word	1073767750
 769              		.cfi_endproc
 770              	.LFE11:
 771              		.size	Pump_AL_GetChar, .-Pump_AL_GetChar
 772              		.section	.text.Pump_AL_GetByte,"ax",%progbits
 773              		.align	2
 774              		.global	Pump_AL_GetByte
 775              		.thumb
 776              		.thumb_func
 777              		.type	Pump_AL_GetByte, %function
 778              	Pump_AL_GetByte:
 779              	.LFB12:
 639:.\Generated_Source\PSoC5/Pump_AL.c **** 
 640:.\Generated_Source\PSoC5/Pump_AL.c **** 
 641:.\Generated_Source\PSoC5/Pump_AL.c ****     /*******************************************************************************
 642:.\Generated_Source\PSoC5/Pump_AL.c ****     * Function Name: Pump_AL_GetByte
 643:.\Generated_Source\PSoC5/Pump_AL.c ****     ********************************************************************************
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 26


 644:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 645:.\Generated_Source\PSoC5/Pump_AL.c ****     * Summary:
 646:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Grab the next available byte of data from the recieve FIFO
 647:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 648:.\Generated_Source\PSoC5/Pump_AL.c ****     * Parameters:
 649:.\Generated_Source\PSoC5/Pump_AL.c ****     *  None.
 650:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 651:.\Generated_Source\PSoC5/Pump_AL.c ****     * Return:
 652:.\Generated_Source\PSoC5/Pump_AL.c ****     *  MSB contains Status Register and LSB contains UART RX data
 653:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 654:.\Generated_Source\PSoC5/Pump_AL.c ****     * Reentrant:
 655:.\Generated_Source\PSoC5/Pump_AL.c ****     *  No.
 656:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 657:.\Generated_Source\PSoC5/Pump_AL.c ****     *******************************************************************************/
 658:.\Generated_Source\PSoC5/Pump_AL.c ****     uint16 Pump_AL_GetByte(void) 
 659:.\Generated_Source\PSoC5/Pump_AL.c ****     {
 780              		.loc 1 659 0
 781              		.cfi_startproc
 782              		@ args = 0, pretend = 0, frame = 0
 783              		@ frame_needed = 1, uses_anonymous_args = 0
 784 0000 98B5     		push	{r3, r4, r7, lr}
 785              		.cfi_def_cfa_offset 16
 786              		.cfi_offset 3, -16
 787              		.cfi_offset 4, -12
 788              		.cfi_offset 7, -8
 789              		.cfi_offset 14, -4
 790 0002 00AF     		add	r7, sp, #0
 791              		.cfi_def_cfa_register 7
 660:.\Generated_Source\PSoC5/Pump_AL.c ****         return ( ((uint16)Pump_AL_ReadRxStatus() << 8u) | Pump_AL_ReadRxData() );
 792              		.loc 1 660 0
 793 0004 FFF7FEFF 		bl	Pump_AL_ReadRxStatus
 794 0008 0346     		mov	r3, r0
 795 000a 1B02     		lsls	r3, r3, #8
 796 000c 9CB2     		uxth	r4, r3
 797 000e FFF7FEFF 		bl	Pump_AL_ReadRxData
 798 0012 0346     		mov	r3, r0
 799 0014 9BB2     		uxth	r3, r3
 800 0016 2246     		mov	r2, r4	@ movhi
 801 0018 1343     		orrs	r3, r3, r2
 802 001a 9BB2     		uxth	r3, r3
 803 001c 9BB2     		uxth	r3, r3
 661:.\Generated_Source\PSoC5/Pump_AL.c ****     }
 804              		.loc 1 661 0
 805 001e 1846     		mov	r0, r3
 806 0020 98BD     		pop	{r3, r4, r7, pc}
 807              		.cfi_endproc
 808              	.LFE12:
 809              		.size	Pump_AL_GetByte, .-Pump_AL_GetByte
 810 0022 00BF     		.section	.text.Pump_AL_GetRxBufferSize,"ax",%progbits
 811              		.align	2
 812              		.global	Pump_AL_GetRxBufferSize
 813              		.thumb
 814              		.thumb_func
 815              		.type	Pump_AL_GetRxBufferSize, %function
 816              	Pump_AL_GetRxBufferSize:
 817              	.LFB13:
 662:.\Generated_Source\PSoC5/Pump_AL.c **** 
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 27


 663:.\Generated_Source\PSoC5/Pump_AL.c **** 
 664:.\Generated_Source\PSoC5/Pump_AL.c ****     /*******************************************************************************
 665:.\Generated_Source\PSoC5/Pump_AL.c ****     * Function Name: Pump_AL_GetRxBufferSize
 666:.\Generated_Source\PSoC5/Pump_AL.c ****     ********************************************************************************
 667:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 668:.\Generated_Source\PSoC5/Pump_AL.c ****     * Summary:
 669:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Determine the amount of bytes left in the RX buffer and return the count in
 670:.\Generated_Source\PSoC5/Pump_AL.c ****     *  bytes
 671:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 672:.\Generated_Source\PSoC5/Pump_AL.c ****     * Parameters:
 673:.\Generated_Source\PSoC5/Pump_AL.c ****     *  None.
 674:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 675:.\Generated_Source\PSoC5/Pump_AL.c ****     * Return:
 676:.\Generated_Source\PSoC5/Pump_AL.c ****     *  uint16: Integer count of the number of bytes left
 677:.\Generated_Source\PSoC5/Pump_AL.c ****     *  in the RX buffer
 678:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 679:.\Generated_Source\PSoC5/Pump_AL.c ****     * Global Variables:
 680:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_rxBufferWrite - used to calculate left bytes.
 681:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_rxBufferRead - used to calculate left bytes.
 682:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_rxBufferLoopDetect - checked to decide left bytes amount.
 683:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 684:.\Generated_Source\PSoC5/Pump_AL.c ****     * Reentrant:
 685:.\Generated_Source\PSoC5/Pump_AL.c ****     *  No.
 686:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 687:.\Generated_Source\PSoC5/Pump_AL.c ****     * Theory:
 688:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Allows the user to find out how full the RX Buffer is.
 689:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 690:.\Generated_Source\PSoC5/Pump_AL.c ****     *******************************************************************************/
 691:.\Generated_Source\PSoC5/Pump_AL.c ****     uint16 Pump_AL_GetRxBufferSize(void)
 692:.\Generated_Source\PSoC5/Pump_AL.c ****                                                             
 693:.\Generated_Source\PSoC5/Pump_AL.c ****     {
 818              		.loc 1 693 0
 819              		.cfi_startproc
 820              		@ args = 0, pretend = 0, frame = 8
 821              		@ frame_needed = 1, uses_anonymous_args = 0
 822 0000 80B5     		push	{r7, lr}
 823              		.cfi_def_cfa_offset 8
 824              		.cfi_offset 7, -8
 825              		.cfi_offset 14, -4
 826 0002 82B0     		sub	sp, sp, #8
 827              		.cfi_def_cfa_offset 16
 828 0004 00AF     		add	r7, sp, #0
 829              		.cfi_def_cfa_register 7
 694:.\Generated_Source\PSoC5/Pump_AL.c ****         uint16 size;
 695:.\Generated_Source\PSoC5/Pump_AL.c **** 
 696:.\Generated_Source\PSoC5/Pump_AL.c ****         #if(Pump_AL_RXBUFFERSIZE > Pump_AL_FIFO_LENGTH)
 697:.\Generated_Source\PSoC5/Pump_AL.c **** 
 698:.\Generated_Source\PSoC5/Pump_AL.c ****             /* Disable Rx interrupt. */
 699:.\Generated_Source\PSoC5/Pump_AL.c ****             /* Protect variables that could change on interrupt. */
 700:.\Generated_Source\PSoC5/Pump_AL.c ****             #if(Pump_AL_RX_INTERRUPT_ENABLED)
 701:.\Generated_Source\PSoC5/Pump_AL.c ****                 Pump_AL_DisableRxInt();
 830              		.loc 1 701 0
 831 0006 FFF7FEFF 		bl	Pump_AL_DisableRxInt
 702:.\Generated_Source\PSoC5/Pump_AL.c ****             #endif /* Pump_AL_RX_INTERRUPT_ENABLED */
 703:.\Generated_Source\PSoC5/Pump_AL.c **** 
 704:.\Generated_Source\PSoC5/Pump_AL.c ****             if(Pump_AL_rxBufferRead == Pump_AL_rxBufferWrite)
 832              		.loc 1 704 0
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 28


 833 000a 1B4B     		ldr	r3, .L58
 834 000c 1B88     		ldrh	r3, [r3]	@ movhi
 835 000e 9AB2     		uxth	r2, r3
 836 0010 1A4B     		ldr	r3, .L58+4
 837 0012 1B88     		ldrh	r3, [r3]	@ movhi
 838 0014 9BB2     		uxth	r3, r3
 839 0016 9A42     		cmp	r2, r3
 840 0018 0BD1     		bne	.L52
 705:.\Generated_Source\PSoC5/Pump_AL.c ****             {
 706:.\Generated_Source\PSoC5/Pump_AL.c ****                 if(Pump_AL_rxBufferLoopDetect > 0u)
 841              		.loc 1 706 0
 842 001a 194B     		ldr	r3, .L58+8
 843 001c 1B78     		ldrb	r3, [r3]
 844 001e DBB2     		uxtb	r3, r3
 845 0020 002B     		cmp	r3, #0
 846 0022 03D0     		beq	.L53
 707:.\Generated_Source\PSoC5/Pump_AL.c ****                 {
 708:.\Generated_Source\PSoC5/Pump_AL.c ****                     size = Pump_AL_RXBUFFERSIZE;
 847              		.loc 1 708 0
 848 0024 4FF48073 		mov	r3, #256
 849 0028 FB80     		strh	r3, [r7, #6]	@ movhi
 850 002a 1EE0     		b	.L55
 851              	.L53:
 709:.\Generated_Source\PSoC5/Pump_AL.c ****                 }
 710:.\Generated_Source\PSoC5/Pump_AL.c ****                 else
 711:.\Generated_Source\PSoC5/Pump_AL.c ****                 {
 712:.\Generated_Source\PSoC5/Pump_AL.c ****                     size = 0u;
 852              		.loc 1 712 0
 853 002c 0023     		movs	r3, #0
 854 002e FB80     		strh	r3, [r7, #6]	@ movhi
 855 0030 1BE0     		b	.L55
 856              	.L52:
 713:.\Generated_Source\PSoC5/Pump_AL.c ****                 }
 714:.\Generated_Source\PSoC5/Pump_AL.c ****             }
 715:.\Generated_Source\PSoC5/Pump_AL.c ****             else if(Pump_AL_rxBufferRead < Pump_AL_rxBufferWrite)
 857              		.loc 1 715 0
 858 0032 114B     		ldr	r3, .L58
 859 0034 1B88     		ldrh	r3, [r3]	@ movhi
 860 0036 9AB2     		uxth	r2, r3
 861 0038 104B     		ldr	r3, .L58+4
 862 003a 1B88     		ldrh	r3, [r3]	@ movhi
 863 003c 9BB2     		uxth	r3, r3
 864 003e 9A42     		cmp	r2, r3
 865 0040 08D2     		bcs	.L56
 716:.\Generated_Source\PSoC5/Pump_AL.c ****             {
 717:.\Generated_Source\PSoC5/Pump_AL.c ****                 size = (Pump_AL_rxBufferWrite - Pump_AL_rxBufferRead);
 866              		.loc 1 717 0
 867 0042 0E4B     		ldr	r3, .L58+4
 868 0044 1B88     		ldrh	r3, [r3]	@ movhi
 869 0046 9AB2     		uxth	r2, r3
 870 0048 0B4B     		ldr	r3, .L58
 871 004a 1B88     		ldrh	r3, [r3]	@ movhi
 872 004c 9BB2     		uxth	r3, r3
 873 004e D31A     		subs	r3, r2, r3
 874 0050 FB80     		strh	r3, [r7, #6]	@ movhi
 875 0052 0AE0     		b	.L55
 876              	.L56:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 29


 718:.\Generated_Source\PSoC5/Pump_AL.c ****             }
 719:.\Generated_Source\PSoC5/Pump_AL.c ****             else
 720:.\Generated_Source\PSoC5/Pump_AL.c ****             {
 721:.\Generated_Source\PSoC5/Pump_AL.c ****                 size = (Pump_AL_RXBUFFERSIZE - Pump_AL_rxBufferRead) + Pump_AL_rxBufferWrite;
 877              		.loc 1 721 0
 878 0054 094B     		ldr	r3, .L58+4
 879 0056 1B88     		ldrh	r3, [r3]	@ movhi
 880 0058 9AB2     		uxth	r2, r3
 881 005a 074B     		ldr	r3, .L58
 882 005c 1B88     		ldrh	r3, [r3]	@ movhi
 883 005e 9BB2     		uxth	r3, r3
 884 0060 D31A     		subs	r3, r2, r3
 885 0062 9BB2     		uxth	r3, r3
 886 0064 03F58073 		add	r3, r3, #256
 887 0068 FB80     		strh	r3, [r7, #6]	@ movhi
 888              	.L55:
 722:.\Generated_Source\PSoC5/Pump_AL.c ****             }
 723:.\Generated_Source\PSoC5/Pump_AL.c **** 
 724:.\Generated_Source\PSoC5/Pump_AL.c ****             /* Enable Rx interrupt. */
 725:.\Generated_Source\PSoC5/Pump_AL.c ****             #if(Pump_AL_RX_INTERRUPT_ENABLED)
 726:.\Generated_Source\PSoC5/Pump_AL.c ****                 Pump_AL_EnableRxInt();
 889              		.loc 1 726 0
 890 006a FFF7FEFF 		bl	Pump_AL_EnableRxInt
 727:.\Generated_Source\PSoC5/Pump_AL.c ****             #endif /* End Pump_AL_RX_INTERRUPT_ENABLED */
 728:.\Generated_Source\PSoC5/Pump_AL.c **** 
 729:.\Generated_Source\PSoC5/Pump_AL.c ****         #else /* Pump_AL_RXBUFFERSIZE > Pump_AL_FIFO_LENGTH */
 730:.\Generated_Source\PSoC5/Pump_AL.c **** 
 731:.\Generated_Source\PSoC5/Pump_AL.c ****             /* We can only know if there is data in the fifo. */
 732:.\Generated_Source\PSoC5/Pump_AL.c ****             size = ((Pump_AL_RXSTATUS_REG & Pump_AL_RX_STS_FIFO_NOTEMPTY) != 0u) ? 1u : 0u;
 733:.\Generated_Source\PSoC5/Pump_AL.c **** 
 734:.\Generated_Source\PSoC5/Pump_AL.c ****         #endif /* End Pump_AL_RXBUFFERSIZE > Pump_AL_FIFO_LENGTH */
 735:.\Generated_Source\PSoC5/Pump_AL.c **** 
 736:.\Generated_Source\PSoC5/Pump_AL.c ****         return(size);
 891              		.loc 1 736 0
 892 006e FB88     		ldrh	r3, [r7, #6]
 737:.\Generated_Source\PSoC5/Pump_AL.c ****     }
 893              		.loc 1 737 0
 894 0070 1846     		mov	r0, r3
 895 0072 0837     		adds	r7, r7, #8
 896              		.cfi_def_cfa_offset 8
 897 0074 BD46     		mov	sp, r7
 898              		.cfi_def_cfa_register 13
 899              		@ sp needed
 900 0076 80BD     		pop	{r7, pc}
 901              	.L59:
 902              		.align	2
 903              	.L58:
 904 0078 00000000 		.word	Pump_AL_rxBufferRead
 905 007c 00000000 		.word	Pump_AL_rxBufferWrite
 906 0080 00000000 		.word	Pump_AL_rxBufferLoopDetect
 907              		.cfi_endproc
 908              	.LFE13:
 909              		.size	Pump_AL_GetRxBufferSize, .-Pump_AL_GetRxBufferSize
 910              		.section	.text.Pump_AL_ClearRxBuffer,"ax",%progbits
 911              		.align	2
 912              		.global	Pump_AL_ClearRxBuffer
 913              		.thumb
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 30


 914              		.thumb_func
 915              		.type	Pump_AL_ClearRxBuffer, %function
 916              	Pump_AL_ClearRxBuffer:
 917              	.LFB14:
 738:.\Generated_Source\PSoC5/Pump_AL.c **** 
 739:.\Generated_Source\PSoC5/Pump_AL.c **** 
 740:.\Generated_Source\PSoC5/Pump_AL.c ****     /*******************************************************************************
 741:.\Generated_Source\PSoC5/Pump_AL.c ****     * Function Name: Pump_AL_ClearRxBuffer
 742:.\Generated_Source\PSoC5/Pump_AL.c ****     ********************************************************************************
 743:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 744:.\Generated_Source\PSoC5/Pump_AL.c ****     * Summary:
 745:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Clears the RX RAM buffer by setting the read and write pointers both to zero.
 746:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Clears hardware RX FIFO.
 747:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 748:.\Generated_Source\PSoC5/Pump_AL.c ****     * Parameters:
 749:.\Generated_Source\PSoC5/Pump_AL.c ****     *  None.
 750:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 751:.\Generated_Source\PSoC5/Pump_AL.c ****     * Return:
 752:.\Generated_Source\PSoC5/Pump_AL.c ****     *  None.
 753:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 754:.\Generated_Source\PSoC5/Pump_AL.c ****     * Global Variables:
 755:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_rxBufferWrite - cleared to zero.
 756:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_rxBufferRead - cleared to zero.
 757:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_rxBufferLoopDetect - cleared to zero.
 758:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_rxBufferOverflow - cleared to zero.
 759:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 760:.\Generated_Source\PSoC5/Pump_AL.c ****     * Reentrant:
 761:.\Generated_Source\PSoC5/Pump_AL.c ****     *  No.
 762:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 763:.\Generated_Source\PSoC5/Pump_AL.c ****     * Theory:
 764:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Setting the pointers to zero makes the system believe there is no data to
 765:.\Generated_Source\PSoC5/Pump_AL.c ****     *  read and writing will resume at address 0 overwriting any data that may
 766:.\Generated_Source\PSoC5/Pump_AL.c ****     *  have remained in the RAM.
 767:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 768:.\Generated_Source\PSoC5/Pump_AL.c ****     * Side Effects:
 769:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Any received data not read from the RAM or FIFO buffer will be lost.
 770:.\Generated_Source\PSoC5/Pump_AL.c ****     *******************************************************************************/
 771:.\Generated_Source\PSoC5/Pump_AL.c ****     void Pump_AL_ClearRxBuffer(void) 
 772:.\Generated_Source\PSoC5/Pump_AL.c ****     {
 918              		.loc 1 772 0
 919              		.cfi_startproc
 920              		@ args = 0, pretend = 0, frame = 8
 921              		@ frame_needed = 1, uses_anonymous_args = 0
 922 0000 80B5     		push	{r7, lr}
 923              		.cfi_def_cfa_offset 8
 924              		.cfi_offset 7, -8
 925              		.cfi_offset 14, -4
 926 0002 82B0     		sub	sp, sp, #8
 927              		.cfi_def_cfa_offset 16
 928 0004 00AF     		add	r7, sp, #0
 929              		.cfi_def_cfa_register 7
 773:.\Generated_Source\PSoC5/Pump_AL.c ****         uint8 enableInterrupts;
 774:.\Generated_Source\PSoC5/Pump_AL.c **** 
 775:.\Generated_Source\PSoC5/Pump_AL.c ****         /* clear the HW FIFO */
 776:.\Generated_Source\PSoC5/Pump_AL.c ****         /* Enter critical section */
 777:.\Generated_Source\PSoC5/Pump_AL.c ****         enableInterrupts = CyEnterCriticalSection();
 930              		.loc 1 777 0
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 31


 931 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 932 000a 0346     		mov	r3, r0
 933 000c FB71     		strb	r3, [r7, #7]
 778:.\Generated_Source\PSoC5/Pump_AL.c ****         Pump_AL_RXDATA_AUX_CTL_REG |=  Pump_AL_RX_FIFO_CLR;
 934              		.loc 1 778 0
 935 000e 134A     		ldr	r2, .L61
 936 0010 124B     		ldr	r3, .L61
 937 0012 1B78     		ldrb	r3, [r3]
 938 0014 DBB2     		uxtb	r3, r3
 939 0016 43F00103 		orr	r3, r3, #1
 940 001a DBB2     		uxtb	r3, r3
 941 001c 1370     		strb	r3, [r2]
 779:.\Generated_Source\PSoC5/Pump_AL.c ****         Pump_AL_RXDATA_AUX_CTL_REG &= (uint8)~Pump_AL_RX_FIFO_CLR;
 942              		.loc 1 779 0
 943 001e 0F4A     		ldr	r2, .L61
 944 0020 0E4B     		ldr	r3, .L61
 945 0022 1B78     		ldrb	r3, [r3]
 946 0024 DBB2     		uxtb	r3, r3
 947 0026 23F00103 		bic	r3, r3, #1
 948 002a DBB2     		uxtb	r3, r3
 949 002c 1370     		strb	r3, [r2]
 780:.\Generated_Source\PSoC5/Pump_AL.c ****         /* Exit critical section */
 781:.\Generated_Source\PSoC5/Pump_AL.c ****         CyExitCriticalSection(enableInterrupts);
 950              		.loc 1 781 0
 951 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 952 0030 1846     		mov	r0, r3
 953 0032 FFF7FEFF 		bl	CyExitCriticalSection
 782:.\Generated_Source\PSoC5/Pump_AL.c **** 
 783:.\Generated_Source\PSoC5/Pump_AL.c ****         #if(Pump_AL_RXBUFFERSIZE > Pump_AL_FIFO_LENGTH)
 784:.\Generated_Source\PSoC5/Pump_AL.c ****             /* Disable Rx interrupt. */
 785:.\Generated_Source\PSoC5/Pump_AL.c ****             /* Protect variables that could change on interrupt. */
 786:.\Generated_Source\PSoC5/Pump_AL.c ****             #if(Pump_AL_RX_INTERRUPT_ENABLED)
 787:.\Generated_Source\PSoC5/Pump_AL.c ****                 Pump_AL_DisableRxInt();
 954              		.loc 1 787 0
 955 0036 FFF7FEFF 		bl	Pump_AL_DisableRxInt
 788:.\Generated_Source\PSoC5/Pump_AL.c ****             #endif /* End Pump_AL_RX_INTERRUPT_ENABLED */
 789:.\Generated_Source\PSoC5/Pump_AL.c **** 
 790:.\Generated_Source\PSoC5/Pump_AL.c ****             Pump_AL_rxBufferRead = 0u;
 956              		.loc 1 790 0
 957 003a 094B     		ldr	r3, .L61+4
 958 003c 0022     		movs	r2, #0
 959 003e 1A80     		strh	r2, [r3]	@ movhi
 791:.\Generated_Source\PSoC5/Pump_AL.c ****             Pump_AL_rxBufferWrite = 0u;
 960              		.loc 1 791 0
 961 0040 084B     		ldr	r3, .L61+8
 962 0042 0022     		movs	r2, #0
 963 0044 1A80     		strh	r2, [r3]	@ movhi
 792:.\Generated_Source\PSoC5/Pump_AL.c ****             Pump_AL_rxBufferLoopDetect = 0u;
 964              		.loc 1 792 0
 965 0046 084B     		ldr	r3, .L61+12
 966 0048 0022     		movs	r2, #0
 967 004a 1A70     		strb	r2, [r3]
 793:.\Generated_Source\PSoC5/Pump_AL.c ****             Pump_AL_rxBufferOverflow = 0u;
 968              		.loc 1 793 0
 969 004c 074B     		ldr	r3, .L61+16
 970 004e 0022     		movs	r2, #0
 971 0050 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 32


 794:.\Generated_Source\PSoC5/Pump_AL.c **** 
 795:.\Generated_Source\PSoC5/Pump_AL.c ****             /* Enable Rx interrupt. */
 796:.\Generated_Source\PSoC5/Pump_AL.c ****             #if(Pump_AL_RX_INTERRUPT_ENABLED)
 797:.\Generated_Source\PSoC5/Pump_AL.c ****                 Pump_AL_EnableRxInt();
 972              		.loc 1 797 0
 973 0052 FFF7FEFF 		bl	Pump_AL_EnableRxInt
 798:.\Generated_Source\PSoC5/Pump_AL.c ****             #endif /* End Pump_AL_RX_INTERRUPT_ENABLED */
 799:.\Generated_Source\PSoC5/Pump_AL.c ****         #endif /* End Pump_AL_RXBUFFERSIZE > Pump_AL_FIFO_LENGTH */
 800:.\Generated_Source\PSoC5/Pump_AL.c **** 
 801:.\Generated_Source\PSoC5/Pump_AL.c ****     }
 974              		.loc 1 801 0
 975 0056 0837     		adds	r7, r7, #8
 976              		.cfi_def_cfa_offset 8
 977 0058 BD46     		mov	sp, r7
 978              		.cfi_def_cfa_register 13
 979              		@ sp needed
 980 005a 80BD     		pop	{r7, pc}
 981              	.L62:
 982              		.align	2
 983              	.L61:
 984 005c 96650040 		.word	1073767830
 985 0060 00000000 		.word	Pump_AL_rxBufferRead
 986 0064 00000000 		.word	Pump_AL_rxBufferWrite
 987 0068 00000000 		.word	Pump_AL_rxBufferLoopDetect
 988 006c 00000000 		.word	Pump_AL_rxBufferOverflow
 989              		.cfi_endproc
 990              	.LFE14:
 991              		.size	Pump_AL_ClearRxBuffer, .-Pump_AL_ClearRxBuffer
 992              		.section	.text.Pump_AL_SetRxAddressMode,"ax",%progbits
 993              		.align	2
 994              		.global	Pump_AL_SetRxAddressMode
 995              		.thumb
 996              		.thumb_func
 997              		.type	Pump_AL_SetRxAddressMode, %function
 998              	Pump_AL_SetRxAddressMode:
 999              	.LFB15:
 802:.\Generated_Source\PSoC5/Pump_AL.c **** 
 803:.\Generated_Source\PSoC5/Pump_AL.c **** 
 804:.\Generated_Source\PSoC5/Pump_AL.c ****     /*******************************************************************************
 805:.\Generated_Source\PSoC5/Pump_AL.c ****     * Function Name: Pump_AL_SetRxAddressMode
 806:.\Generated_Source\PSoC5/Pump_AL.c ****     ********************************************************************************
 807:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 808:.\Generated_Source\PSoC5/Pump_AL.c ****     * Summary:
 809:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Set the receive addressing mode
 810:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 811:.\Generated_Source\PSoC5/Pump_AL.c ****     * Parameters:
 812:.\Generated_Source\PSoC5/Pump_AL.c ****     *  addressMode: Enumerated value indicating the mode of RX addressing
 813:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL__B_UART__AM_SW_BYTE_BYTE -  Software Byte-by-Byte address
 814:.\Generated_Source\PSoC5/Pump_AL.c ****     *                                               detection
 815:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL__B_UART__AM_SW_DETECT_TO_BUFFER - Software Detect to Buffer
 816:.\Generated_Source\PSoC5/Pump_AL.c ****     *                                               address detection
 817:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL__B_UART__AM_HW_BYTE_BY_BYTE - Hardware Byte-by-Byte address
 818:.\Generated_Source\PSoC5/Pump_AL.c ****     *                                               detection
 819:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL__B_UART__AM_HW_DETECT_TO_BUFFER - Hardware Detect to Buffer
 820:.\Generated_Source\PSoC5/Pump_AL.c ****     *                                               address detection
 821:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL__B_UART__AM_NONE - No address detection
 822:.\Generated_Source\PSoC5/Pump_AL.c ****     *
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 33


 823:.\Generated_Source\PSoC5/Pump_AL.c ****     * Return:
 824:.\Generated_Source\PSoC5/Pump_AL.c ****     *  None.
 825:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 826:.\Generated_Source\PSoC5/Pump_AL.c ****     * Global Variables:
 827:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_rxAddressMode - the parameter stored in this variable for
 828:.\Generated_Source\PSoC5/Pump_AL.c ****     *   the farther usage in RX ISR.
 829:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_rxAddressDetected - set to initial state (0).
 830:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 831:.\Generated_Source\PSoC5/Pump_AL.c ****     *******************************************************************************/
 832:.\Generated_Source\PSoC5/Pump_AL.c ****     void Pump_AL_SetRxAddressMode(uint8 addressMode)
 833:.\Generated_Source\PSoC5/Pump_AL.c ****                                                         
 834:.\Generated_Source\PSoC5/Pump_AL.c ****     {
 1000              		.loc 1 834 0
 1001              		.cfi_startproc
 1002              		@ args = 0, pretend = 0, frame = 8
 1003              		@ frame_needed = 1, uses_anonymous_args = 0
 1004              		@ link register save eliminated.
 1005 0000 80B4     		push	{r7}
 1006              		.cfi_def_cfa_offset 4
 1007              		.cfi_offset 7, -4
 1008 0002 83B0     		sub	sp, sp, #12
 1009              		.cfi_def_cfa_offset 16
 1010 0004 00AF     		add	r7, sp, #0
 1011              		.cfi_def_cfa_register 7
 1012 0006 0346     		mov	r3, r0
 1013 0008 FB71     		strb	r3, [r7, #7]
 835:.\Generated_Source\PSoC5/Pump_AL.c ****         #if(Pump_AL_RXHW_ADDRESS_ENABLED)
 836:.\Generated_Source\PSoC5/Pump_AL.c ****             #if(Pump_AL_CONTROL_REG_REMOVED)
 837:.\Generated_Source\PSoC5/Pump_AL.c ****                 if(addressMode != 0u) { }     /* release compiler warning */
 838:.\Generated_Source\PSoC5/Pump_AL.c ****             #else /* Pump_AL_CONTROL_REG_REMOVED */
 839:.\Generated_Source\PSoC5/Pump_AL.c ****                 uint8 tmpCtrl;
 840:.\Generated_Source\PSoC5/Pump_AL.c ****                 tmpCtrl = Pump_AL_CONTROL_REG & (uint8)~Pump_AL_CTRL_RXADDR_MODE_MASK;
 841:.\Generated_Source\PSoC5/Pump_AL.c ****                 tmpCtrl |= (uint8)(addressMode << Pump_AL_CTRL_RXADDR_MODE0_SHIFT);
 842:.\Generated_Source\PSoC5/Pump_AL.c ****                 Pump_AL_CONTROL_REG = tmpCtrl;
 843:.\Generated_Source\PSoC5/Pump_AL.c ****                 #if(Pump_AL_RX_INTERRUPT_ENABLED && \
 844:.\Generated_Source\PSoC5/Pump_AL.c ****                    (Pump_AL_RXBUFFERSIZE > Pump_AL_FIFO_LENGTH) )
 845:.\Generated_Source\PSoC5/Pump_AL.c ****                     Pump_AL_rxAddressMode = addressMode;
 846:.\Generated_Source\PSoC5/Pump_AL.c ****                     Pump_AL_rxAddressDetected = 0u;
 847:.\Generated_Source\PSoC5/Pump_AL.c ****                 #endif /* End Pump_AL_RXBUFFERSIZE > Pump_AL_FIFO_LENGTH*/
 848:.\Generated_Source\PSoC5/Pump_AL.c ****             #endif /* End Pump_AL_CONTROL_REG_REMOVED */
 849:.\Generated_Source\PSoC5/Pump_AL.c ****         #else /* Pump_AL_RXHW_ADDRESS_ENABLED */
 850:.\Generated_Source\PSoC5/Pump_AL.c ****             if(addressMode != 0u) { }     /* release compiler warning */
 851:.\Generated_Source\PSoC5/Pump_AL.c ****         #endif /* End Pump_AL_RXHW_ADDRESS_ENABLED */
 852:.\Generated_Source\PSoC5/Pump_AL.c ****     }
 1014              		.loc 1 852 0
 1015 000a 0C37     		adds	r7, r7, #12
 1016              		.cfi_def_cfa_offset 4
 1017 000c BD46     		mov	sp, r7
 1018              		.cfi_def_cfa_register 13
 1019              		@ sp needed
 1020 000e 5DF8047B 		ldr	r7, [sp], #4
 1021              		.cfi_restore 7
 1022              		.cfi_def_cfa_offset 0
 1023 0012 7047     		bx	lr
 1024              		.cfi_endproc
 1025              	.LFE15:
 1026              		.size	Pump_AL_SetRxAddressMode, .-Pump_AL_SetRxAddressMode
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 34


 1027              		.section	.text.Pump_AL_SetRxAddress1,"ax",%progbits
 1028              		.align	2
 1029              		.global	Pump_AL_SetRxAddress1
 1030              		.thumb
 1031              		.thumb_func
 1032              		.type	Pump_AL_SetRxAddress1, %function
 1033              	Pump_AL_SetRxAddress1:
 1034              	.LFB16:
 853:.\Generated_Source\PSoC5/Pump_AL.c **** 
 854:.\Generated_Source\PSoC5/Pump_AL.c **** 
 855:.\Generated_Source\PSoC5/Pump_AL.c ****     /*******************************************************************************
 856:.\Generated_Source\PSoC5/Pump_AL.c ****     * Function Name: Pump_AL_SetRxAddress1
 857:.\Generated_Source\PSoC5/Pump_AL.c ****     ********************************************************************************
 858:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 859:.\Generated_Source\PSoC5/Pump_AL.c ****     * Summary:
 860:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Set the first hardware address compare value
 861:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 862:.\Generated_Source\PSoC5/Pump_AL.c ****     * Parameters:
 863:.\Generated_Source\PSoC5/Pump_AL.c ****     *  address
 864:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 865:.\Generated_Source\PSoC5/Pump_AL.c ****     * Return:
 866:.\Generated_Source\PSoC5/Pump_AL.c ****     *  None.
 867:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 868:.\Generated_Source\PSoC5/Pump_AL.c ****     *******************************************************************************/
 869:.\Generated_Source\PSoC5/Pump_AL.c ****     void Pump_AL_SetRxAddress1(uint8 address) 
 870:.\Generated_Source\PSoC5/Pump_AL.c **** 
 871:.\Generated_Source\PSoC5/Pump_AL.c ****     {
 1035              		.loc 1 871 0
 1036              		.cfi_startproc
 1037              		@ args = 0, pretend = 0, frame = 8
 1038              		@ frame_needed = 1, uses_anonymous_args = 0
 1039              		@ link register save eliminated.
 1040 0000 80B4     		push	{r7}
 1041              		.cfi_def_cfa_offset 4
 1042              		.cfi_offset 7, -4
 1043 0002 83B0     		sub	sp, sp, #12
 1044              		.cfi_def_cfa_offset 16
 1045 0004 00AF     		add	r7, sp, #0
 1046              		.cfi_def_cfa_register 7
 1047 0006 0346     		mov	r3, r0
 1048 0008 FB71     		strb	r3, [r7, #7]
 872:.\Generated_Source\PSoC5/Pump_AL.c ****         Pump_AL_RXADDRESS1_REG = address;
 1049              		.loc 1 872 0
 1050 000a 044A     		ldr	r2, .L65
 1051 000c FB79     		ldrb	r3, [r7, #7]
 1052 000e 1370     		strb	r3, [r2]
 873:.\Generated_Source\PSoC5/Pump_AL.c ****     }
 1053              		.loc 1 873 0
 1054 0010 0C37     		adds	r7, r7, #12
 1055              		.cfi_def_cfa_offset 4
 1056 0012 BD46     		mov	sp, r7
 1057              		.cfi_def_cfa_register 13
 1058              		@ sp needed
 1059 0014 5DF8047B 		ldr	r7, [sp], #4
 1060              		.cfi_restore 7
 1061              		.cfi_def_cfa_offset 0
 1062 0018 7047     		bx	lr
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 35


 1063              	.L66:
 1064 001a 00BF     		.align	2
 1065              	.L65:
 1066 001c 26650040 		.word	1073767718
 1067              		.cfi_endproc
 1068              	.LFE16:
 1069              		.size	Pump_AL_SetRxAddress1, .-Pump_AL_SetRxAddress1
 1070              		.section	.text.Pump_AL_SetRxAddress2,"ax",%progbits
 1071              		.align	2
 1072              		.global	Pump_AL_SetRxAddress2
 1073              		.thumb
 1074              		.thumb_func
 1075              		.type	Pump_AL_SetRxAddress2, %function
 1076              	Pump_AL_SetRxAddress2:
 1077              	.LFB17:
 874:.\Generated_Source\PSoC5/Pump_AL.c **** 
 875:.\Generated_Source\PSoC5/Pump_AL.c **** 
 876:.\Generated_Source\PSoC5/Pump_AL.c ****     /*******************************************************************************
 877:.\Generated_Source\PSoC5/Pump_AL.c ****     * Function Name: Pump_AL_SetRxAddress2
 878:.\Generated_Source\PSoC5/Pump_AL.c ****     ********************************************************************************
 879:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 880:.\Generated_Source\PSoC5/Pump_AL.c ****     * Summary:
 881:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Set the second hardware address compare value
 882:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 883:.\Generated_Source\PSoC5/Pump_AL.c ****     * Parameters:
 884:.\Generated_Source\PSoC5/Pump_AL.c ****     *  address
 885:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 886:.\Generated_Source\PSoC5/Pump_AL.c ****     * Return:
 887:.\Generated_Source\PSoC5/Pump_AL.c ****     *  None.
 888:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 889:.\Generated_Source\PSoC5/Pump_AL.c ****     *******************************************************************************/
 890:.\Generated_Source\PSoC5/Pump_AL.c ****     void Pump_AL_SetRxAddress2(uint8 address) 
 891:.\Generated_Source\PSoC5/Pump_AL.c ****     {
 1078              		.loc 1 891 0
 1079              		.cfi_startproc
 1080              		@ args = 0, pretend = 0, frame = 8
 1081              		@ frame_needed = 1, uses_anonymous_args = 0
 1082              		@ link register save eliminated.
 1083 0000 80B4     		push	{r7}
 1084              		.cfi_def_cfa_offset 4
 1085              		.cfi_offset 7, -4
 1086 0002 83B0     		sub	sp, sp, #12
 1087              		.cfi_def_cfa_offset 16
 1088 0004 00AF     		add	r7, sp, #0
 1089              		.cfi_def_cfa_register 7
 1090 0006 0346     		mov	r3, r0
 1091 0008 FB71     		strb	r3, [r7, #7]
 892:.\Generated_Source\PSoC5/Pump_AL.c ****         Pump_AL_RXADDRESS2_REG = address;
 1092              		.loc 1 892 0
 1093 000a 044A     		ldr	r2, .L68
 1094 000c FB79     		ldrb	r3, [r7, #7]
 1095 000e 1370     		strb	r3, [r2]
 893:.\Generated_Source\PSoC5/Pump_AL.c ****     }
 1096              		.loc 1 893 0
 1097 0010 0C37     		adds	r7, r7, #12
 1098              		.cfi_def_cfa_offset 4
 1099 0012 BD46     		mov	sp, r7
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 36


 1100              		.cfi_def_cfa_register 13
 1101              		@ sp needed
 1102 0014 5DF8047B 		ldr	r7, [sp], #4
 1103              		.cfi_restore 7
 1104              		.cfi_def_cfa_offset 0
 1105 0018 7047     		bx	lr
 1106              	.L69:
 1107 001a 00BF     		.align	2
 1108              	.L68:
 1109 001c 36650040 		.word	1073767734
 1110              		.cfi_endproc
 1111              	.LFE17:
 1112              		.size	Pump_AL_SetRxAddress2, .-Pump_AL_SetRxAddress2
 1113              		.section	.text.Pump_AL_SetTxInterruptMode,"ax",%progbits
 1114              		.align	2
 1115              		.global	Pump_AL_SetTxInterruptMode
 1116              		.thumb
 1117              		.thumb_func
 1118              		.type	Pump_AL_SetTxInterruptMode, %function
 1119              	Pump_AL_SetTxInterruptMode:
 1120              	.LFB18:
 894:.\Generated_Source\PSoC5/Pump_AL.c **** 
 895:.\Generated_Source\PSoC5/Pump_AL.c **** #endif  /* Pump_AL_RX_ENABLED || Pump_AL_HD_ENABLED*/
 896:.\Generated_Source\PSoC5/Pump_AL.c **** 
 897:.\Generated_Source\PSoC5/Pump_AL.c **** 
 898:.\Generated_Source\PSoC5/Pump_AL.c **** #if( (Pump_AL_TX_ENABLED) || (Pump_AL_HD_ENABLED) )
 899:.\Generated_Source\PSoC5/Pump_AL.c **** 
 900:.\Generated_Source\PSoC5/Pump_AL.c ****     #if(Pump_AL_TX_INTERRUPT_ENABLED)
 901:.\Generated_Source\PSoC5/Pump_AL.c **** 
 902:.\Generated_Source\PSoC5/Pump_AL.c ****         /*******************************************************************************
 903:.\Generated_Source\PSoC5/Pump_AL.c ****         * Function Name: Pump_AL_EnableTxInt
 904:.\Generated_Source\PSoC5/Pump_AL.c ****         ********************************************************************************
 905:.\Generated_Source\PSoC5/Pump_AL.c ****         *
 906:.\Generated_Source\PSoC5/Pump_AL.c ****         * Summary:
 907:.\Generated_Source\PSoC5/Pump_AL.c ****         *  Enable TX interrupt generation
 908:.\Generated_Source\PSoC5/Pump_AL.c ****         *
 909:.\Generated_Source\PSoC5/Pump_AL.c ****         * Parameters:
 910:.\Generated_Source\PSoC5/Pump_AL.c ****         *  None.
 911:.\Generated_Source\PSoC5/Pump_AL.c ****         *
 912:.\Generated_Source\PSoC5/Pump_AL.c ****         * Return:
 913:.\Generated_Source\PSoC5/Pump_AL.c ****         *  None.
 914:.\Generated_Source\PSoC5/Pump_AL.c ****         *
 915:.\Generated_Source\PSoC5/Pump_AL.c ****         * Theory:
 916:.\Generated_Source\PSoC5/Pump_AL.c ****         *  Enable the interrupt output -or- the interrupt component itself
 917:.\Generated_Source\PSoC5/Pump_AL.c ****         *
 918:.\Generated_Source\PSoC5/Pump_AL.c ****         *******************************************************************************/
 919:.\Generated_Source\PSoC5/Pump_AL.c ****         void Pump_AL_EnableTxInt(void) 
 920:.\Generated_Source\PSoC5/Pump_AL.c ****         {
 921:.\Generated_Source\PSoC5/Pump_AL.c ****             CyIntEnable(Pump_AL_TX_VECT_NUM);
 922:.\Generated_Source\PSoC5/Pump_AL.c ****         }
 923:.\Generated_Source\PSoC5/Pump_AL.c **** 
 924:.\Generated_Source\PSoC5/Pump_AL.c **** 
 925:.\Generated_Source\PSoC5/Pump_AL.c ****         /*******************************************************************************
 926:.\Generated_Source\PSoC5/Pump_AL.c ****         * Function Name: Pump_AL_DisableTxInt
 927:.\Generated_Source\PSoC5/Pump_AL.c ****         ********************************************************************************
 928:.\Generated_Source\PSoC5/Pump_AL.c ****         *
 929:.\Generated_Source\PSoC5/Pump_AL.c ****         * Summary:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 37


 930:.\Generated_Source\PSoC5/Pump_AL.c ****         *  Disable TX interrupt generation
 931:.\Generated_Source\PSoC5/Pump_AL.c ****         *
 932:.\Generated_Source\PSoC5/Pump_AL.c ****         * Parameters:
 933:.\Generated_Source\PSoC5/Pump_AL.c ****         *  None.
 934:.\Generated_Source\PSoC5/Pump_AL.c ****         *
 935:.\Generated_Source\PSoC5/Pump_AL.c ****         * Return:
 936:.\Generated_Source\PSoC5/Pump_AL.c ****         *  None.
 937:.\Generated_Source\PSoC5/Pump_AL.c ****         *
 938:.\Generated_Source\PSoC5/Pump_AL.c ****         * Theory:
 939:.\Generated_Source\PSoC5/Pump_AL.c ****         *  Disable the interrupt output -or- the interrupt component itself
 940:.\Generated_Source\PSoC5/Pump_AL.c ****         *
 941:.\Generated_Source\PSoC5/Pump_AL.c ****         *******************************************************************************/
 942:.\Generated_Source\PSoC5/Pump_AL.c ****         void Pump_AL_DisableTxInt(void) 
 943:.\Generated_Source\PSoC5/Pump_AL.c ****         {
 944:.\Generated_Source\PSoC5/Pump_AL.c ****             CyIntDisable(Pump_AL_TX_VECT_NUM);
 945:.\Generated_Source\PSoC5/Pump_AL.c ****         }
 946:.\Generated_Source\PSoC5/Pump_AL.c **** 
 947:.\Generated_Source\PSoC5/Pump_AL.c ****     #endif /* Pump_AL_TX_INTERRUPT_ENABLED */
 948:.\Generated_Source\PSoC5/Pump_AL.c **** 
 949:.\Generated_Source\PSoC5/Pump_AL.c **** 
 950:.\Generated_Source\PSoC5/Pump_AL.c ****     /*******************************************************************************
 951:.\Generated_Source\PSoC5/Pump_AL.c ****     * Function Name: Pump_AL_SetTxInterruptMode
 952:.\Generated_Source\PSoC5/Pump_AL.c ****     ********************************************************************************
 953:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 954:.\Generated_Source\PSoC5/Pump_AL.c ****     * Summary:
 955:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Configure which status bits trigger an interrupt event
 956:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 957:.\Generated_Source\PSoC5/Pump_AL.c ****     * Parameters:
 958:.\Generated_Source\PSoC5/Pump_AL.c ****     *  intSrc: An or'd combination of the desired status bit masks (defined in
 959:.\Generated_Source\PSoC5/Pump_AL.c ****     *          the header file)
 960:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 961:.\Generated_Source\PSoC5/Pump_AL.c ****     * Return:
 962:.\Generated_Source\PSoC5/Pump_AL.c ****     *  None.
 963:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 964:.\Generated_Source\PSoC5/Pump_AL.c ****     * Theory:
 965:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Enables the output of specific status bits to the interrupt controller
 966:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 967:.\Generated_Source\PSoC5/Pump_AL.c ****     *******************************************************************************/
 968:.\Generated_Source\PSoC5/Pump_AL.c ****     void Pump_AL_SetTxInterruptMode(uint8 intSrc) 
 969:.\Generated_Source\PSoC5/Pump_AL.c ****     {
 1121              		.loc 1 969 0
 1122              		.cfi_startproc
 1123              		@ args = 0, pretend = 0, frame = 8
 1124              		@ frame_needed = 1, uses_anonymous_args = 0
 1125              		@ link register save eliminated.
 1126 0000 80B4     		push	{r7}
 1127              		.cfi_def_cfa_offset 4
 1128              		.cfi_offset 7, -4
 1129 0002 83B0     		sub	sp, sp, #12
 1130              		.cfi_def_cfa_offset 16
 1131 0004 00AF     		add	r7, sp, #0
 1132              		.cfi_def_cfa_register 7
 1133 0006 0346     		mov	r3, r0
 1134 0008 FB71     		strb	r3, [r7, #7]
 970:.\Generated_Source\PSoC5/Pump_AL.c ****         Pump_AL_TXSTATUS_MASK_REG = intSrc;
 1135              		.loc 1 970 0
 1136 000a 044A     		ldr	r2, .L71
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 38


 1137 000c FB79     		ldrb	r3, [r7, #7]
 1138 000e 1370     		strb	r3, [r2]
 971:.\Generated_Source\PSoC5/Pump_AL.c ****     }
 1139              		.loc 1 971 0
 1140 0010 0C37     		adds	r7, r7, #12
 1141              		.cfi_def_cfa_offset 4
 1142 0012 BD46     		mov	sp, r7
 1143              		.cfi_def_cfa_register 13
 1144              		@ sp needed
 1145 0014 5DF8047B 		ldr	r7, [sp], #4
 1146              		.cfi_restore 7
 1147              		.cfi_def_cfa_offset 0
 1148 0018 7047     		bx	lr
 1149              	.L72:
 1150 001a 00BF     		.align	2
 1151              	.L71:
 1152 001c 8A650040 		.word	1073767818
 1153              		.cfi_endproc
 1154              	.LFE18:
 1155              		.size	Pump_AL_SetTxInterruptMode, .-Pump_AL_SetTxInterruptMode
 1156              		.section	.text.Pump_AL_WriteTxData,"ax",%progbits
 1157              		.align	2
 1158              		.global	Pump_AL_WriteTxData
 1159              		.thumb
 1160              		.thumb_func
 1161              		.type	Pump_AL_WriteTxData, %function
 1162              	Pump_AL_WriteTxData:
 1163              	.LFB19:
 972:.\Generated_Source\PSoC5/Pump_AL.c **** 
 973:.\Generated_Source\PSoC5/Pump_AL.c **** 
 974:.\Generated_Source\PSoC5/Pump_AL.c ****     /*******************************************************************************
 975:.\Generated_Source\PSoC5/Pump_AL.c ****     * Function Name: Pump_AL_WriteTxData
 976:.\Generated_Source\PSoC5/Pump_AL.c ****     ********************************************************************************
 977:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 978:.\Generated_Source\PSoC5/Pump_AL.c ****     * Summary:
 979:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Write a byte of data to the Transmit FIFO or TX buffer to be sent when the
 980:.\Generated_Source\PSoC5/Pump_AL.c ****     *  bus is available. WriteTxData sends a byte without checking for buffer room
 981:.\Generated_Source\PSoC5/Pump_AL.c ****     *  or status. It is up to the user to separately check status.
 982:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 983:.\Generated_Source\PSoC5/Pump_AL.c ****     * Parameters:
 984:.\Generated_Source\PSoC5/Pump_AL.c ****     *  TXDataByte: byte of data to place in the transmit FIFO
 985:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 986:.\Generated_Source\PSoC5/Pump_AL.c ****     * Return:
 987:.\Generated_Source\PSoC5/Pump_AL.c ****     * void
 988:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 989:.\Generated_Source\PSoC5/Pump_AL.c ****     * Global Variables:
 990:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_txBuffer - RAM buffer pointer for save data for transmission
 991:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_txBufferWrite - cyclic index for write to txBuffer,
 992:.\Generated_Source\PSoC5/Pump_AL.c ****     *    incremented after each byte saved to buffer.
 993:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_txBufferRead - cyclic index for read from txBuffer,
 994:.\Generated_Source\PSoC5/Pump_AL.c ****     *    checked to identify the condition to write to FIFO directly or to TX buffer
 995:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_initVar - checked to identify that the component has been
 996:.\Generated_Source\PSoC5/Pump_AL.c ****     *    initialized.
 997:.\Generated_Source\PSoC5/Pump_AL.c ****     *
 998:.\Generated_Source\PSoC5/Pump_AL.c ****     * Reentrant:
 999:.\Generated_Source\PSoC5/Pump_AL.c ****     *  No.
1000:.\Generated_Source\PSoC5/Pump_AL.c ****     *
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 39


1001:.\Generated_Source\PSoC5/Pump_AL.c ****     *******************************************************************************/
1002:.\Generated_Source\PSoC5/Pump_AL.c ****     void Pump_AL_WriteTxData(uint8 txDataByte) 
1003:.\Generated_Source\PSoC5/Pump_AL.c ****     {
 1164              		.loc 1 1003 0
 1165              		.cfi_startproc
 1166              		@ args = 0, pretend = 0, frame = 8
 1167              		@ frame_needed = 1, uses_anonymous_args = 0
 1168              		@ link register save eliminated.
 1169 0000 80B4     		push	{r7}
 1170              		.cfi_def_cfa_offset 4
 1171              		.cfi_offset 7, -4
 1172 0002 83B0     		sub	sp, sp, #12
 1173              		.cfi_def_cfa_offset 16
 1174 0004 00AF     		add	r7, sp, #0
 1175              		.cfi_def_cfa_register 7
 1176 0006 0346     		mov	r3, r0
 1177 0008 FB71     		strb	r3, [r7, #7]
1004:.\Generated_Source\PSoC5/Pump_AL.c ****         /* If not Initialized then skip this function*/
1005:.\Generated_Source\PSoC5/Pump_AL.c ****         if(Pump_AL_initVar != 0u)
 1178              		.loc 1 1005 0
 1179 000a 064B     		ldr	r3, .L75
 1180 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1181 000e 002B     		cmp	r3, #0
 1182 0010 02D0     		beq	.L73
1006:.\Generated_Source\PSoC5/Pump_AL.c ****         {
1007:.\Generated_Source\PSoC5/Pump_AL.c ****             #if(Pump_AL_TXBUFFERSIZE > Pump_AL_FIFO_LENGTH)
1008:.\Generated_Source\PSoC5/Pump_AL.c **** 
1009:.\Generated_Source\PSoC5/Pump_AL.c ****                 /* Disable Tx interrupt. */
1010:.\Generated_Source\PSoC5/Pump_AL.c ****                 /* Protect variables that could change on interrupt. */
1011:.\Generated_Source\PSoC5/Pump_AL.c ****                 #if(Pump_AL_TX_INTERRUPT_ENABLED)
1012:.\Generated_Source\PSoC5/Pump_AL.c ****                     Pump_AL_DisableTxInt();
1013:.\Generated_Source\PSoC5/Pump_AL.c ****                 #endif /* End Pump_AL_TX_INTERRUPT_ENABLED */
1014:.\Generated_Source\PSoC5/Pump_AL.c **** 
1015:.\Generated_Source\PSoC5/Pump_AL.c ****                 if( (Pump_AL_txBufferRead == Pump_AL_txBufferWrite) &&
1016:.\Generated_Source\PSoC5/Pump_AL.c ****                     ((Pump_AL_TXSTATUS_REG & Pump_AL_TX_STS_FIFO_FULL) == 0u) )
1017:.\Generated_Source\PSoC5/Pump_AL.c ****                 {
1018:.\Generated_Source\PSoC5/Pump_AL.c ****                     /* Add directly to the FIFO. */
1019:.\Generated_Source\PSoC5/Pump_AL.c ****                     Pump_AL_TXDATA_REG = txDataByte;
1020:.\Generated_Source\PSoC5/Pump_AL.c ****                 }
1021:.\Generated_Source\PSoC5/Pump_AL.c ****                 else
1022:.\Generated_Source\PSoC5/Pump_AL.c ****                 {
1023:.\Generated_Source\PSoC5/Pump_AL.c ****                     if(Pump_AL_txBufferWrite >= Pump_AL_TXBUFFERSIZE)
1024:.\Generated_Source\PSoC5/Pump_AL.c ****                     {
1025:.\Generated_Source\PSoC5/Pump_AL.c ****                         Pump_AL_txBufferWrite = 0u;
1026:.\Generated_Source\PSoC5/Pump_AL.c ****                     }
1027:.\Generated_Source\PSoC5/Pump_AL.c **** 
1028:.\Generated_Source\PSoC5/Pump_AL.c ****                     Pump_AL_txBuffer[Pump_AL_txBufferWrite] = txDataByte;
1029:.\Generated_Source\PSoC5/Pump_AL.c **** 
1030:.\Generated_Source\PSoC5/Pump_AL.c ****                     /* Add to the software buffer. */
1031:.\Generated_Source\PSoC5/Pump_AL.c ****                     Pump_AL_txBufferWrite++;
1032:.\Generated_Source\PSoC5/Pump_AL.c **** 
1033:.\Generated_Source\PSoC5/Pump_AL.c ****                 }
1034:.\Generated_Source\PSoC5/Pump_AL.c **** 
1035:.\Generated_Source\PSoC5/Pump_AL.c ****                 /* Enable Tx interrupt. */
1036:.\Generated_Source\PSoC5/Pump_AL.c ****                 #if(Pump_AL_TX_INTERRUPT_ENABLED)
1037:.\Generated_Source\PSoC5/Pump_AL.c ****                     Pump_AL_EnableTxInt();
1038:.\Generated_Source\PSoC5/Pump_AL.c ****                 #endif /* End Pump_AL_TX_INTERRUPT_ENABLED */
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 40


1039:.\Generated_Source\PSoC5/Pump_AL.c **** 
1040:.\Generated_Source\PSoC5/Pump_AL.c ****             #else /* Pump_AL_TXBUFFERSIZE > Pump_AL_FIFO_LENGTH */
1041:.\Generated_Source\PSoC5/Pump_AL.c **** 
1042:.\Generated_Source\PSoC5/Pump_AL.c ****                 /* Add directly to the FIFO. */
1043:.\Generated_Source\PSoC5/Pump_AL.c ****                 Pump_AL_TXDATA_REG = txDataByte;
 1183              		.loc 1 1043 0
 1184 0012 054A     		ldr	r2, .L75+4
 1185 0014 FB79     		ldrb	r3, [r7, #7]
 1186 0016 1370     		strb	r3, [r2]
 1187              	.L73:
1044:.\Generated_Source\PSoC5/Pump_AL.c **** 
1045:.\Generated_Source\PSoC5/Pump_AL.c ****             #endif /* End Pump_AL_TXBUFFERSIZE > Pump_AL_FIFO_LENGTH */
1046:.\Generated_Source\PSoC5/Pump_AL.c ****         }
1047:.\Generated_Source\PSoC5/Pump_AL.c ****     }
 1188              		.loc 1 1047 0
 1189 0018 0C37     		adds	r7, r7, #12
 1190              		.cfi_def_cfa_offset 4
 1191 001a BD46     		mov	sp, r7
 1192              		.cfi_def_cfa_register 13
 1193              		@ sp needed
 1194 001c 5DF8047B 		ldr	r7, [sp], #4
 1195              		.cfi_restore 7
 1196              		.cfi_def_cfa_offset 0
 1197 0020 7047     		bx	lr
 1198              	.L76:
 1199 0022 00BF     		.align	2
 1200              	.L75:
 1201 0024 00000000 		.word	Pump_AL_initVar
 1202 0028 4A650040 		.word	1073767754
 1203              		.cfi_endproc
 1204              	.LFE19:
 1205              		.size	Pump_AL_WriteTxData, .-Pump_AL_WriteTxData
 1206              		.section	.text.Pump_AL_ReadTxStatus,"ax",%progbits
 1207              		.align	2
 1208              		.global	Pump_AL_ReadTxStatus
 1209              		.thumb
 1210              		.thumb_func
 1211              		.type	Pump_AL_ReadTxStatus, %function
 1212              	Pump_AL_ReadTxStatus:
 1213              	.LFB20:
1048:.\Generated_Source\PSoC5/Pump_AL.c **** 
1049:.\Generated_Source\PSoC5/Pump_AL.c **** 
1050:.\Generated_Source\PSoC5/Pump_AL.c ****     /*******************************************************************************
1051:.\Generated_Source\PSoC5/Pump_AL.c ****     * Function Name: Pump_AL_ReadTxStatus
1052:.\Generated_Source\PSoC5/Pump_AL.c ****     ********************************************************************************
1053:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1054:.\Generated_Source\PSoC5/Pump_AL.c ****     * Summary:
1055:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Read the status register for the component
1056:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1057:.\Generated_Source\PSoC5/Pump_AL.c ****     * Parameters:
1058:.\Generated_Source\PSoC5/Pump_AL.c ****     *  None.
1059:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1060:.\Generated_Source\PSoC5/Pump_AL.c ****     * Return:
1061:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Contents of the status register
1062:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1063:.\Generated_Source\PSoC5/Pump_AL.c ****     * Theory:
1064:.\Generated_Source\PSoC5/Pump_AL.c ****     *  This function reads the status register which is clear on read. It is up to
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 41


1065:.\Generated_Source\PSoC5/Pump_AL.c ****     *  the user to handle all bits in this return value accordingly, even if the bit
1066:.\Generated_Source\PSoC5/Pump_AL.c ****     *  was not enabled as an interrupt source the event happened and must be handled
1067:.\Generated_Source\PSoC5/Pump_AL.c ****     *  accordingly.
1068:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1069:.\Generated_Source\PSoC5/Pump_AL.c ****     *******************************************************************************/
1070:.\Generated_Source\PSoC5/Pump_AL.c ****     uint8 Pump_AL_ReadTxStatus(void) 
1071:.\Generated_Source\PSoC5/Pump_AL.c ****     {
 1214              		.loc 1 1071 0
 1215              		.cfi_startproc
 1216              		@ args = 0, pretend = 0, frame = 0
 1217              		@ frame_needed = 1, uses_anonymous_args = 0
 1218              		@ link register save eliminated.
 1219 0000 80B4     		push	{r7}
 1220              		.cfi_def_cfa_offset 4
 1221              		.cfi_offset 7, -4
 1222 0002 00AF     		add	r7, sp, #0
 1223              		.cfi_def_cfa_register 7
1072:.\Generated_Source\PSoC5/Pump_AL.c ****         return(Pump_AL_TXSTATUS_REG);
 1224              		.loc 1 1072 0
 1225 0004 034B     		ldr	r3, .L79
 1226 0006 1B78     		ldrb	r3, [r3]
 1227 0008 DBB2     		uxtb	r3, r3
1073:.\Generated_Source\PSoC5/Pump_AL.c ****     }
 1228              		.loc 1 1073 0
 1229 000a 1846     		mov	r0, r3
 1230 000c BD46     		mov	sp, r7
 1231              		.cfi_def_cfa_register 13
 1232              		@ sp needed
 1233 000e 5DF8047B 		ldr	r7, [sp], #4
 1234              		.cfi_restore 7
 1235              		.cfi_def_cfa_offset 0
 1236 0012 7047     		bx	lr
 1237              	.L80:
 1238              		.align	2
 1239              	.L79:
 1240 0014 6A650040 		.word	1073767786
 1241              		.cfi_endproc
 1242              	.LFE20:
 1243              		.size	Pump_AL_ReadTxStatus, .-Pump_AL_ReadTxStatus
 1244              		.section	.text.Pump_AL_PutChar,"ax",%progbits
 1245              		.align	2
 1246              		.global	Pump_AL_PutChar
 1247              		.thumb
 1248              		.thumb_func
 1249              		.type	Pump_AL_PutChar, %function
 1250              	Pump_AL_PutChar:
 1251              	.LFB21:
1074:.\Generated_Source\PSoC5/Pump_AL.c **** 
1075:.\Generated_Source\PSoC5/Pump_AL.c **** 
1076:.\Generated_Source\PSoC5/Pump_AL.c ****     /*******************************************************************************
1077:.\Generated_Source\PSoC5/Pump_AL.c ****     * Function Name: Pump_AL_PutChar
1078:.\Generated_Source\PSoC5/Pump_AL.c ****     ********************************************************************************
1079:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1080:.\Generated_Source\PSoC5/Pump_AL.c ****     * Summary:
1081:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Wait to send byte until TX register or buffer has room.
1082:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1083:.\Generated_Source\PSoC5/Pump_AL.c ****     * Parameters:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 42


1084:.\Generated_Source\PSoC5/Pump_AL.c ****     *  txDataByte: The 8-bit data value to send across the UART.
1085:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1086:.\Generated_Source\PSoC5/Pump_AL.c ****     * Return:
1087:.\Generated_Source\PSoC5/Pump_AL.c ****     *  None.
1088:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1089:.\Generated_Source\PSoC5/Pump_AL.c ****     * Global Variables:
1090:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_txBuffer - RAM buffer pointer for save data for transmission
1091:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_txBufferWrite - cyclic index for write to txBuffer,
1092:.\Generated_Source\PSoC5/Pump_AL.c ****     *     checked to identify free space in txBuffer and incremented after each byte
1093:.\Generated_Source\PSoC5/Pump_AL.c ****     *     saved to buffer.
1094:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_txBufferRead - cyclic index for read from txBuffer,
1095:.\Generated_Source\PSoC5/Pump_AL.c ****     *     checked to identify free space in txBuffer.
1096:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_initVar - checked to identify that the component has been
1097:.\Generated_Source\PSoC5/Pump_AL.c ****     *     initialized.
1098:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1099:.\Generated_Source\PSoC5/Pump_AL.c ****     * Reentrant:
1100:.\Generated_Source\PSoC5/Pump_AL.c ****     *  No.
1101:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1102:.\Generated_Source\PSoC5/Pump_AL.c ****     * Theory:
1103:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Allows the user to transmit any byte of data in a single transfer
1104:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1105:.\Generated_Source\PSoC5/Pump_AL.c ****     *******************************************************************************/
1106:.\Generated_Source\PSoC5/Pump_AL.c ****     void Pump_AL_PutChar(uint8 txDataByte) 
1107:.\Generated_Source\PSoC5/Pump_AL.c ****     {
 1252              		.loc 1 1107 0
 1253              		.cfi_startproc
 1254              		@ args = 0, pretend = 0, frame = 8
 1255              		@ frame_needed = 1, uses_anonymous_args = 0
 1256              		@ link register save eliminated.
 1257 0000 80B4     		push	{r7}
 1258              		.cfi_def_cfa_offset 4
 1259              		.cfi_offset 7, -4
 1260 0002 83B0     		sub	sp, sp, #12
 1261              		.cfi_def_cfa_offset 16
 1262 0004 00AF     		add	r7, sp, #0
 1263              		.cfi_def_cfa_register 7
 1264 0006 0346     		mov	r3, r0
 1265 0008 FB71     		strb	r3, [r7, #7]
1108:.\Generated_Source\PSoC5/Pump_AL.c ****             #if(Pump_AL_TXBUFFERSIZE > Pump_AL_FIFO_LENGTH)
1109:.\Generated_Source\PSoC5/Pump_AL.c ****                 /* The temporary output pointer is used since it takes two instructions
1110:.\Generated_Source\PSoC5/Pump_AL.c ****                 *  to increment with a wrap, and we can't risk doing that with the real
1111:.\Generated_Source\PSoC5/Pump_AL.c ****                 *  pointer and getting an interrupt in between instructions.
1112:.\Generated_Source\PSoC5/Pump_AL.c ****                 */
1113:.\Generated_Source\PSoC5/Pump_AL.c ****                 uint8 loc_txBufferWrite;
1114:.\Generated_Source\PSoC5/Pump_AL.c ****                 uint8 loc_txBufferRead;
1115:.\Generated_Source\PSoC5/Pump_AL.c **** 
1116:.\Generated_Source\PSoC5/Pump_AL.c ****                 do{
1117:.\Generated_Source\PSoC5/Pump_AL.c ****                     /* Block if software buffer is full, so we don't overwrite. */
1118:.\Generated_Source\PSoC5/Pump_AL.c ****                     #if ((Pump_AL_TXBUFFERSIZE > Pump_AL_MAX_BYTE_VALUE) && (CY_PSOC3))
1119:.\Generated_Source\PSoC5/Pump_AL.c ****                         /* Disable TX interrupt to protect variables that could change on interrupt
1120:.\Generated_Source\PSoC5/Pump_AL.c ****                         CyIntDisable(Pump_AL_TX_VECT_NUM);
1121:.\Generated_Source\PSoC5/Pump_AL.c ****                     #endif /* End TXBUFFERSIZE > 255 */
1122:.\Generated_Source\PSoC5/Pump_AL.c ****                     loc_txBufferWrite = Pump_AL_txBufferWrite;
1123:.\Generated_Source\PSoC5/Pump_AL.c ****                     loc_txBufferRead = Pump_AL_txBufferRead;
1124:.\Generated_Source\PSoC5/Pump_AL.c ****                     #if ((Pump_AL_TXBUFFERSIZE > Pump_AL_MAX_BYTE_VALUE) && (CY_PSOC3))
1125:.\Generated_Source\PSoC5/Pump_AL.c ****                         /* Enable interrupt to continue transmission */
1126:.\Generated_Source\PSoC5/Pump_AL.c ****                         CyIntEnable(Pump_AL_TX_VECT_NUM);
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 43


1127:.\Generated_Source\PSoC5/Pump_AL.c ****                     #endif /* End TXBUFFERSIZE > 255 */
1128:.\Generated_Source\PSoC5/Pump_AL.c ****                 }while( (loc_txBufferWrite < loc_txBufferRead) ? (loc_txBufferWrite == (loc_txBuffe
1129:.\Generated_Source\PSoC5/Pump_AL.c ****                                         ((loc_txBufferWrite - loc_txBufferRead) ==
1130:.\Generated_Source\PSoC5/Pump_AL.c ****                                         (uint8)(Pump_AL_TXBUFFERSIZE - 1u)) );
1131:.\Generated_Source\PSoC5/Pump_AL.c **** 
1132:.\Generated_Source\PSoC5/Pump_AL.c ****                 if( (loc_txBufferRead == loc_txBufferWrite) &&
1133:.\Generated_Source\PSoC5/Pump_AL.c ****                     ((Pump_AL_TXSTATUS_REG & Pump_AL_TX_STS_FIFO_FULL) == 0u) )
1134:.\Generated_Source\PSoC5/Pump_AL.c ****                 {
1135:.\Generated_Source\PSoC5/Pump_AL.c ****                     /* Add directly to the FIFO. */
1136:.\Generated_Source\PSoC5/Pump_AL.c ****                     Pump_AL_TXDATA_REG = txDataByte;
1137:.\Generated_Source\PSoC5/Pump_AL.c ****                 }
1138:.\Generated_Source\PSoC5/Pump_AL.c ****                 else
1139:.\Generated_Source\PSoC5/Pump_AL.c ****                 {
1140:.\Generated_Source\PSoC5/Pump_AL.c ****                     if(loc_txBufferWrite >= Pump_AL_TXBUFFERSIZE)
1141:.\Generated_Source\PSoC5/Pump_AL.c ****                     {
1142:.\Generated_Source\PSoC5/Pump_AL.c ****                         loc_txBufferWrite = 0u;
1143:.\Generated_Source\PSoC5/Pump_AL.c ****                     }
1144:.\Generated_Source\PSoC5/Pump_AL.c ****                     /* Add to the software buffer. */
1145:.\Generated_Source\PSoC5/Pump_AL.c ****                     Pump_AL_txBuffer[loc_txBufferWrite] = txDataByte;
1146:.\Generated_Source\PSoC5/Pump_AL.c ****                     loc_txBufferWrite++;
1147:.\Generated_Source\PSoC5/Pump_AL.c **** 
1148:.\Generated_Source\PSoC5/Pump_AL.c ****                     /* Finally, update the real output pointer */
1149:.\Generated_Source\PSoC5/Pump_AL.c ****                     #if ((Pump_AL_TXBUFFERSIZE > Pump_AL_MAX_BYTE_VALUE) && (CY_PSOC3))
1150:.\Generated_Source\PSoC5/Pump_AL.c ****                         CyIntDisable(Pump_AL_TX_VECT_NUM);
1151:.\Generated_Source\PSoC5/Pump_AL.c ****                     #endif /* End TXBUFFERSIZE > 255 */
1152:.\Generated_Source\PSoC5/Pump_AL.c ****                     Pump_AL_txBufferWrite = loc_txBufferWrite;
1153:.\Generated_Source\PSoC5/Pump_AL.c ****                     #if ((Pump_AL_TXBUFFERSIZE > Pump_AL_MAX_BYTE_VALUE) && (CY_PSOC3))
1154:.\Generated_Source\PSoC5/Pump_AL.c ****                         CyIntEnable(Pump_AL_TX_VECT_NUM);
1155:.\Generated_Source\PSoC5/Pump_AL.c ****                     #endif /* End TXBUFFERSIZE > 255 */
1156:.\Generated_Source\PSoC5/Pump_AL.c ****                 }
1157:.\Generated_Source\PSoC5/Pump_AL.c **** 
1158:.\Generated_Source\PSoC5/Pump_AL.c ****             #else /* Pump_AL_TXBUFFERSIZE > Pump_AL_FIFO_LENGTH */
1159:.\Generated_Source\PSoC5/Pump_AL.c **** 
1160:.\Generated_Source\PSoC5/Pump_AL.c ****                 while((Pump_AL_TXSTATUS_REG & Pump_AL_TX_STS_FIFO_FULL) != 0u)
 1266              		.loc 1 1160 0
 1267 000a 00BF     		nop
 1268              	.L82:
 1269              		.loc 1 1160 0 is_stmt 0 discriminator 1
 1270 000c 074B     		ldr	r3, .L83
 1271 000e 1B78     		ldrb	r3, [r3]
 1272 0010 DBB2     		uxtb	r3, r3
 1273 0012 03F00403 		and	r3, r3, #4
 1274 0016 002B     		cmp	r3, #0
 1275 0018 F8D1     		bne	.L82
1161:.\Generated_Source\PSoC5/Pump_AL.c ****                 {
1162:.\Generated_Source\PSoC5/Pump_AL.c ****                     ; /* Wait for room in the FIFO. */
1163:.\Generated_Source\PSoC5/Pump_AL.c ****                 }
1164:.\Generated_Source\PSoC5/Pump_AL.c **** 
1165:.\Generated_Source\PSoC5/Pump_AL.c ****                 /* Add directly to the FIFO. */
1166:.\Generated_Source\PSoC5/Pump_AL.c ****                 Pump_AL_TXDATA_REG = txDataByte;
 1276              		.loc 1 1166 0 is_stmt 1
 1277 001a 054A     		ldr	r2, .L83+4
 1278 001c FB79     		ldrb	r3, [r7, #7]
 1279 001e 1370     		strb	r3, [r2]
1167:.\Generated_Source\PSoC5/Pump_AL.c **** 
1168:.\Generated_Source\PSoC5/Pump_AL.c ****             #endif /* End Pump_AL_TXBUFFERSIZE > Pump_AL_FIFO_LENGTH */
1169:.\Generated_Source\PSoC5/Pump_AL.c ****     }
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 44


 1280              		.loc 1 1169 0
 1281 0020 0C37     		adds	r7, r7, #12
 1282              		.cfi_def_cfa_offset 4
 1283 0022 BD46     		mov	sp, r7
 1284              		.cfi_def_cfa_register 13
 1285              		@ sp needed
 1286 0024 5DF8047B 		ldr	r7, [sp], #4
 1287              		.cfi_restore 7
 1288              		.cfi_def_cfa_offset 0
 1289 0028 7047     		bx	lr
 1290              	.L84:
 1291 002a 00BF     		.align	2
 1292              	.L83:
 1293 002c 6A650040 		.word	1073767786
 1294 0030 4A650040 		.word	1073767754
 1295              		.cfi_endproc
 1296              	.LFE21:
 1297              		.size	Pump_AL_PutChar, .-Pump_AL_PutChar
 1298              		.section	.text.Pump_AL_PutString,"ax",%progbits
 1299              		.align	2
 1300              		.global	Pump_AL_PutString
 1301              		.thumb
 1302              		.thumb_func
 1303              		.type	Pump_AL_PutString, %function
 1304              	Pump_AL_PutString:
 1305              	.LFB22:
1170:.\Generated_Source\PSoC5/Pump_AL.c **** 
1171:.\Generated_Source\PSoC5/Pump_AL.c **** 
1172:.\Generated_Source\PSoC5/Pump_AL.c ****     /*******************************************************************************
1173:.\Generated_Source\PSoC5/Pump_AL.c ****     * Function Name: Pump_AL_PutString
1174:.\Generated_Source\PSoC5/Pump_AL.c ****     ********************************************************************************
1175:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1176:.\Generated_Source\PSoC5/Pump_AL.c ****     * Summary:
1177:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Write a Sequence of bytes on the Transmit line. Data comes from RAM or ROM.
1178:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1179:.\Generated_Source\PSoC5/Pump_AL.c ****     * Parameters:
1180:.\Generated_Source\PSoC5/Pump_AL.c ****     *  string: char pointer to character string of Data to Send.
1181:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1182:.\Generated_Source\PSoC5/Pump_AL.c ****     * Return:
1183:.\Generated_Source\PSoC5/Pump_AL.c ****     *  None.
1184:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1185:.\Generated_Source\PSoC5/Pump_AL.c ****     * Global Variables:
1186:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_initVar - checked to identify that the component has been
1187:.\Generated_Source\PSoC5/Pump_AL.c ****     *     initialized.
1188:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1189:.\Generated_Source\PSoC5/Pump_AL.c ****     * Reentrant:
1190:.\Generated_Source\PSoC5/Pump_AL.c ****     *  No.
1191:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1192:.\Generated_Source\PSoC5/Pump_AL.c ****     * Theory:
1193:.\Generated_Source\PSoC5/Pump_AL.c ****     *  This function will block if there is not enough memory to place the whole
1194:.\Generated_Source\PSoC5/Pump_AL.c ****     *  string, it will block until the entire string has been written to the
1195:.\Generated_Source\PSoC5/Pump_AL.c ****     *  transmit buffer.
1196:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1197:.\Generated_Source\PSoC5/Pump_AL.c ****     *******************************************************************************/
1198:.\Generated_Source\PSoC5/Pump_AL.c ****     void Pump_AL_PutString(const char8 string[]) 
1199:.\Generated_Source\PSoC5/Pump_AL.c ****     {
 1306              		.loc 1 1199 0
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 45


 1307              		.cfi_startproc
 1308              		@ args = 0, pretend = 0, frame = 16
 1309              		@ frame_needed = 1, uses_anonymous_args = 0
 1310 0000 80B5     		push	{r7, lr}
 1311              		.cfi_def_cfa_offset 8
 1312              		.cfi_offset 7, -8
 1313              		.cfi_offset 14, -4
 1314 0002 84B0     		sub	sp, sp, #16
 1315              		.cfi_def_cfa_offset 24
 1316 0004 00AF     		add	r7, sp, #0
 1317              		.cfi_def_cfa_register 7
 1318 0006 7860     		str	r0, [r7, #4]
1200:.\Generated_Source\PSoC5/Pump_AL.c ****         uint16 buf_index = 0u;
 1319              		.loc 1 1200 0
 1320 0008 0023     		movs	r3, #0
 1321 000a FB81     		strh	r3, [r7, #14]	@ movhi
1201:.\Generated_Source\PSoC5/Pump_AL.c ****         /* If not Initialized then skip this function*/
1202:.\Generated_Source\PSoC5/Pump_AL.c ****         if(Pump_AL_initVar != 0u)
 1322              		.loc 1 1202 0
 1323 000c 0B4B     		ldr	r3, .L89
 1324 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1325 0010 002B     		cmp	r3, #0
 1326 0012 10D0     		beq	.L85
1203:.\Generated_Source\PSoC5/Pump_AL.c ****         {
1204:.\Generated_Source\PSoC5/Pump_AL.c ****             /* This is a blocking function, it will not exit until all data is sent*/
1205:.\Generated_Source\PSoC5/Pump_AL.c ****             while(string[buf_index] != (char8)0)
 1327              		.loc 1 1205 0
 1328 0014 09E0     		b	.L87
 1329              	.L88:
1206:.\Generated_Source\PSoC5/Pump_AL.c ****             {
1207:.\Generated_Source\PSoC5/Pump_AL.c ****                 Pump_AL_PutChar((uint8)string[buf_index]);
 1330              		.loc 1 1207 0
 1331 0016 FB89     		ldrh	r3, [r7, #14]
 1332 0018 7A68     		ldr	r2, [r7, #4]
 1333 001a 1344     		add	r3, r3, r2
 1334 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1335 001e 1846     		mov	r0, r3
 1336 0020 FFF7FEFF 		bl	Pump_AL_PutChar
1208:.\Generated_Source\PSoC5/Pump_AL.c ****                 buf_index++;
 1337              		.loc 1 1208 0
 1338 0024 FB89     		ldrh	r3, [r7, #14]
 1339 0026 0133     		adds	r3, r3, #1
 1340 0028 FB81     		strh	r3, [r7, #14]	@ movhi
 1341              	.L87:
1205:.\Generated_Source\PSoC5/Pump_AL.c ****             {
 1342              		.loc 1 1205 0
 1343 002a FB89     		ldrh	r3, [r7, #14]
 1344 002c 7A68     		ldr	r2, [r7, #4]
 1345 002e 1344     		add	r3, r3, r2
 1346 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1347 0032 002B     		cmp	r3, #0
 1348 0034 EFD1     		bne	.L88
 1349              	.L85:
1209:.\Generated_Source\PSoC5/Pump_AL.c ****             }
1210:.\Generated_Source\PSoC5/Pump_AL.c ****         }
1211:.\Generated_Source\PSoC5/Pump_AL.c ****     }
 1350              		.loc 1 1211 0
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 46


 1351 0036 1037     		adds	r7, r7, #16
 1352              		.cfi_def_cfa_offset 8
 1353 0038 BD46     		mov	sp, r7
 1354              		.cfi_def_cfa_register 13
 1355              		@ sp needed
 1356 003a 80BD     		pop	{r7, pc}
 1357              	.L90:
 1358              		.align	2
 1359              	.L89:
 1360 003c 00000000 		.word	Pump_AL_initVar
 1361              		.cfi_endproc
 1362              	.LFE22:
 1363              		.size	Pump_AL_PutString, .-Pump_AL_PutString
 1364              		.section	.text.Pump_AL_PutArray,"ax",%progbits
 1365              		.align	2
 1366              		.global	Pump_AL_PutArray
 1367              		.thumb
 1368              		.thumb_func
 1369              		.type	Pump_AL_PutArray, %function
 1370              	Pump_AL_PutArray:
 1371              	.LFB23:
1212:.\Generated_Source\PSoC5/Pump_AL.c **** 
1213:.\Generated_Source\PSoC5/Pump_AL.c **** 
1214:.\Generated_Source\PSoC5/Pump_AL.c ****     /*******************************************************************************
1215:.\Generated_Source\PSoC5/Pump_AL.c ****     * Function Name: Pump_AL_PutArray
1216:.\Generated_Source\PSoC5/Pump_AL.c ****     ********************************************************************************
1217:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1218:.\Generated_Source\PSoC5/Pump_AL.c ****     * Summary:
1219:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Write a Sequence of bytes on the Transmit line. Data comes from RAM or ROM.
1220:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1221:.\Generated_Source\PSoC5/Pump_AL.c ****     * Parameters:
1222:.\Generated_Source\PSoC5/Pump_AL.c ****     *  string: Address of the memory array residing in RAM or ROM.
1223:.\Generated_Source\PSoC5/Pump_AL.c ****     *  byteCount: Number of Bytes to be transmitted.
1224:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1225:.\Generated_Source\PSoC5/Pump_AL.c ****     * Return:
1226:.\Generated_Source\PSoC5/Pump_AL.c ****     *  None.
1227:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1228:.\Generated_Source\PSoC5/Pump_AL.c ****     * Global Variables:
1229:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_initVar - checked to identify that the component has been
1230:.\Generated_Source\PSoC5/Pump_AL.c ****     *     initialized.
1231:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1232:.\Generated_Source\PSoC5/Pump_AL.c ****     * Reentrant:
1233:.\Generated_Source\PSoC5/Pump_AL.c ****     *  No.
1234:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1235:.\Generated_Source\PSoC5/Pump_AL.c ****     *******************************************************************************/
1236:.\Generated_Source\PSoC5/Pump_AL.c ****     void Pump_AL_PutArray(const uint8 string[], uint8 byteCount)
1237:.\Generated_Source\PSoC5/Pump_AL.c ****                                                                     
1238:.\Generated_Source\PSoC5/Pump_AL.c ****     {
 1372              		.loc 1 1238 0
 1373              		.cfi_startproc
 1374              		@ args = 0, pretend = 0, frame = 16
 1375              		@ frame_needed = 1, uses_anonymous_args = 0
 1376 0000 80B5     		push	{r7, lr}
 1377              		.cfi_def_cfa_offset 8
 1378              		.cfi_offset 7, -8
 1379              		.cfi_offset 14, -4
 1380 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 47


 1381              		.cfi_def_cfa_offset 24
 1382 0004 00AF     		add	r7, sp, #0
 1383              		.cfi_def_cfa_register 7
 1384 0006 7860     		str	r0, [r7, #4]
 1385 0008 0B46     		mov	r3, r1
 1386 000a FB70     		strb	r3, [r7, #3]
1239:.\Generated_Source\PSoC5/Pump_AL.c ****         uint8 buf_index = 0u;
 1387              		.loc 1 1239 0
 1388 000c 0023     		movs	r3, #0
 1389 000e FB73     		strb	r3, [r7, #15]
1240:.\Generated_Source\PSoC5/Pump_AL.c ****         /* If not Initialized then skip this function*/
1241:.\Generated_Source\PSoC5/Pump_AL.c ****         if(Pump_AL_initVar != 0u)
 1390              		.loc 1 1241 0
 1391 0010 0A4B     		ldr	r3, .L94
 1392 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1393 0014 002B     		cmp	r3, #0
 1394 0016 0DD0     		beq	.L91
 1395              	.L93:
1242:.\Generated_Source\PSoC5/Pump_AL.c ****         {
1243:.\Generated_Source\PSoC5/Pump_AL.c ****             do
1244:.\Generated_Source\PSoC5/Pump_AL.c ****             {
1245:.\Generated_Source\PSoC5/Pump_AL.c ****                 Pump_AL_PutChar(string[buf_index]);
 1396              		.loc 1 1245 0 discriminator 1
 1397 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1398 001a 7A68     		ldr	r2, [r7, #4]
 1399 001c 1344     		add	r3, r3, r2
 1400 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1401 0020 1846     		mov	r0, r3
 1402 0022 FFF7FEFF 		bl	Pump_AL_PutChar
1246:.\Generated_Source\PSoC5/Pump_AL.c ****                 buf_index++;
 1403              		.loc 1 1246 0 discriminator 1
 1404 0026 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1405 0028 0133     		adds	r3, r3, #1
 1406 002a FB73     		strb	r3, [r7, #15]
1247:.\Generated_Source\PSoC5/Pump_AL.c ****             }while(buf_index < byteCount);
 1407              		.loc 1 1247 0 discriminator 1
 1408 002c FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1409 002e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1410 0030 9A42     		cmp	r2, r3
 1411 0032 F1D3     		bcc	.L93
 1412              	.L91:
1248:.\Generated_Source\PSoC5/Pump_AL.c ****         }
1249:.\Generated_Source\PSoC5/Pump_AL.c ****     }
 1413              		.loc 1 1249 0
 1414 0034 1037     		adds	r7, r7, #16
 1415              		.cfi_def_cfa_offset 8
 1416 0036 BD46     		mov	sp, r7
 1417              		.cfi_def_cfa_register 13
 1418              		@ sp needed
 1419 0038 80BD     		pop	{r7, pc}
 1420              	.L95:
 1421 003a 00BF     		.align	2
 1422              	.L94:
 1423 003c 00000000 		.word	Pump_AL_initVar
 1424              		.cfi_endproc
 1425              	.LFE23:
 1426              		.size	Pump_AL_PutArray, .-Pump_AL_PutArray
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 48


 1427              		.section	.text.Pump_AL_PutCRLF,"ax",%progbits
 1428              		.align	2
 1429              		.global	Pump_AL_PutCRLF
 1430              		.thumb
 1431              		.thumb_func
 1432              		.type	Pump_AL_PutCRLF, %function
 1433              	Pump_AL_PutCRLF:
 1434              	.LFB24:
1250:.\Generated_Source\PSoC5/Pump_AL.c **** 
1251:.\Generated_Source\PSoC5/Pump_AL.c **** 
1252:.\Generated_Source\PSoC5/Pump_AL.c ****     /*******************************************************************************
1253:.\Generated_Source\PSoC5/Pump_AL.c ****     * Function Name: Pump_AL_PutCRLF
1254:.\Generated_Source\PSoC5/Pump_AL.c ****     ********************************************************************************
1255:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1256:.\Generated_Source\PSoC5/Pump_AL.c ****     * Summary:
1257:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Write a character and then carriage return and line feed.
1258:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1259:.\Generated_Source\PSoC5/Pump_AL.c ****     * Parameters:
1260:.\Generated_Source\PSoC5/Pump_AL.c ****     *  txDataByte: uint8 Character to send.
1261:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1262:.\Generated_Source\PSoC5/Pump_AL.c ****     * Return:
1263:.\Generated_Source\PSoC5/Pump_AL.c ****     *  None.
1264:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1265:.\Generated_Source\PSoC5/Pump_AL.c ****     * Global Variables:
1266:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_initVar - checked to identify that the component has been
1267:.\Generated_Source\PSoC5/Pump_AL.c ****     *     initialized.
1268:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1269:.\Generated_Source\PSoC5/Pump_AL.c ****     * Reentrant:
1270:.\Generated_Source\PSoC5/Pump_AL.c ****     *  No.
1271:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1272:.\Generated_Source\PSoC5/Pump_AL.c ****     *******************************************************************************/
1273:.\Generated_Source\PSoC5/Pump_AL.c ****     void Pump_AL_PutCRLF(uint8 txDataByte) 
1274:.\Generated_Source\PSoC5/Pump_AL.c ****     {
 1435              		.loc 1 1274 0
 1436              		.cfi_startproc
 1437              		@ args = 0, pretend = 0, frame = 8
 1438              		@ frame_needed = 1, uses_anonymous_args = 0
 1439 0000 80B5     		push	{r7, lr}
 1440              		.cfi_def_cfa_offset 8
 1441              		.cfi_offset 7, -8
 1442              		.cfi_offset 14, -4
 1443 0002 82B0     		sub	sp, sp, #8
 1444              		.cfi_def_cfa_offset 16
 1445 0004 00AF     		add	r7, sp, #0
 1446              		.cfi_def_cfa_register 7
 1447 0006 0346     		mov	r3, r0
 1448 0008 FB71     		strb	r3, [r7, #7]
1275:.\Generated_Source\PSoC5/Pump_AL.c ****         /* If not Initialized then skip this function*/
1276:.\Generated_Source\PSoC5/Pump_AL.c ****         if(Pump_AL_initVar != 0u)
 1449              		.loc 1 1276 0
 1450 000a 084B     		ldr	r3, .L98
 1451 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1452 000e 002B     		cmp	r3, #0
 1453 0010 09D0     		beq	.L96
1277:.\Generated_Source\PSoC5/Pump_AL.c ****         {
1278:.\Generated_Source\PSoC5/Pump_AL.c ****             Pump_AL_PutChar(txDataByte);
 1454              		.loc 1 1278 0
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 49


 1455 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1456 0014 1846     		mov	r0, r3
 1457 0016 FFF7FEFF 		bl	Pump_AL_PutChar
1279:.\Generated_Source\PSoC5/Pump_AL.c ****             Pump_AL_PutChar(0x0Du);
 1458              		.loc 1 1279 0
 1459 001a 0D20     		movs	r0, #13
 1460 001c FFF7FEFF 		bl	Pump_AL_PutChar
1280:.\Generated_Source\PSoC5/Pump_AL.c ****             Pump_AL_PutChar(0x0Au);
 1461              		.loc 1 1280 0
 1462 0020 0A20     		movs	r0, #10
 1463 0022 FFF7FEFF 		bl	Pump_AL_PutChar
 1464              	.L96:
1281:.\Generated_Source\PSoC5/Pump_AL.c ****         }
1282:.\Generated_Source\PSoC5/Pump_AL.c ****     }
 1465              		.loc 1 1282 0
 1466 0026 0837     		adds	r7, r7, #8
 1467              		.cfi_def_cfa_offset 8
 1468 0028 BD46     		mov	sp, r7
 1469              		.cfi_def_cfa_register 13
 1470              		@ sp needed
 1471 002a 80BD     		pop	{r7, pc}
 1472              	.L99:
 1473              		.align	2
 1474              	.L98:
 1475 002c 00000000 		.word	Pump_AL_initVar
 1476              		.cfi_endproc
 1477              	.LFE24:
 1478              		.size	Pump_AL_PutCRLF, .-Pump_AL_PutCRLF
 1479              		.section	.text.Pump_AL_GetTxBufferSize,"ax",%progbits
 1480              		.align	2
 1481              		.global	Pump_AL_GetTxBufferSize
 1482              		.thumb
 1483              		.thumb_func
 1484              		.type	Pump_AL_GetTxBufferSize, %function
 1485              	Pump_AL_GetTxBufferSize:
 1486              	.LFB25:
1283:.\Generated_Source\PSoC5/Pump_AL.c **** 
1284:.\Generated_Source\PSoC5/Pump_AL.c **** 
1285:.\Generated_Source\PSoC5/Pump_AL.c ****     /*******************************************************************************
1286:.\Generated_Source\PSoC5/Pump_AL.c ****     * Function Name: Pump_AL_GetTxBufferSize
1287:.\Generated_Source\PSoC5/Pump_AL.c ****     ********************************************************************************
1288:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1289:.\Generated_Source\PSoC5/Pump_AL.c ****     * Summary:
1290:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Determine the amount of space left in the TX buffer and return the count in
1291:.\Generated_Source\PSoC5/Pump_AL.c ****     *  bytes
1292:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1293:.\Generated_Source\PSoC5/Pump_AL.c ****     * Parameters:
1294:.\Generated_Source\PSoC5/Pump_AL.c ****     *  None.
1295:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1296:.\Generated_Source\PSoC5/Pump_AL.c ****     * Return:
1297:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Integer count of the number of bytes left in the TX buffer
1298:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1299:.\Generated_Source\PSoC5/Pump_AL.c ****     * Global Variables:
1300:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_txBufferWrite - used to calculate left space.
1301:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_txBufferRead - used to calculate left space.
1302:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1303:.\Generated_Source\PSoC5/Pump_AL.c ****     * Reentrant:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 50


1304:.\Generated_Source\PSoC5/Pump_AL.c ****     *  No.
1305:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1306:.\Generated_Source\PSoC5/Pump_AL.c ****     * Theory:
1307:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Allows the user to find out how full the TX Buffer is.
1308:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1309:.\Generated_Source\PSoC5/Pump_AL.c ****     *******************************************************************************/
1310:.\Generated_Source\PSoC5/Pump_AL.c ****     uint8 Pump_AL_GetTxBufferSize(void)
1311:.\Generated_Source\PSoC5/Pump_AL.c ****                                                             
1312:.\Generated_Source\PSoC5/Pump_AL.c ****     {
 1487              		.loc 1 1312 0
 1488              		.cfi_startproc
 1489              		@ args = 0, pretend = 0, frame = 8
 1490              		@ frame_needed = 1, uses_anonymous_args = 0
 1491              		@ link register save eliminated.
 1492 0000 80B4     		push	{r7}
 1493              		.cfi_def_cfa_offset 4
 1494              		.cfi_offset 7, -4
 1495 0002 83B0     		sub	sp, sp, #12
 1496              		.cfi_def_cfa_offset 16
 1497 0004 00AF     		add	r7, sp, #0
 1498              		.cfi_def_cfa_register 7
1313:.\Generated_Source\PSoC5/Pump_AL.c ****         uint8 size;
1314:.\Generated_Source\PSoC5/Pump_AL.c **** 
1315:.\Generated_Source\PSoC5/Pump_AL.c ****         #if(Pump_AL_TXBUFFERSIZE > Pump_AL_FIFO_LENGTH)
1316:.\Generated_Source\PSoC5/Pump_AL.c **** 
1317:.\Generated_Source\PSoC5/Pump_AL.c ****             /* Disable Tx interrupt. */
1318:.\Generated_Source\PSoC5/Pump_AL.c ****             /* Protect variables that could change on interrupt. */
1319:.\Generated_Source\PSoC5/Pump_AL.c ****             #if(Pump_AL_TX_INTERRUPT_ENABLED)
1320:.\Generated_Source\PSoC5/Pump_AL.c ****                 Pump_AL_DisableTxInt();
1321:.\Generated_Source\PSoC5/Pump_AL.c ****             #endif /* End Pump_AL_TX_INTERRUPT_ENABLED */
1322:.\Generated_Source\PSoC5/Pump_AL.c **** 
1323:.\Generated_Source\PSoC5/Pump_AL.c ****             if(Pump_AL_txBufferRead == Pump_AL_txBufferWrite)
1324:.\Generated_Source\PSoC5/Pump_AL.c ****             {
1325:.\Generated_Source\PSoC5/Pump_AL.c ****                 size = 0u;
1326:.\Generated_Source\PSoC5/Pump_AL.c ****             }
1327:.\Generated_Source\PSoC5/Pump_AL.c ****             else if(Pump_AL_txBufferRead < Pump_AL_txBufferWrite)
1328:.\Generated_Source\PSoC5/Pump_AL.c ****             {
1329:.\Generated_Source\PSoC5/Pump_AL.c ****                 size = (Pump_AL_txBufferWrite - Pump_AL_txBufferRead);
1330:.\Generated_Source\PSoC5/Pump_AL.c ****             }
1331:.\Generated_Source\PSoC5/Pump_AL.c ****             else
1332:.\Generated_Source\PSoC5/Pump_AL.c ****             {
1333:.\Generated_Source\PSoC5/Pump_AL.c ****                 size = (Pump_AL_TXBUFFERSIZE - Pump_AL_txBufferRead) + Pump_AL_txBufferWrite;
1334:.\Generated_Source\PSoC5/Pump_AL.c ****             }
1335:.\Generated_Source\PSoC5/Pump_AL.c **** 
1336:.\Generated_Source\PSoC5/Pump_AL.c ****             /* Enable Tx interrupt. */
1337:.\Generated_Source\PSoC5/Pump_AL.c ****             #if(Pump_AL_TX_INTERRUPT_ENABLED)
1338:.\Generated_Source\PSoC5/Pump_AL.c ****                 Pump_AL_EnableTxInt();
1339:.\Generated_Source\PSoC5/Pump_AL.c ****             #endif /* End Pump_AL_TX_INTERRUPT_ENABLED */
1340:.\Generated_Source\PSoC5/Pump_AL.c **** 
1341:.\Generated_Source\PSoC5/Pump_AL.c ****         #else /* Pump_AL_TXBUFFERSIZE > Pump_AL_FIFO_LENGTH */
1342:.\Generated_Source\PSoC5/Pump_AL.c **** 
1343:.\Generated_Source\PSoC5/Pump_AL.c ****             size = Pump_AL_TXSTATUS_REG;
 1499              		.loc 1 1343 0
 1500 0006 0E4B     		ldr	r3, .L105
 1501 0008 1B78     		ldrb	r3, [r3]
 1502 000a FB71     		strb	r3, [r7, #7]
1344:.\Generated_Source\PSoC5/Pump_AL.c **** 
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 51


1345:.\Generated_Source\PSoC5/Pump_AL.c ****             /* Is the fifo is full. */
1346:.\Generated_Source\PSoC5/Pump_AL.c ****             if((size & Pump_AL_TX_STS_FIFO_FULL) != 0u)
 1503              		.loc 1 1346 0
 1504 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1505 000e 03F00403 		and	r3, r3, #4
 1506 0012 002B     		cmp	r3, #0
 1507 0014 02D0     		beq	.L101
1347:.\Generated_Source\PSoC5/Pump_AL.c ****             {
1348:.\Generated_Source\PSoC5/Pump_AL.c ****                 size = Pump_AL_FIFO_LENGTH;
 1508              		.loc 1 1348 0
 1509 0016 0423     		movs	r3, #4
 1510 0018 FB71     		strb	r3, [r7, #7]
 1511 001a 09E0     		b	.L102
 1512              	.L101:
1349:.\Generated_Source\PSoC5/Pump_AL.c ****             }
1350:.\Generated_Source\PSoC5/Pump_AL.c ****             else if((size & Pump_AL_TX_STS_FIFO_EMPTY) != 0u)
 1513              		.loc 1 1350 0
 1514 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1515 001e 03F00203 		and	r3, r3, #2
 1516 0022 002B     		cmp	r3, #0
 1517 0024 02D0     		beq	.L103
1351:.\Generated_Source\PSoC5/Pump_AL.c ****             {
1352:.\Generated_Source\PSoC5/Pump_AL.c ****                 size = 0u;
 1518              		.loc 1 1352 0
 1519 0026 0023     		movs	r3, #0
 1520 0028 FB71     		strb	r3, [r7, #7]
 1521 002a 01E0     		b	.L102
 1522              	.L103:
1353:.\Generated_Source\PSoC5/Pump_AL.c ****             }
1354:.\Generated_Source\PSoC5/Pump_AL.c ****             else
1355:.\Generated_Source\PSoC5/Pump_AL.c ****             {
1356:.\Generated_Source\PSoC5/Pump_AL.c ****                 /* We only know there is data in the fifo. */
1357:.\Generated_Source\PSoC5/Pump_AL.c ****                 size = 1u;
 1523              		.loc 1 1357 0
 1524 002c 0123     		movs	r3, #1
 1525 002e FB71     		strb	r3, [r7, #7]
 1526              	.L102:
1358:.\Generated_Source\PSoC5/Pump_AL.c ****             }
1359:.\Generated_Source\PSoC5/Pump_AL.c **** 
1360:.\Generated_Source\PSoC5/Pump_AL.c ****         #endif /* End Pump_AL_TXBUFFERSIZE > Pump_AL_FIFO_LENGTH */
1361:.\Generated_Source\PSoC5/Pump_AL.c **** 
1362:.\Generated_Source\PSoC5/Pump_AL.c ****         return(size);
 1527              		.loc 1 1362 0
 1528 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1363:.\Generated_Source\PSoC5/Pump_AL.c ****     }
 1529              		.loc 1 1363 0
 1530 0032 1846     		mov	r0, r3
 1531 0034 0C37     		adds	r7, r7, #12
 1532              		.cfi_def_cfa_offset 4
 1533 0036 BD46     		mov	sp, r7
 1534              		.cfi_def_cfa_register 13
 1535              		@ sp needed
 1536 0038 5DF8047B 		ldr	r7, [sp], #4
 1537              		.cfi_restore 7
 1538              		.cfi_def_cfa_offset 0
 1539 003c 7047     		bx	lr
 1540              	.L106:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 52


 1541 003e 00BF     		.align	2
 1542              	.L105:
 1543 0040 6A650040 		.word	1073767786
 1544              		.cfi_endproc
 1545              	.LFE25:
 1546              		.size	Pump_AL_GetTxBufferSize, .-Pump_AL_GetTxBufferSize
 1547              		.section	.text.Pump_AL_ClearTxBuffer,"ax",%progbits
 1548              		.align	2
 1549              		.global	Pump_AL_ClearTxBuffer
 1550              		.thumb
 1551              		.thumb_func
 1552              		.type	Pump_AL_ClearTxBuffer, %function
 1553              	Pump_AL_ClearTxBuffer:
 1554              	.LFB26:
1364:.\Generated_Source\PSoC5/Pump_AL.c **** 
1365:.\Generated_Source\PSoC5/Pump_AL.c **** 
1366:.\Generated_Source\PSoC5/Pump_AL.c ****     /*******************************************************************************
1367:.\Generated_Source\PSoC5/Pump_AL.c ****     * Function Name: Pump_AL_ClearTxBuffer
1368:.\Generated_Source\PSoC5/Pump_AL.c ****     ********************************************************************************
1369:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1370:.\Generated_Source\PSoC5/Pump_AL.c ****     * Summary:
1371:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Clears the TX RAM buffer by setting the read and write pointers both to zero.
1372:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Clears the hardware TX FIFO.  Any data present in the FIFO will not be sent.
1373:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1374:.\Generated_Source\PSoC5/Pump_AL.c ****     * Parameters:
1375:.\Generated_Source\PSoC5/Pump_AL.c ****     *  None.
1376:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1377:.\Generated_Source\PSoC5/Pump_AL.c ****     * Return:
1378:.\Generated_Source\PSoC5/Pump_AL.c ****     *  None.
1379:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1380:.\Generated_Source\PSoC5/Pump_AL.c ****     * Global Variables:
1381:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_txBufferWrite - cleared to zero.
1382:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_txBufferRead - cleared to zero.
1383:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1384:.\Generated_Source\PSoC5/Pump_AL.c ****     * Reentrant:
1385:.\Generated_Source\PSoC5/Pump_AL.c ****     *  No.
1386:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1387:.\Generated_Source\PSoC5/Pump_AL.c ****     * Theory:
1388:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Setting the pointers to zero makes the system believe there is no data to
1389:.\Generated_Source\PSoC5/Pump_AL.c ****     *  read and writing will resume at address 0 overwriting any data that may have
1390:.\Generated_Source\PSoC5/Pump_AL.c ****     *  remained in the RAM.
1391:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1392:.\Generated_Source\PSoC5/Pump_AL.c ****     * Side Effects:
1393:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Any received data not read from the RAM buffer will be lost when overwritten.
1394:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1395:.\Generated_Source\PSoC5/Pump_AL.c ****     *******************************************************************************/
1396:.\Generated_Source\PSoC5/Pump_AL.c ****     void Pump_AL_ClearTxBuffer(void) 
1397:.\Generated_Source\PSoC5/Pump_AL.c ****     {
 1555              		.loc 1 1397 0
 1556              		.cfi_startproc
 1557              		@ args = 0, pretend = 0, frame = 8
 1558              		@ frame_needed = 1, uses_anonymous_args = 0
 1559 0000 80B5     		push	{r7, lr}
 1560              		.cfi_def_cfa_offset 8
 1561              		.cfi_offset 7, -8
 1562              		.cfi_offset 14, -4
 1563 0002 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 53


 1564              		.cfi_def_cfa_offset 16
 1565 0004 00AF     		add	r7, sp, #0
 1566              		.cfi_def_cfa_register 7
1398:.\Generated_Source\PSoC5/Pump_AL.c ****         uint8 enableInterrupts;
1399:.\Generated_Source\PSoC5/Pump_AL.c **** 
1400:.\Generated_Source\PSoC5/Pump_AL.c ****         /* Enter critical section */
1401:.\Generated_Source\PSoC5/Pump_AL.c ****         enableInterrupts = CyEnterCriticalSection();
 1567              		.loc 1 1401 0
 1568 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 1569 000a 0346     		mov	r3, r0
 1570 000c FB71     		strb	r3, [r7, #7]
1402:.\Generated_Source\PSoC5/Pump_AL.c ****         /* clear the HW FIFO */
1403:.\Generated_Source\PSoC5/Pump_AL.c ****         Pump_AL_TXDATA_AUX_CTL_REG |=  Pump_AL_TX_FIFO_CLR;
 1571              		.loc 1 1403 0
 1572 000e 0B4A     		ldr	r2, .L108
 1573 0010 0A4B     		ldr	r3, .L108
 1574 0012 1B78     		ldrb	r3, [r3]
 1575 0014 DBB2     		uxtb	r3, r3
 1576 0016 43F00103 		orr	r3, r3, #1
 1577 001a DBB2     		uxtb	r3, r3
 1578 001c 1370     		strb	r3, [r2]
1404:.\Generated_Source\PSoC5/Pump_AL.c ****         Pump_AL_TXDATA_AUX_CTL_REG &= (uint8)~Pump_AL_TX_FIFO_CLR;
 1579              		.loc 1 1404 0
 1580 001e 074A     		ldr	r2, .L108
 1581 0020 064B     		ldr	r3, .L108
 1582 0022 1B78     		ldrb	r3, [r3]
 1583 0024 DBB2     		uxtb	r3, r3
 1584 0026 23F00103 		bic	r3, r3, #1
 1585 002a DBB2     		uxtb	r3, r3
 1586 002c 1370     		strb	r3, [r2]
1405:.\Generated_Source\PSoC5/Pump_AL.c ****         /* Exit critical section */
1406:.\Generated_Source\PSoC5/Pump_AL.c ****         CyExitCriticalSection(enableInterrupts);
 1587              		.loc 1 1406 0
 1588 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1589 0030 1846     		mov	r0, r3
 1590 0032 FFF7FEFF 		bl	CyExitCriticalSection
1407:.\Generated_Source\PSoC5/Pump_AL.c **** 
1408:.\Generated_Source\PSoC5/Pump_AL.c ****         #if(Pump_AL_TXBUFFERSIZE > Pump_AL_FIFO_LENGTH)
1409:.\Generated_Source\PSoC5/Pump_AL.c **** 
1410:.\Generated_Source\PSoC5/Pump_AL.c ****             /* Disable Tx interrupt. */
1411:.\Generated_Source\PSoC5/Pump_AL.c ****             /* Protect variables that could change on interrupt. */
1412:.\Generated_Source\PSoC5/Pump_AL.c ****             #if(Pump_AL_TX_INTERRUPT_ENABLED)
1413:.\Generated_Source\PSoC5/Pump_AL.c ****                 Pump_AL_DisableTxInt();
1414:.\Generated_Source\PSoC5/Pump_AL.c ****             #endif /* End Pump_AL_TX_INTERRUPT_ENABLED */
1415:.\Generated_Source\PSoC5/Pump_AL.c **** 
1416:.\Generated_Source\PSoC5/Pump_AL.c ****             Pump_AL_txBufferRead = 0u;
1417:.\Generated_Source\PSoC5/Pump_AL.c ****             Pump_AL_txBufferWrite = 0u;
1418:.\Generated_Source\PSoC5/Pump_AL.c **** 
1419:.\Generated_Source\PSoC5/Pump_AL.c ****             /* Enable Tx interrupt. */
1420:.\Generated_Source\PSoC5/Pump_AL.c ****             #if(Pump_AL_TX_INTERRUPT_ENABLED)
1421:.\Generated_Source\PSoC5/Pump_AL.c ****                 Pump_AL_EnableTxInt();
1422:.\Generated_Source\PSoC5/Pump_AL.c ****             #endif /* End Pump_AL_TX_INTERRUPT_ENABLED */
1423:.\Generated_Source\PSoC5/Pump_AL.c **** 
1424:.\Generated_Source\PSoC5/Pump_AL.c ****         #endif /* End Pump_AL_TXBUFFERSIZE > Pump_AL_FIFO_LENGTH */
1425:.\Generated_Source\PSoC5/Pump_AL.c ****     }
 1591              		.loc 1 1425 0
 1592 0036 0837     		adds	r7, r7, #8
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 54


 1593              		.cfi_def_cfa_offset 8
 1594 0038 BD46     		mov	sp, r7
 1595              		.cfi_def_cfa_register 13
 1596              		@ sp needed
 1597 003a 80BD     		pop	{r7, pc}
 1598              	.L109:
 1599              		.align	2
 1600              	.L108:
 1601 003c 9A650040 		.word	1073767834
 1602              		.cfi_endproc
 1603              	.LFE26:
 1604              		.size	Pump_AL_ClearTxBuffer, .-Pump_AL_ClearTxBuffer
 1605              		.section	.text.Pump_AL_SendBreak,"ax",%progbits
 1606              		.align	2
 1607              		.global	Pump_AL_SendBreak
 1608              		.thumb
 1609              		.thumb_func
 1610              		.type	Pump_AL_SendBreak, %function
 1611              	Pump_AL_SendBreak:
 1612              	.LFB27:
1426:.\Generated_Source\PSoC5/Pump_AL.c **** 
1427:.\Generated_Source\PSoC5/Pump_AL.c **** 
1428:.\Generated_Source\PSoC5/Pump_AL.c ****     /*******************************************************************************
1429:.\Generated_Source\PSoC5/Pump_AL.c ****     * Function Name: Pump_AL_SendBreak
1430:.\Generated_Source\PSoC5/Pump_AL.c ****     ********************************************************************************
1431:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1432:.\Generated_Source\PSoC5/Pump_AL.c ****     * Summary:
1433:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Write a Break command to the UART
1434:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1435:.\Generated_Source\PSoC5/Pump_AL.c ****     * Parameters:
1436:.\Generated_Source\PSoC5/Pump_AL.c ****     *  uint8 retMode:  Wait mode,
1437:.\Generated_Source\PSoC5/Pump_AL.c ****     *   0 - Initialize registers for Break, sends the Break signal and return
1438:.\Generated_Source\PSoC5/Pump_AL.c ****     *       imediately.
1439:.\Generated_Source\PSoC5/Pump_AL.c ****     *   1 - Wait until Break sending is complete, reinitialize registers to normal
1440:.\Generated_Source\PSoC5/Pump_AL.c ****     *       transmission mode then return.
1441:.\Generated_Source\PSoC5/Pump_AL.c ****     *   2 - Reinitialize registers to normal transmission mode then return.
1442:.\Generated_Source\PSoC5/Pump_AL.c ****     *   3 - both steps: 0 and 1
1443:.\Generated_Source\PSoC5/Pump_AL.c ****     *       init registers for Break, send Break signal
1444:.\Generated_Source\PSoC5/Pump_AL.c ****     *       wait until Break sending is complete, reinit registers to normal
1445:.\Generated_Source\PSoC5/Pump_AL.c ****     *       transmission mode then return.
1446:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1447:.\Generated_Source\PSoC5/Pump_AL.c ****     * Return:
1448:.\Generated_Source\PSoC5/Pump_AL.c ****     *  None.
1449:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1450:.\Generated_Source\PSoC5/Pump_AL.c ****     * Global Variables:
1451:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Pump_AL_initVar - checked to identify that the component has been
1452:.\Generated_Source\PSoC5/Pump_AL.c ****     *     initialized.
1453:.\Generated_Source\PSoC5/Pump_AL.c ****     *  tx_period - static variable, used for keeping TX period configuration.
1454:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1455:.\Generated_Source\PSoC5/Pump_AL.c ****     * Reentrant:
1456:.\Generated_Source\PSoC5/Pump_AL.c ****     *  No.
1457:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1458:.\Generated_Source\PSoC5/Pump_AL.c ****     * Theory:
1459:.\Generated_Source\PSoC5/Pump_AL.c ****     *  SendBreak function initializes registers to send 13-bit break signal. It is
1460:.\Generated_Source\PSoC5/Pump_AL.c ****     *  important to return the registers configuration to normal for continue 8-bit
1461:.\Generated_Source\PSoC5/Pump_AL.c ****     *  operation.
1462:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Trere are 3 variants for this API usage:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 55


1463:.\Generated_Source\PSoC5/Pump_AL.c ****     *  1) SendBreak(3) - function will send the Break signal and take care on the
1464:.\Generated_Source\PSoC5/Pump_AL.c ****     *     configuration returning. Funcition will block CPU untill transmition
1465:.\Generated_Source\PSoC5/Pump_AL.c ****     *     complete.
1466:.\Generated_Source\PSoC5/Pump_AL.c ****     *  2) User may want to use bloking time if UART configured to the low speed
1467:.\Generated_Source\PSoC5/Pump_AL.c ****     *     operation
1468:.\Generated_Source\PSoC5/Pump_AL.c ****     *     Emample for this case:
1469:.\Generated_Source\PSoC5/Pump_AL.c ****     *     SendBreak(0);     - init Break signal transmition
1470:.\Generated_Source\PSoC5/Pump_AL.c ****     *         Add your code here to use CPU time
1471:.\Generated_Source\PSoC5/Pump_AL.c ****     *     SendBreak(1);     - complete Break operation
1472:.\Generated_Source\PSoC5/Pump_AL.c ****     *  3) Same to 2) but user may want to init and use the interrupt for complete
1473:.\Generated_Source\PSoC5/Pump_AL.c ****     *     break operation.
1474:.\Generated_Source\PSoC5/Pump_AL.c ****     *     Example for this case:
1475:.\Generated_Source\PSoC5/Pump_AL.c ****     *     Init TX interrupt whith "TX - On TX Complete" parameter
1476:.\Generated_Source\PSoC5/Pump_AL.c ****     *     SendBreak(0);     - init Break signal transmition
1477:.\Generated_Source\PSoC5/Pump_AL.c ****     *         Add your code here to use CPU time
1478:.\Generated_Source\PSoC5/Pump_AL.c ****     *     When interrupt appear with UART_TX_STS_COMPLETE status:
1479:.\Generated_Source\PSoC5/Pump_AL.c ****     *     SendBreak(2);     - complete Break operation
1480:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1481:.\Generated_Source\PSoC5/Pump_AL.c ****     * Side Effects:
1482:.\Generated_Source\PSoC5/Pump_AL.c ****     *   Uses static variable to keep registers configuration.
1483:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1484:.\Generated_Source\PSoC5/Pump_AL.c ****     *******************************************************************************/
1485:.\Generated_Source\PSoC5/Pump_AL.c ****     void Pump_AL_SendBreak(uint8 retMode) 
1486:.\Generated_Source\PSoC5/Pump_AL.c ****     {
 1613              		.loc 1 1486 0
 1614              		.cfi_startproc
 1615              		@ args = 0, pretend = 0, frame = 16
 1616              		@ frame_needed = 1, uses_anonymous_args = 0
 1617 0000 80B5     		push	{r7, lr}
 1618              		.cfi_def_cfa_offset 8
 1619              		.cfi_offset 7, -8
 1620              		.cfi_offset 14, -4
 1621 0002 84B0     		sub	sp, sp, #16
 1622              		.cfi_def_cfa_offset 24
 1623 0004 00AF     		add	r7, sp, #0
 1624              		.cfi_def_cfa_register 7
 1625 0006 0346     		mov	r3, r0
 1626 0008 FB71     		strb	r3, [r7, #7]
1487:.\Generated_Source\PSoC5/Pump_AL.c **** 
1488:.\Generated_Source\PSoC5/Pump_AL.c ****         /* If not Initialized then skip this function*/
1489:.\Generated_Source\PSoC5/Pump_AL.c ****         if(Pump_AL_initVar != 0u)
 1627              		.loc 1 1489 0
 1628 000a 274B     		ldr	r3, .L118
 1629 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1630 000e 002B     		cmp	r3, #0
 1631 0010 47D0     		beq	.L110
 1632              	.LBB2:
1490:.\Generated_Source\PSoC5/Pump_AL.c ****         {
1491:.\Generated_Source\PSoC5/Pump_AL.c ****             /*Set the Counter to 13-bits and transmit a 00 byte*/
1492:.\Generated_Source\PSoC5/Pump_AL.c ****             /*When that is done then reset the counter value back*/
1493:.\Generated_Source\PSoC5/Pump_AL.c ****             uint8 tmpStat;
1494:.\Generated_Source\PSoC5/Pump_AL.c **** 
1495:.\Generated_Source\PSoC5/Pump_AL.c ****             #if(Pump_AL_HD_ENABLED) /* Half Duplex mode*/
1496:.\Generated_Source\PSoC5/Pump_AL.c **** 
1497:.\Generated_Source\PSoC5/Pump_AL.c ****                 if( (retMode == Pump_AL_SEND_BREAK) ||
1498:.\Generated_Source\PSoC5/Pump_AL.c ****                     (retMode == Pump_AL_SEND_WAIT_REINIT ) )
1499:.\Generated_Source\PSoC5/Pump_AL.c ****                 {
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 56


1500:.\Generated_Source\PSoC5/Pump_AL.c ****                     /* CTRL_HD_SEND_BREAK - sends break bits in HD mode*/
1501:.\Generated_Source\PSoC5/Pump_AL.c ****                     Pump_AL_WriteControlRegister(Pump_AL_ReadControlRegister() |
1502:.\Generated_Source\PSoC5/Pump_AL.c ****                                                           Pump_AL_CTRL_HD_SEND_BREAK);
1503:.\Generated_Source\PSoC5/Pump_AL.c ****                     /* Send zeros*/
1504:.\Generated_Source\PSoC5/Pump_AL.c ****                     Pump_AL_TXDATA_REG = 0u;
1505:.\Generated_Source\PSoC5/Pump_AL.c **** 
1506:.\Generated_Source\PSoC5/Pump_AL.c ****                     do /*wait until transmit starts*/
1507:.\Generated_Source\PSoC5/Pump_AL.c ****                     {
1508:.\Generated_Source\PSoC5/Pump_AL.c ****                         tmpStat = Pump_AL_TXSTATUS_REG;
1509:.\Generated_Source\PSoC5/Pump_AL.c ****                     }while((tmpStat & Pump_AL_TX_STS_FIFO_EMPTY) != 0u);
1510:.\Generated_Source\PSoC5/Pump_AL.c ****                 }
1511:.\Generated_Source\PSoC5/Pump_AL.c **** 
1512:.\Generated_Source\PSoC5/Pump_AL.c ****                 if( (retMode == Pump_AL_WAIT_FOR_COMPLETE_REINIT) ||
1513:.\Generated_Source\PSoC5/Pump_AL.c ****                     (retMode == Pump_AL_SEND_WAIT_REINIT) )
1514:.\Generated_Source\PSoC5/Pump_AL.c ****                 {
1515:.\Generated_Source\PSoC5/Pump_AL.c ****                     do /*wait until transmit complete*/
1516:.\Generated_Source\PSoC5/Pump_AL.c ****                     {
1517:.\Generated_Source\PSoC5/Pump_AL.c ****                         tmpStat = Pump_AL_TXSTATUS_REG;
1518:.\Generated_Source\PSoC5/Pump_AL.c ****                     }while(((uint8)~tmpStat & Pump_AL_TX_STS_COMPLETE) != 0u);
1519:.\Generated_Source\PSoC5/Pump_AL.c ****                 }
1520:.\Generated_Source\PSoC5/Pump_AL.c **** 
1521:.\Generated_Source\PSoC5/Pump_AL.c ****                 if( (retMode == Pump_AL_WAIT_FOR_COMPLETE_REINIT) ||
1522:.\Generated_Source\PSoC5/Pump_AL.c ****                     (retMode == Pump_AL_REINIT) ||
1523:.\Generated_Source\PSoC5/Pump_AL.c ****                     (retMode == Pump_AL_SEND_WAIT_REINIT) )
1524:.\Generated_Source\PSoC5/Pump_AL.c ****                 {
1525:.\Generated_Source\PSoC5/Pump_AL.c ****                     Pump_AL_WriteControlRegister(Pump_AL_ReadControlRegister() &
1526:.\Generated_Source\PSoC5/Pump_AL.c ****                                                   (uint8)~Pump_AL_CTRL_HD_SEND_BREAK);
1527:.\Generated_Source\PSoC5/Pump_AL.c ****                 }
1528:.\Generated_Source\PSoC5/Pump_AL.c **** 
1529:.\Generated_Source\PSoC5/Pump_AL.c ****             #else /* Pump_AL_HD_ENABLED Full Duplex mode */
1530:.\Generated_Source\PSoC5/Pump_AL.c **** 
1531:.\Generated_Source\PSoC5/Pump_AL.c ****                 static uint8 tx_period;
1532:.\Generated_Source\PSoC5/Pump_AL.c **** 
1533:.\Generated_Source\PSoC5/Pump_AL.c ****                 if( (retMode == Pump_AL_SEND_BREAK) ||
 1633              		.loc 1 1533 0
 1634 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1635 0014 002B     		cmp	r3, #0
 1636 0016 02D0     		beq	.L112
 1637              		.loc 1 1533 0 is_stmt 0 discriminator 1
 1638 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1639 001a 032B     		cmp	r3, #3
 1640 001c 1BD1     		bne	.L113
 1641              	.L112:
1534:.\Generated_Source\PSoC5/Pump_AL.c ****                     (retMode == Pump_AL_SEND_WAIT_REINIT) )
1535:.\Generated_Source\PSoC5/Pump_AL.c ****                 {
1536:.\Generated_Source\PSoC5/Pump_AL.c ****                     /* CTRL_HD_SEND_BREAK - skip to send parity bit at Break signal in Full Duplex 
1537:.\Generated_Source\PSoC5/Pump_AL.c ****                     #if( (Pump_AL_PARITY_TYPE != Pump_AL__B_UART__NONE_REVB) || \
1538:.\Generated_Source\PSoC5/Pump_AL.c ****                                         (Pump_AL_PARITY_TYPE_SW != 0u) )
1539:.\Generated_Source\PSoC5/Pump_AL.c ****                         Pump_AL_WriteControlRegister(Pump_AL_ReadControlRegister() |
 1642              		.loc 1 1539 0 is_stmt 1
 1643 001e FFF7FEFF 		bl	Pump_AL_ReadControlRegister
 1644 0022 0346     		mov	r3, r0
 1645 0024 43F00203 		orr	r3, r3, #2
 1646 0028 DBB2     		uxtb	r3, r3
 1647 002a 1846     		mov	r0, r3
 1648 002c FFF7FEFF 		bl	Pump_AL_WriteControlRegister
1540:.\Generated_Source\PSoC5/Pump_AL.c ****                                                               Pump_AL_CTRL_HD_SEND_BREAK);
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 57


1541:.\Generated_Source\PSoC5/Pump_AL.c ****                     #endif /* End Pump_AL_PARITY_TYPE != Pump_AL__B_UART__NONE_REVB  */
1542:.\Generated_Source\PSoC5/Pump_AL.c **** 
1543:.\Generated_Source\PSoC5/Pump_AL.c ****                     #if(Pump_AL_TXCLKGEN_DP)
1544:.\Generated_Source\PSoC5/Pump_AL.c ****                         tx_period = Pump_AL_TXBITCLKTX_COMPLETE_REG;
 1649              		.loc 1 1544 0
 1650 0030 1E4B     		ldr	r3, .L118+4
 1651 0032 1B78     		ldrb	r3, [r3]
 1652 0034 DAB2     		uxtb	r2, r3
 1653 0036 1E4B     		ldr	r3, .L118+8
 1654 0038 1A70     		strb	r2, [r3]
1545:.\Generated_Source\PSoC5/Pump_AL.c ****                         Pump_AL_TXBITCLKTX_COMPLETE_REG = Pump_AL_TXBITCTR_BREAKBITS;
 1655              		.loc 1 1545 0
 1656 003a 1C4B     		ldr	r3, .L118+4
 1657 003c 6722     		movs	r2, #103
 1658 003e 1A70     		strb	r2, [r3]
1546:.\Generated_Source\PSoC5/Pump_AL.c ****                     #else
1547:.\Generated_Source\PSoC5/Pump_AL.c ****                         tx_period = Pump_AL_TXBITCTR_PERIOD_REG;
1548:.\Generated_Source\PSoC5/Pump_AL.c ****                         Pump_AL_TXBITCTR_PERIOD_REG = Pump_AL_TXBITCTR_BREAKBITS8X;
1549:.\Generated_Source\PSoC5/Pump_AL.c ****                     #endif /* End Pump_AL_TXCLKGEN_DP */
1550:.\Generated_Source\PSoC5/Pump_AL.c **** 
1551:.\Generated_Source\PSoC5/Pump_AL.c ****                     /* Send zeros*/
1552:.\Generated_Source\PSoC5/Pump_AL.c ****                     Pump_AL_TXDATA_REG = 0u;
 1659              		.loc 1 1552 0
 1660 0040 1C4B     		ldr	r3, .L118+12
 1661 0042 0022     		movs	r2, #0
 1662 0044 1A70     		strb	r2, [r3]
 1663              	.L114:
1553:.\Generated_Source\PSoC5/Pump_AL.c **** 
1554:.\Generated_Source\PSoC5/Pump_AL.c ****                     do /* wait until transmit starts */
1555:.\Generated_Source\PSoC5/Pump_AL.c ****                     {
1556:.\Generated_Source\PSoC5/Pump_AL.c ****                         tmpStat = Pump_AL_TXSTATUS_REG;
 1664              		.loc 1 1556 0 discriminator 1
 1665 0046 1C4B     		ldr	r3, .L118+16
 1666 0048 1B78     		ldrb	r3, [r3]
 1667 004a FB73     		strb	r3, [r7, #15]
1557:.\Generated_Source\PSoC5/Pump_AL.c ****                     }while((tmpStat & Pump_AL_TX_STS_FIFO_EMPTY) != 0u);
 1668              		.loc 1 1557 0 discriminator 1
 1669 004c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1670 004e 03F00203 		and	r3, r3, #2
 1671 0052 002B     		cmp	r3, #0
 1672 0054 F7D1     		bne	.L114
 1673              	.L113:
1558:.\Generated_Source\PSoC5/Pump_AL.c ****                 }
1559:.\Generated_Source\PSoC5/Pump_AL.c **** 
1560:.\Generated_Source\PSoC5/Pump_AL.c ****                 if( (retMode == Pump_AL_WAIT_FOR_COMPLETE_REINIT) ||
 1674              		.loc 1 1560 0
 1675 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1676 0058 012B     		cmp	r3, #1
 1677 005a 02D0     		beq	.L115
 1678              		.loc 1 1560 0 is_stmt 0 discriminator 1
 1679 005c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1680 005e 032B     		cmp	r3, #3
 1681 0060 09D1     		bne	.L116
 1682              	.L115:
1561:.\Generated_Source\PSoC5/Pump_AL.c ****                     (retMode == Pump_AL_SEND_WAIT_REINIT) )
1562:.\Generated_Source\PSoC5/Pump_AL.c ****                 {
1563:.\Generated_Source\PSoC5/Pump_AL.c ****                     do /*wait until transmit complete*/
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 58


1564:.\Generated_Source\PSoC5/Pump_AL.c ****                     {
1565:.\Generated_Source\PSoC5/Pump_AL.c ****                         tmpStat = Pump_AL_TXSTATUS_REG;
 1683              		.loc 1 1565 0 is_stmt 1 discriminator 1
 1684 0062 154B     		ldr	r3, .L118+16
 1685 0064 1B78     		ldrb	r3, [r3]
 1686 0066 FB73     		strb	r3, [r7, #15]
1566:.\Generated_Source\PSoC5/Pump_AL.c ****                     }while(((uint8)~tmpStat & Pump_AL_TX_STS_COMPLETE) != 0u);
 1687              		.loc 1 1566 0 discriminator 1
 1688 0068 FB7B     		ldrb	r3, [r7, #15]
 1689 006a DB43     		mvns	r3, r3
 1690 006c DBB2     		uxtb	r3, r3
 1691 006e 03F00103 		and	r3, r3, #1
 1692 0072 002B     		cmp	r3, #0
 1693 0074 F5D1     		bne	.L115
 1694              	.L116:
1567:.\Generated_Source\PSoC5/Pump_AL.c ****                 }
1568:.\Generated_Source\PSoC5/Pump_AL.c **** 
1569:.\Generated_Source\PSoC5/Pump_AL.c ****                 if( (retMode == Pump_AL_WAIT_FOR_COMPLETE_REINIT) ||
 1695              		.loc 1 1569 0
 1696 0076 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1697 0078 012B     		cmp	r3, #1
 1698 007a 05D0     		beq	.L117
 1699              		.loc 1 1569 0 is_stmt 0 discriminator 1
 1700 007c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1701 007e 022B     		cmp	r3, #2
 1702 0080 02D0     		beq	.L117
1570:.\Generated_Source\PSoC5/Pump_AL.c ****                     (retMode == Pump_AL_REINIT) ||
 1703              		.loc 1 1570 0 is_stmt 1
 1704 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1705 0084 032B     		cmp	r3, #3
 1706 0086 0CD1     		bne	.L110
 1707              	.L117:
1571:.\Generated_Source\PSoC5/Pump_AL.c ****                     (retMode == Pump_AL_SEND_WAIT_REINIT) )
1572:.\Generated_Source\PSoC5/Pump_AL.c ****                 {
1573:.\Generated_Source\PSoC5/Pump_AL.c **** 
1574:.\Generated_Source\PSoC5/Pump_AL.c ****                     #if(Pump_AL_TXCLKGEN_DP)
1575:.\Generated_Source\PSoC5/Pump_AL.c ****                         Pump_AL_TXBITCLKTX_COMPLETE_REG = tx_period;
 1708              		.loc 1 1575 0
 1709 0088 084B     		ldr	r3, .L118+4
 1710 008a 094A     		ldr	r2, .L118+8
 1711 008c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1712 008e 1A70     		strb	r2, [r3]
1576:.\Generated_Source\PSoC5/Pump_AL.c ****                     #else
1577:.\Generated_Source\PSoC5/Pump_AL.c ****                         Pump_AL_TXBITCTR_PERIOD_REG = tx_period;
1578:.\Generated_Source\PSoC5/Pump_AL.c ****                     #endif /* End Pump_AL_TXCLKGEN_DP */
1579:.\Generated_Source\PSoC5/Pump_AL.c **** 
1580:.\Generated_Source\PSoC5/Pump_AL.c ****                     #if( (Pump_AL_PARITY_TYPE != Pump_AL__B_UART__NONE_REVB) || \
1581:.\Generated_Source\PSoC5/Pump_AL.c ****                          (Pump_AL_PARITY_TYPE_SW != 0u) )
1582:.\Generated_Source\PSoC5/Pump_AL.c ****                         Pump_AL_WriteControlRegister(Pump_AL_ReadControlRegister() &
 1713              		.loc 1 1582 0
 1714 0090 FFF7FEFF 		bl	Pump_AL_ReadControlRegister
 1715 0094 0346     		mov	r3, r0
 1716 0096 23F00203 		bic	r3, r3, #2
 1717 009a DBB2     		uxtb	r3, r3
 1718 009c 1846     		mov	r0, r3
 1719 009e FFF7FEFF 		bl	Pump_AL_WriteControlRegister
 1720              	.L110:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 59


 1721              	.LBE2:
1583:.\Generated_Source\PSoC5/Pump_AL.c ****                                                       (uint8)~Pump_AL_CTRL_HD_SEND_BREAK);
1584:.\Generated_Source\PSoC5/Pump_AL.c ****                     #endif /* End Pump_AL_PARITY_TYPE != NONE */
1585:.\Generated_Source\PSoC5/Pump_AL.c ****                 }
1586:.\Generated_Source\PSoC5/Pump_AL.c ****             #endif    /* End Pump_AL_HD_ENABLED */
1587:.\Generated_Source\PSoC5/Pump_AL.c ****         }
1588:.\Generated_Source\PSoC5/Pump_AL.c ****     }
 1722              		.loc 1 1588 0
 1723 00a2 1037     		adds	r7, r7, #16
 1724              		.cfi_def_cfa_offset 8
 1725 00a4 BD46     		mov	sp, r7
 1726              		.cfi_def_cfa_register 13
 1727              		@ sp needed
 1728 00a6 80BD     		pop	{r7, pc}
 1729              	.L119:
 1730              		.align	2
 1731              	.L118:
 1732 00a8 00000000 		.word	Pump_AL_initVar
 1733 00ac 38640040 		.word	1073767480
 1734 00b0 08000000 		.word	tx_period.4989
 1735 00b4 4A650040 		.word	1073767754
 1736 00b8 6A650040 		.word	1073767786
 1737              		.cfi_endproc
 1738              	.LFE27:
 1739              		.size	Pump_AL_SendBreak, .-Pump_AL_SendBreak
 1740              		.section	.text.Pump_AL_SetTxAddressMode,"ax",%progbits
 1741              		.align	2
 1742              		.global	Pump_AL_SetTxAddressMode
 1743              		.thumb
 1744              		.thumb_func
 1745              		.type	Pump_AL_SetTxAddressMode, %function
 1746              	Pump_AL_SetTxAddressMode:
 1747              	.LFB28:
1589:.\Generated_Source\PSoC5/Pump_AL.c **** 
1590:.\Generated_Source\PSoC5/Pump_AL.c **** 
1591:.\Generated_Source\PSoC5/Pump_AL.c ****     /*******************************************************************************
1592:.\Generated_Source\PSoC5/Pump_AL.c ****     * Function Name: Pump_AL_SetTxAddressMode
1593:.\Generated_Source\PSoC5/Pump_AL.c ****     ********************************************************************************
1594:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1595:.\Generated_Source\PSoC5/Pump_AL.c ****     * Summary:
1596:.\Generated_Source\PSoC5/Pump_AL.c ****     *  Set the transmit addressing mode
1597:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1598:.\Generated_Source\PSoC5/Pump_AL.c ****     * Parameters:
1599:.\Generated_Source\PSoC5/Pump_AL.c ****     *  addressMode: 0 -> Space
1600:.\Generated_Source\PSoC5/Pump_AL.c ****     *               1 -> Mark
1601:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1602:.\Generated_Source\PSoC5/Pump_AL.c ****     * Return:
1603:.\Generated_Source\PSoC5/Pump_AL.c ****     *  None.
1604:.\Generated_Source\PSoC5/Pump_AL.c ****     *
1605:.\Generated_Source\PSoC5/Pump_AL.c ****     *******************************************************************************/
1606:.\Generated_Source\PSoC5/Pump_AL.c ****     void Pump_AL_SetTxAddressMode(uint8 addressMode) 
1607:.\Generated_Source\PSoC5/Pump_AL.c ****     {
 1748              		.loc 1 1607 0
 1749              		.cfi_startproc
 1750              		@ args = 0, pretend = 0, frame = 8
 1751              		@ frame_needed = 1, uses_anonymous_args = 0
 1752              		@ link register save eliminated.
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 60


 1753 0000 80B4     		push	{r7}
 1754              		.cfi_def_cfa_offset 4
 1755              		.cfi_offset 7, -4
 1756 0002 83B0     		sub	sp, sp, #12
 1757              		.cfi_def_cfa_offset 16
 1758 0004 00AF     		add	r7, sp, #0
 1759              		.cfi_def_cfa_register 7
 1760 0006 0346     		mov	r3, r0
 1761 0008 FB71     		strb	r3, [r7, #7]
1608:.\Generated_Source\PSoC5/Pump_AL.c ****         /* Mark/Space sending enable*/
1609:.\Generated_Source\PSoC5/Pump_AL.c ****         if(addressMode != 0u)
1610:.\Generated_Source\PSoC5/Pump_AL.c ****         {
1611:.\Generated_Source\PSoC5/Pump_AL.c ****             #if( Pump_AL_CONTROL_REG_REMOVED == 0u )
1612:.\Generated_Source\PSoC5/Pump_AL.c ****                 Pump_AL_WriteControlRegister(Pump_AL_ReadControlRegister() |
1613:.\Generated_Source\PSoC5/Pump_AL.c ****                                                       Pump_AL_CTRL_MARK);
1614:.\Generated_Source\PSoC5/Pump_AL.c ****             #endif /* End Pump_AL_CONTROL_REG_REMOVED == 0u */
1615:.\Generated_Source\PSoC5/Pump_AL.c ****         }
1616:.\Generated_Source\PSoC5/Pump_AL.c ****         else
1617:.\Generated_Source\PSoC5/Pump_AL.c ****         {
1618:.\Generated_Source\PSoC5/Pump_AL.c ****             #if( Pump_AL_CONTROL_REG_REMOVED == 0u )
1619:.\Generated_Source\PSoC5/Pump_AL.c ****                 Pump_AL_WriteControlRegister(Pump_AL_ReadControlRegister() &
1620:.\Generated_Source\PSoC5/Pump_AL.c ****                                                     (uint8)~Pump_AL_CTRL_MARK);
1621:.\Generated_Source\PSoC5/Pump_AL.c ****             #endif /* End Pump_AL_CONTROL_REG_REMOVED == 0u */
1622:.\Generated_Source\PSoC5/Pump_AL.c ****         }
1623:.\Generated_Source\PSoC5/Pump_AL.c ****     }
 1762              		.loc 1 1623 0
 1763 000a 0C37     		adds	r7, r7, #12
 1764              		.cfi_def_cfa_offset 4
 1765 000c BD46     		mov	sp, r7
 1766              		.cfi_def_cfa_register 13
 1767              		@ sp needed
 1768 000e 5DF8047B 		ldr	r7, [sp], #4
 1769              		.cfi_restore 7
 1770              		.cfi_def_cfa_offset 0
 1771 0012 7047     		bx	lr
 1772              		.cfi_endproc
 1773              	.LFE28:
 1774              		.size	Pump_AL_SetTxAddressMode, .-Pump_AL_SetTxAddressMode
 1775              		.bss
 1776              	tx_period.4989:
 1777 0008 00       		.space	1
 1778 0009 00       		.text
 1779              	.Letext0:
 1780              		.file 2 ".\\Generated_Source\\PSoC5\\cytypes.h"
 1781              		.section	.debug_info,"",%progbits
 1782              	.Ldebug_info0:
 1783 0000 E7050000 		.4byte	0x5e7
 1784 0004 0400     		.2byte	0x4
 1785 0006 00000000 		.4byte	.Ldebug_abbrev0
 1786 000a 04       		.byte	0x4
 1787 000b 01       		.uleb128 0x1
 1788 000c DC020000 		.4byte	.LASF72
 1789 0010 01       		.byte	0x1
 1790 0011 8C030000 		.4byte	.LASF73
 1791 0015 D9010000 		.4byte	.LASF74
 1792 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1793 001d 00000000 		.4byte	0
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 61


 1794 0021 00000000 		.4byte	.Ldebug_line0
 1795 0025 02       		.uleb128 0x2
 1796 0026 01       		.byte	0x1
 1797 0027 06       		.byte	0x6
 1798 0028 B5000000 		.4byte	.LASF0
 1799 002c 02       		.uleb128 0x2
 1800 002d 01       		.byte	0x1
 1801 002e 08       		.byte	0x8
 1802 002f DA030000 		.4byte	.LASF1
 1803 0033 02       		.uleb128 0x2
 1804 0034 02       		.byte	0x2
 1805 0035 05       		.byte	0x5
 1806 0036 F5030000 		.4byte	.LASF2
 1807 003a 02       		.uleb128 0x2
 1808 003b 02       		.byte	0x2
 1809 003c 07       		.byte	0x7
 1810 003d 30020000 		.4byte	.LASF3
 1811 0041 02       		.uleb128 0x2
 1812 0042 04       		.byte	0x4
 1813 0043 05       		.byte	0x5
 1814 0044 FA000000 		.4byte	.LASF4
 1815 0048 02       		.uleb128 0x2
 1816 0049 04       		.byte	0x4
 1817 004a 07       		.byte	0x7
 1818 004b B1010000 		.4byte	.LASF5
 1819 004f 02       		.uleb128 0x2
 1820 0050 08       		.byte	0x8
 1821 0051 05       		.byte	0x5
 1822 0052 A7000000 		.4byte	.LASF6
 1823 0056 02       		.uleb128 0x2
 1824 0057 08       		.byte	0x8
 1825 0058 07       		.byte	0x7
 1826 0059 78000000 		.4byte	.LASF7
 1827 005d 03       		.uleb128 0x3
 1828 005e 04       		.byte	0x4
 1829 005f 05       		.byte	0x5
 1830 0060 696E7400 		.ascii	"int\000"
 1831 0064 02       		.uleb128 0x2
 1832 0065 04       		.byte	0x4
 1833 0066 07       		.byte	0x7
 1834 0067 75010000 		.4byte	.LASF8
 1835 006b 04       		.uleb128 0x4
 1836 006c 13010000 		.4byte	.LASF9
 1837 0070 02       		.byte	0x2
 1838 0071 A1       		.byte	0xa1
 1839 0072 2C000000 		.4byte	0x2c
 1840 0076 04       		.uleb128 0x4
 1841 0077 00000000 		.4byte	.LASF10
 1842 007b 02       		.byte	0x2
 1843 007c A2       		.byte	0xa2
 1844 007d 3A000000 		.4byte	0x3a
 1845 0081 04       		.uleb128 0x4
 1846 0082 39010000 		.4byte	.LASF11
 1847 0086 02       		.byte	0x2
 1848 0087 A3       		.byte	0xa3
 1849 0088 48000000 		.4byte	0x48
 1850 008c 02       		.uleb128 0x2
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 62


 1851 008d 04       		.byte	0x4
 1852 008e 04       		.byte	0x4
 1853 008f 73030000 		.4byte	.LASF12
 1854 0093 02       		.uleb128 0x2
 1855 0094 08       		.byte	0x8
 1856 0095 04       		.byte	0x4
 1857 0096 19010000 		.4byte	.LASF13
 1858 009a 04       		.uleb128 0x4
 1859 009b 68040000 		.4byte	.LASF14
 1860 009f 02       		.byte	0x2
 1861 00a0 B2       		.byte	0xb2
 1862 00a1 A5000000 		.4byte	0xa5
 1863 00a5 02       		.uleb128 0x2
 1864 00a6 01       		.byte	0x1
 1865 00a7 08       		.byte	0x8
 1866 00a8 4E040000 		.4byte	.LASF15
 1867 00ac 05       		.uleb128 0x5
 1868 00ad F5000000 		.4byte	.LASF16
 1869 00b1 02       		.byte	0x2
 1870 00b2 4B01     		.2byte	0x14b
 1871 00b4 B8000000 		.4byte	0xb8
 1872 00b8 06       		.uleb128 0x6
 1873 00b9 6B000000 		.4byte	0x6b
 1874 00bd 06       		.uleb128 0x6
 1875 00be 76000000 		.4byte	0x76
 1876 00c2 05       		.uleb128 0x5
 1877 00c3 BD020000 		.4byte	.LASF17
 1878 00c7 02       		.byte	0x2
 1879 00c8 4D01     		.2byte	0x14d
 1880 00ca CE000000 		.4byte	0xce
 1881 00ce 06       		.uleb128 0x6
 1882 00cf 81000000 		.4byte	0x81
 1883 00d3 02       		.uleb128 0x2
 1884 00d4 04       		.byte	0x4
 1885 00d5 07       		.byte	0x7
 1886 00d6 CB020000 		.4byte	.LASF18
 1887 00da 07       		.uleb128 0x7
 1888 00db 96020000 		.4byte	.LASF19
 1889 00df 01       		.byte	0x1
 1890 00e0 49       		.byte	0x49
 1891 00e1 00000000 		.4byte	.LFB0
 1892 00e5 20000000 		.4byte	.LFE0-.LFB0
 1893 00e9 01       		.uleb128 0x1
 1894 00ea 9C       		.byte	0x9c
 1895 00eb 07       		.uleb128 0x7
 1896 00ec E8030000 		.4byte	.LASF20
 1897 00f0 01       		.byte	0x1
 1898 00f1 65       		.byte	0x65
 1899 00f2 00000000 		.4byte	.LFB1
 1900 00f6 4C000000 		.4byte	.LFE1-.LFB1
 1901 00fa 01       		.uleb128 0x1
 1902 00fb 9C       		.byte	0x9c
 1903 00fc 08       		.uleb128 0x8
 1904 00fd A2010000 		.4byte	.LASF21
 1905 0101 01       		.byte	0x1
 1906 0102 AE       		.byte	0xae
 1907 0103 00000000 		.4byte	.LFB2
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 63


 1908 0107 64000000 		.4byte	.LFE2-.LFB2
 1909 010b 01       		.uleb128 0x1
 1910 010c 9C       		.byte	0x9c
 1911 010d 20010000 		.4byte	0x120
 1912 0111 09       		.uleb128 0x9
 1913 0112 AD040000 		.4byte	.LASF23
 1914 0116 01       		.byte	0x1
 1915 0117 B0       		.byte	0xb0
 1916 0118 6B000000 		.4byte	0x6b
 1917 011c 02       		.uleb128 0x2
 1918 011d 91       		.byte	0x91
 1919 011e 77       		.sleb128 -9
 1920 011f 00       		.byte	0
 1921 0120 08       		.uleb128 0x8
 1922 0121 2C010000 		.4byte	.LASF22
 1923 0125 01       		.byte	0x1
 1924 0126 E3       		.byte	0xe3
 1925 0127 00000000 		.4byte	.LFB3
 1926 012b 5C000000 		.4byte	.LFE3-.LFB3
 1927 012f 01       		.uleb128 0x1
 1928 0130 9C       		.byte	0x9c
 1929 0131 44010000 		.4byte	0x144
 1930 0135 09       		.uleb128 0x9
 1931 0136 AD040000 		.4byte	.LASF23
 1932 013a 01       		.byte	0x1
 1933 013b E5       		.byte	0xe5
 1934 013c 6B000000 		.4byte	0x6b
 1935 0140 02       		.uleb128 0x2
 1936 0141 91       		.byte	0x91
 1937 0142 77       		.sleb128 -9
 1938 0143 00       		.byte	0
 1939 0144 0A       		.uleb128 0xa
 1940 0145 DD040000 		.4byte	.LASF38
 1941 0149 01       		.byte	0x1
 1942 014a 1901     		.2byte	0x119
 1943 014c 6B000000 		.4byte	0x6b
 1944 0150 00000000 		.4byte	.LFB4
 1945 0154 10000000 		.4byte	.LFE4-.LFB4
 1946 0158 01       		.uleb128 0x1
 1947 0159 9C       		.byte	0x9c
 1948 015a 0B       		.uleb128 0xb
 1949 015b 80040000 		.4byte	.LASF24
 1950 015f 01       		.byte	0x1
 1951 0160 3101     		.2byte	0x131
 1952 0162 00000000 		.4byte	.LFB5
 1953 0166 14000000 		.4byte	.LFE5-.LFB5
 1954 016a 01       		.uleb128 0x1
 1955 016b 9C       		.byte	0x9c
 1956 016c 80010000 		.4byte	0x180
 1957 0170 0C       		.uleb128 0xc
 1958 0171 40010000 		.4byte	.LASF28
 1959 0175 01       		.byte	0x1
 1960 0176 3101     		.2byte	0x131
 1961 0178 6B000000 		.4byte	0x6b
 1962 017c 02       		.uleb128 0x2
 1963 017d 91       		.byte	0x91
 1964 017e 77       		.sleb128 -9
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 64


 1965 017f 00       		.byte	0
 1966 0180 0D       		.uleb128 0xd
 1967 0181 48010000 		.4byte	.LASF25
 1968 0185 01       		.byte	0x1
 1969 0186 5001     		.2byte	0x150
 1970 0188 00000000 		.4byte	.LFB6
 1971 018c 18000000 		.4byte	.LFE6-.LFB6
 1972 0190 01       		.uleb128 0x1
 1973 0191 9C       		.byte	0x9c
 1974 0192 0D       		.uleb128 0xd
 1975 0193 53040000 		.4byte	.LASF26
 1976 0197 01       		.byte	0x1
 1977 0198 6701     		.2byte	0x167
 1978 019a 00000000 		.4byte	.LFB7
 1979 019e 18000000 		.4byte	.LFE7-.LFB7
 1980 01a2 01       		.uleb128 0x1
 1981 01a3 9C       		.byte	0x9c
 1982 01a4 0B       		.uleb128 0xb
 1983 01a5 DA000000 		.4byte	.LASF27
 1984 01a9 01       		.byte	0x1
 1985 01aa 8101     		.2byte	0x181
 1986 01ac 00000000 		.4byte	.LFB8
 1987 01b0 20000000 		.4byte	.LFE8-.LFB8
 1988 01b4 01       		.uleb128 0x1
 1989 01b5 9C       		.byte	0x9c
 1990 01b6 CA010000 		.4byte	0x1ca
 1991 01ba 0C       		.uleb128 0xc
 1992 01bb 5E020000 		.4byte	.LASF29
 1993 01bf 01       		.byte	0x1
 1994 01c0 8101     		.2byte	0x181
 1995 01c2 6B000000 		.4byte	0x6b
 1996 01c6 02       		.uleb128 0x2
 1997 01c7 91       		.byte	0x91
 1998 01c8 77       		.sleb128 -9
 1999 01c9 00       		.byte	0
 2000 01ca 0E       		.uleb128 0xe
 2001 01cb 79030000 		.4byte	.LASF33
 2002 01cf 01       		.byte	0x1
 2003 01d0 A201     		.2byte	0x1a2
 2004 01d2 6B000000 		.4byte	0x6b
 2005 01d6 00000000 		.4byte	.LFB9
 2006 01da 84000000 		.4byte	.LFE9-.LFB9
 2007 01de 01       		.uleb128 0x1
 2008 01df 9C       		.byte	0x9c
 2009 01e0 12020000 		.4byte	0x212
 2010 01e4 0F       		.uleb128 0xf
 2011 01e5 33040000 		.4byte	.LASF30
 2012 01e9 01       		.byte	0x1
 2013 01ea A401     		.2byte	0x1a4
 2014 01ec 6B000000 		.4byte	0x6b
 2015 01f0 02       		.uleb128 0x2
 2016 01f1 91       		.byte	0x91
 2017 01f2 77       		.sleb128 -9
 2018 01f3 0F       		.uleb128 0xf
 2019 01f4 43020000 		.4byte	.LASF31
 2020 01f8 01       		.byte	0x1
 2021 01f9 A701     		.2byte	0x1a7
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 65


 2022 01fb 76000000 		.4byte	0x76
 2023 01ff 02       		.uleb128 0x2
 2024 0200 91       		.byte	0x91
 2025 0201 74       		.sleb128 -12
 2026 0202 0F       		.uleb128 0xf
 2027 0203 17000000 		.4byte	.LASF32
 2028 0207 01       		.byte	0x1
 2029 0208 A801     		.2byte	0x1a8
 2030 020a 76000000 		.4byte	0x76
 2031 020e 02       		.uleb128 0x2
 2032 020f 91       		.byte	0x91
 2033 0210 72       		.sleb128 -14
 2034 0211 00       		.byte	0
 2035 0212 10       		.uleb128 0x10
 2036 0213 C5030000 		.4byte	.LASF34
 2037 0217 01       		.byte	0x1
 2038 0218 FD01     		.2byte	0x1fd
 2039 021a 6B000000 		.4byte	0x6b
 2040 021e 00000000 		.4byte	.LFB10
 2041 0222 40000000 		.4byte	.LFE10-.LFB10
 2042 0226 01       		.uleb128 0x1
 2043 0227 9C       		.byte	0x9c
 2044 0228 3C020000 		.4byte	0x23c
 2045 022c 0F       		.uleb128 0xf
 2046 022d D6040000 		.4byte	.LASF35
 2047 0231 01       		.byte	0x1
 2048 0232 FF01     		.2byte	0x1ff
 2049 0234 6B000000 		.4byte	0x6b
 2050 0238 02       		.uleb128 0x2
 2051 0239 91       		.byte	0x91
 2052 023a 77       		.sleb128 -9
 2053 023b 00       		.byte	0
 2054 023c 0E       		.uleb128 0xe
 2055 023d 9D040000 		.4byte	.LASF36
 2056 0241 01       		.byte	0x1
 2057 0242 2C02     		.2byte	0x22c
 2058 0244 6B000000 		.4byte	0x6b
 2059 0248 00000000 		.4byte	.LFB11
 2060 024c A8000000 		.4byte	.LFE11-.LFB11
 2061 0250 01       		.uleb128 0x1
 2062 0251 9C       		.byte	0x9c
 2063 0252 93020000 		.4byte	0x293
 2064 0256 0F       		.uleb128 0xf
 2065 0257 33040000 		.4byte	.LASF30
 2066 025b 01       		.byte	0x1
 2067 025c 2E02     		.2byte	0x22e
 2068 025e 6B000000 		.4byte	0x6b
 2069 0262 02       		.uleb128 0x2
 2070 0263 91       		.byte	0x91
 2071 0264 77       		.sleb128 -9
 2072 0265 0F       		.uleb128 0xf
 2073 0266 6A030000 		.4byte	.LASF37
 2074 026a 01       		.byte	0x1
 2075 026b 2F02     		.2byte	0x22f
 2076 026d 6B000000 		.4byte	0x6b
 2077 0271 02       		.uleb128 0x2
 2078 0272 91       		.byte	0x91
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 66


 2079 0273 71       		.sleb128 -15
 2080 0274 0F       		.uleb128 0xf
 2081 0275 43020000 		.4byte	.LASF31
 2082 0279 01       		.byte	0x1
 2083 027a 3202     		.2byte	0x232
 2084 027c 76000000 		.4byte	0x76
 2085 0280 02       		.uleb128 0x2
 2086 0281 91       		.byte	0x91
 2087 0282 74       		.sleb128 -12
 2088 0283 0F       		.uleb128 0xf
 2089 0284 17000000 		.4byte	.LASF32
 2090 0288 01       		.byte	0x1
 2091 0289 3302     		.2byte	0x233
 2092 028b 76000000 		.4byte	0x76
 2093 028f 02       		.uleb128 0x2
 2094 0290 91       		.byte	0x91
 2095 0291 72       		.sleb128 -14
 2096 0292 00       		.byte	0
 2097 0293 11       		.uleb128 0x11
 2098 0294 82010000 		.4byte	.LASF39
 2099 0298 01       		.byte	0x1
 2100 0299 9202     		.2byte	0x292
 2101 029b 76000000 		.4byte	0x76
 2102 029f 00000000 		.4byte	.LFB12
 2103 02a3 22000000 		.4byte	.LFE12-.LFB12
 2104 02a7 01       		.uleb128 0x1
 2105 02a8 9C       		.byte	0x9c
 2106 02a9 0E       		.uleb128 0xe
 2107 02aa 8F000000 		.4byte	.LASF40
 2108 02ae 01       		.byte	0x1
 2109 02af B302     		.2byte	0x2b3
 2110 02b1 76000000 		.4byte	0x76
 2111 02b5 00000000 		.4byte	.LFB13
 2112 02b9 84000000 		.4byte	.LFE13-.LFB13
 2113 02bd 01       		.uleb128 0x1
 2114 02be 9C       		.byte	0x9c
 2115 02bf D3020000 		.4byte	0x2d3
 2116 02c3 0F       		.uleb128 0xf
 2117 02c4 2B020000 		.4byte	.LASF41
 2118 02c8 01       		.byte	0x1
 2119 02c9 B602     		.2byte	0x2b6
 2120 02cb 76000000 		.4byte	0x76
 2121 02cf 02       		.uleb128 0x2
 2122 02d0 91       		.byte	0x91
 2123 02d1 76       		.sleb128 -10
 2124 02d2 00       		.byte	0
 2125 02d3 12       		.uleb128 0x12
 2126 02d4 5B000000 		.4byte	.LASF42
 2127 02d8 01       		.byte	0x1
 2128 02d9 0303     		.2byte	0x303
 2129 02db 00000000 		.4byte	.LFB14
 2130 02df 70000000 		.4byte	.LFE14-.LFB14
 2131 02e3 01       		.uleb128 0x1
 2132 02e4 9C       		.byte	0x9c
 2133 02e5 F9020000 		.4byte	0x2f9
 2134 02e9 0F       		.uleb128 0xf
 2135 02ea AD040000 		.4byte	.LASF23
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 67


 2136 02ee 01       		.byte	0x1
 2137 02ef 0503     		.2byte	0x305
 2138 02f1 6B000000 		.4byte	0x6b
 2139 02f5 02       		.uleb128 0x2
 2140 02f6 91       		.byte	0x91
 2141 02f7 77       		.sleb128 -9
 2142 02f8 00       		.byte	0
 2143 02f9 0B       		.uleb128 0xb
 2144 02fa FF030000 		.4byte	.LASF43
 2145 02fe 01       		.byte	0x1
 2146 02ff 4003     		.2byte	0x340
 2147 0301 00000000 		.4byte	.LFB15
 2148 0305 14000000 		.4byte	.LFE15-.LFB15
 2149 0309 01       		.uleb128 0x1
 2150 030a 9C       		.byte	0x9c
 2151 030b 1F030000 		.4byte	0x31f
 2152 030f 0C       		.uleb128 0xc
 2153 0310 20010000 		.4byte	.LASF44
 2154 0314 01       		.byte	0x1
 2155 0315 4003     		.2byte	0x340
 2156 0317 6B000000 		.4byte	0x6b
 2157 031b 02       		.uleb128 0x2
 2158 031c 91       		.byte	0x91
 2159 031d 77       		.sleb128 -9
 2160 031e 00       		.byte	0
 2161 031f 0B       		.uleb128 0xb
 2162 0320 03050000 		.4byte	.LASF45
 2163 0324 01       		.byte	0x1
 2164 0325 6503     		.2byte	0x365
 2165 0327 00000000 		.4byte	.LFB16
 2166 032b 20000000 		.4byte	.LFE16-.LFB16
 2167 032f 01       		.uleb128 0x1
 2168 0330 9C       		.byte	0x9c
 2169 0331 45030000 		.4byte	0x345
 2170 0335 0C       		.uleb128 0xc
 2171 0336 D4020000 		.4byte	.LASF46
 2172 033a 01       		.byte	0x1
 2173 033b 6503     		.2byte	0x365
 2174 033d 6B000000 		.4byte	0x6b
 2175 0341 02       		.uleb128 0x2
 2176 0342 91       		.byte	0x91
 2177 0343 77       		.sleb128 -9
 2178 0344 00       		.byte	0
 2179 0345 0B       		.uleb128 0xb
 2180 0346 AF030000 		.4byte	.LASF47
 2181 034a 01       		.byte	0x1
 2182 034b 7A03     		.2byte	0x37a
 2183 034d 00000000 		.4byte	.LFB17
 2184 0351 20000000 		.4byte	.LFE17-.LFB17
 2185 0355 01       		.uleb128 0x1
 2186 0356 9C       		.byte	0x9c
 2187 0357 6B030000 		.4byte	0x36b
 2188 035b 0C       		.uleb128 0xc
 2189 035c D4020000 		.4byte	.LASF46
 2190 0360 01       		.byte	0x1
 2191 0361 7A03     		.2byte	0x37a
 2192 0363 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 68


 2193 0367 02       		.uleb128 0x2
 2194 0368 91       		.byte	0x91
 2195 0369 77       		.sleb128 -9
 2196 036a 00       		.byte	0
 2197 036b 0B       		.uleb128 0xb
 2198 036c 7B020000 		.4byte	.LASF48
 2199 0370 01       		.byte	0x1
 2200 0371 C803     		.2byte	0x3c8
 2201 0373 00000000 		.4byte	.LFB18
 2202 0377 20000000 		.4byte	.LFE18-.LFB18
 2203 037b 01       		.uleb128 0x1
 2204 037c 9C       		.byte	0x9c
 2205 037d 91030000 		.4byte	0x391
 2206 0381 0C       		.uleb128 0xc
 2207 0382 5E020000 		.4byte	.LASF29
 2208 0386 01       		.byte	0x1
 2209 0387 C803     		.2byte	0x3c8
 2210 0389 6B000000 		.4byte	0x6b
 2211 038d 02       		.uleb128 0x2
 2212 038e 91       		.byte	0x91
 2213 038f 77       		.sleb128 -9
 2214 0390 00       		.byte	0
 2215 0391 0B       		.uleb128 0xb
 2216 0392 3A040000 		.4byte	.LASF49
 2217 0396 01       		.byte	0x1
 2218 0397 EA03     		.2byte	0x3ea
 2219 0399 00000000 		.4byte	.LFB19
 2220 039d 2C000000 		.4byte	.LFE19-.LFB19
 2221 03a1 01       		.uleb128 0x1
 2222 03a2 9C       		.byte	0x9c
 2223 03a3 B7030000 		.4byte	0x3b7
 2224 03a7 0C       		.uleb128 0xc
 2225 03a8 29000000 		.4byte	.LASF50
 2226 03ac 01       		.byte	0x1
 2227 03ad EA03     		.2byte	0x3ea
 2228 03af 6B000000 		.4byte	0x6b
 2229 03b3 02       		.uleb128 0x2
 2230 03b4 91       		.byte	0x91
 2231 03b5 77       		.sleb128 -9
 2232 03b6 00       		.byte	0
 2233 03b7 0A       		.uleb128 0xa
 2234 03b8 34000000 		.4byte	.LASF51
 2235 03bc 01       		.byte	0x1
 2236 03bd 2E04     		.2byte	0x42e
 2237 03bf 6B000000 		.4byte	0x6b
 2238 03c3 00000000 		.4byte	.LFB20
 2239 03c7 18000000 		.4byte	.LFE20-.LFB20
 2240 03cb 01       		.uleb128 0x1
 2241 03cc 9C       		.byte	0x9c
 2242 03cd 0B       		.uleb128 0xb
 2243 03ce 03010000 		.4byte	.LASF52
 2244 03d2 01       		.byte	0x1
 2245 03d3 5204     		.2byte	0x452
 2246 03d5 00000000 		.4byte	.LFB21
 2247 03d9 34000000 		.4byte	.LFE21-.LFB21
 2248 03dd 01       		.uleb128 0x1
 2249 03de 9C       		.byte	0x9c
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 69


 2250 03df F3030000 		.4byte	0x3f3
 2251 03e3 0C       		.uleb128 0xc
 2252 03e4 29000000 		.4byte	.LASF50
 2253 03e8 01       		.byte	0x1
 2254 03e9 5204     		.2byte	0x452
 2255 03eb 6B000000 		.4byte	0x6b
 2256 03ef 02       		.uleb128 0x2
 2257 03f0 91       		.byte	0x91
 2258 03f1 77       		.sleb128 -9
 2259 03f2 00       		.byte	0
 2260 03f3 12       		.uleb128 0x12
 2261 03f4 49000000 		.4byte	.LASF53
 2262 03f8 01       		.byte	0x1
 2263 03f9 AE04     		.2byte	0x4ae
 2264 03fb 00000000 		.4byte	.LFB22
 2265 03ff 40000000 		.4byte	.LFE22-.LFB22
 2266 0403 01       		.uleb128 0x1
 2267 0404 9C       		.byte	0x9c
 2268 0405 28040000 		.4byte	0x428
 2269 0409 0C       		.uleb128 0xc
 2270 040a 71000000 		.4byte	.LASF54
 2271 040e 01       		.byte	0x1
 2272 040f AE04     		.2byte	0x4ae
 2273 0411 28040000 		.4byte	0x428
 2274 0415 02       		.uleb128 0x2
 2275 0416 91       		.byte	0x91
 2276 0417 6C       		.sleb128 -20
 2277 0418 0F       		.uleb128 0xf
 2278 0419 F9040000 		.4byte	.LASF55
 2279 041d 01       		.byte	0x1
 2280 041e B004     		.2byte	0x4b0
 2281 0420 76000000 		.4byte	0x76
 2282 0424 02       		.uleb128 0x2
 2283 0425 91       		.byte	0x91
 2284 0426 76       		.sleb128 -10
 2285 0427 00       		.byte	0
 2286 0428 13       		.uleb128 0x13
 2287 0429 04       		.byte	0x4
 2288 042a 2E040000 		.4byte	0x42e
 2289 042e 14       		.uleb128 0x14
 2290 042f 9A000000 		.4byte	0x9a
 2291 0433 12       		.uleb128 0x12
 2292 0434 64010000 		.4byte	.LASF56
 2293 0438 01       		.byte	0x1
 2294 0439 D404     		.2byte	0x4d4
 2295 043b 00000000 		.4byte	.LFB23
 2296 043f 40000000 		.4byte	.LFE23-.LFB23
 2297 0443 01       		.uleb128 0x1
 2298 0444 9C       		.byte	0x9c
 2299 0445 77040000 		.4byte	0x477
 2300 0449 0C       		.uleb128 0xc
 2301 044a 71000000 		.4byte	.LASF54
 2302 044e 01       		.byte	0x1
 2303 044f D404     		.2byte	0x4d4
 2304 0451 77040000 		.4byte	0x477
 2305 0455 02       		.uleb128 0x2
 2306 0456 91       		.byte	0x91
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 70


 2307 0457 6C       		.sleb128 -20
 2308 0458 0C       		.uleb128 0xc
 2309 0459 29040000 		.4byte	.LASF57
 2310 045d 01       		.byte	0x1
 2311 045e D404     		.2byte	0x4d4
 2312 0460 6B000000 		.4byte	0x6b
 2313 0464 02       		.uleb128 0x2
 2314 0465 91       		.byte	0x91
 2315 0466 6B       		.sleb128 -21
 2316 0467 0F       		.uleb128 0xf
 2317 0468 F9040000 		.4byte	.LASF55
 2318 046c 01       		.byte	0x1
 2319 046d D704     		.2byte	0x4d7
 2320 046f 6B000000 		.4byte	0x6b
 2321 0473 02       		.uleb128 0x2
 2322 0474 91       		.byte	0x91
 2323 0475 77       		.sleb128 -9
 2324 0476 00       		.byte	0
 2325 0477 13       		.uleb128 0x13
 2326 0478 04       		.byte	0x4
 2327 0479 7D040000 		.4byte	0x47d
 2328 047d 14       		.uleb128 0x14
 2329 047e 6B000000 		.4byte	0x6b
 2330 0482 12       		.uleb128 0x12
 2331 0483 92010000 		.4byte	.LASF58
 2332 0487 01       		.byte	0x1
 2333 0488 F904     		.2byte	0x4f9
 2334 048a 00000000 		.4byte	.LFB24
 2335 048e 30000000 		.4byte	.LFE24-.LFB24
 2336 0492 01       		.uleb128 0x1
 2337 0493 9C       		.byte	0x9c
 2338 0494 A8040000 		.4byte	0x4a8
 2339 0498 0C       		.uleb128 0xc
 2340 0499 29000000 		.4byte	.LASF50
 2341 049d 01       		.byte	0x1
 2342 049e F904     		.2byte	0x4f9
 2343 04a0 6B000000 		.4byte	0x6b
 2344 04a4 02       		.uleb128 0x2
 2345 04a5 91       		.byte	0x91
 2346 04a6 77       		.sleb128 -9
 2347 04a7 00       		.byte	0
 2348 04a8 10       		.uleb128 0x10
 2349 04a9 BE040000 		.4byte	.LASF59
 2350 04ad 01       		.byte	0x1
 2351 04ae 1E05     		.2byte	0x51e
 2352 04b0 6B000000 		.4byte	0x6b
 2353 04b4 00000000 		.4byte	.LFB25
 2354 04b8 44000000 		.4byte	.LFE25-.LFB25
 2355 04bc 01       		.uleb128 0x1
 2356 04bd 9C       		.byte	0x9c
 2357 04be D2040000 		.4byte	0x4d2
 2358 04c2 0F       		.uleb128 0xf
 2359 04c3 2B020000 		.4byte	.LASF41
 2360 04c7 01       		.byte	0x1
 2361 04c8 2105     		.2byte	0x521
 2362 04ca 6B000000 		.4byte	0x6b
 2363 04ce 02       		.uleb128 0x2
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 71


 2364 04cf 91       		.byte	0x91
 2365 04d0 77       		.sleb128 -9
 2366 04d1 00       		.byte	0
 2367 04d2 12       		.uleb128 0x12
 2368 04d3 65020000 		.4byte	.LASF60
 2369 04d7 01       		.byte	0x1
 2370 04d8 7405     		.2byte	0x574
 2371 04da 00000000 		.4byte	.LFB26
 2372 04de 40000000 		.4byte	.LFE26-.LFB26
 2373 04e2 01       		.uleb128 0x1
 2374 04e3 9C       		.byte	0x9c
 2375 04e4 F8040000 		.4byte	0x4f8
 2376 04e8 0F       		.uleb128 0xf
 2377 04e9 AD040000 		.4byte	.LASF23
 2378 04ed 01       		.byte	0x1
 2379 04ee 7605     		.2byte	0x576
 2380 04f0 6B000000 		.4byte	0x6b
 2381 04f4 02       		.uleb128 0x2
 2382 04f5 91       		.byte	0x91
 2383 04f6 77       		.sleb128 -9
 2384 04f7 00       		.byte	0
 2385 04f8 12       		.uleb128 0x12
 2386 04f9 6E040000 		.4byte	.LASF61
 2387 04fd 01       		.byte	0x1
 2388 04fe CD05     		.2byte	0x5cd
 2389 0500 00000000 		.4byte	.LFB27
 2390 0504 BC000000 		.4byte	.LFE27-.LFB27
 2391 0508 01       		.uleb128 0x1
 2392 0509 9C       		.byte	0x9c
 2393 050a 49050000 		.4byte	0x549
 2394 050e 0C       		.uleb128 0xc
 2395 050f 5C010000 		.4byte	.LASF62
 2396 0513 01       		.byte	0x1
 2397 0514 CD05     		.2byte	0x5cd
 2398 0516 6B000000 		.4byte	0x6b
 2399 051a 02       		.uleb128 0x2
 2400 051b 91       		.byte	0x91
 2401 051c 6F       		.sleb128 -17
 2402 051d 15       		.uleb128 0x15
 2403 051e 12000000 		.4byte	.LBB2
 2404 0522 90000000 		.4byte	.LBE2-.LBB2
 2405 0526 0F       		.uleb128 0xf
 2406 0527 C3020000 		.4byte	.LASF63
 2407 052b 01       		.byte	0x1
 2408 052c D505     		.2byte	0x5d5
 2409 052e 6B000000 		.4byte	0x6b
 2410 0532 02       		.uleb128 0x2
 2411 0533 91       		.byte	0x91
 2412 0534 77       		.sleb128 -9
 2413 0535 0F       		.uleb128 0xf
 2414 0536 54020000 		.4byte	.LASF64
 2415 053a 01       		.byte	0x1
 2416 053b FB05     		.2byte	0x5fb
 2417 053d 6B000000 		.4byte	0x6b
 2418 0541 05       		.uleb128 0x5
 2419 0542 03       		.byte	0x3
 2420 0543 08000000 		.4byte	tx_period.4989
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 72


 2421 0547 00       		.byte	0
 2422 0548 00       		.byte	0
 2423 0549 0B       		.uleb128 0xb
 2424 054a A4020000 		.4byte	.LASF65
 2425 054e 01       		.byte	0x1
 2426 054f 4606     		.2byte	0x646
 2427 0551 00000000 		.4byte	.LFB28
 2428 0555 14000000 		.4byte	.LFE28-.LFB28
 2429 0559 01       		.uleb128 0x1
 2430 055a 9C       		.byte	0x9c
 2431 055b 6F050000 		.4byte	0x56f
 2432 055f 0C       		.uleb128 0xc
 2433 0560 20010000 		.4byte	.LASF44
 2434 0564 01       		.byte	0x1
 2435 0565 4606     		.2byte	0x646
 2436 0567 6B000000 		.4byte	0x6b
 2437 056b 02       		.uleb128 0x2
 2438 056c 91       		.byte	0x91
 2439 056d 77       		.sleb128 -9
 2440 056e 00       		.byte	0
 2441 056f 16       		.uleb128 0x16
 2442 0570 07000000 		.4byte	.LASF66
 2443 0574 01       		.byte	0x1
 2444 0575 1C       		.byte	0x1c
 2445 0576 6B000000 		.4byte	0x6b
 2446 057a 05       		.uleb128 0x5
 2447 057b 03       		.byte	0x3
 2448 057c 00000000 		.4byte	Pump_AL_initVar
 2449 0580 17       		.uleb128 0x17
 2450 0581 6B000000 		.4byte	0x6b
 2451 0585 90050000 		.4byte	0x590
 2452 0589 18       		.uleb128 0x18
 2453 058a D3000000 		.4byte	0xd3
 2454 058e FF       		.byte	0xff
 2455 058f 00       		.byte	0
 2456 0590 16       		.uleb128 0x16
 2457 0591 18040000 		.4byte	.LASF67
 2458 0595 01       		.byte	0x1
 2459 0596 24       		.byte	0x24
 2460 0597 A1050000 		.4byte	0x5a1
 2461 059b 05       		.uleb128 0x5
 2462 059c 03       		.byte	0x3
 2463 059d 00000000 		.4byte	Pump_AL_rxBuffer
 2464 05a1 06       		.uleb128 0x6
 2465 05a2 80050000 		.4byte	0x580
 2466 05a6 16       		.uleb128 0x16
 2467 05a7 34050000 		.4byte	.LASF68
 2468 05ab 01       		.byte	0x1
 2469 05ac 25       		.byte	0x25
 2470 05ad BD000000 		.4byte	0xbd
 2471 05b1 05       		.uleb128 0x5
 2472 05b2 03       		.byte	0x3
 2473 05b3 00000000 		.4byte	Pump_AL_rxBufferRead
 2474 05b7 16       		.uleb128 0x16
 2475 05b8 C3010000 		.4byte	.LASF69
 2476 05bc 01       		.byte	0x1
 2477 05bd 26       		.byte	0x26
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 73


 2478 05be BD000000 		.4byte	0xbd
 2479 05c2 05       		.uleb128 0x5
 2480 05c3 03       		.byte	0x3
 2481 05c4 00000000 		.4byte	Pump_AL_rxBufferWrite
 2482 05c8 16       		.uleb128 0x16
 2483 05c9 19050000 		.4byte	.LASF70
 2484 05cd 01       		.byte	0x1
 2485 05ce 27       		.byte	0x27
 2486 05cf B8000000 		.4byte	0xb8
 2487 05d3 05       		.uleb128 0x5
 2488 05d4 03       		.byte	0x3
 2489 05d5 00000000 		.4byte	Pump_AL_rxBufferLoopDetect
 2490 05d9 16       		.uleb128 0x16
 2491 05da C1000000 		.4byte	.LASF71
 2492 05de 01       		.byte	0x1
 2493 05df 28       		.byte	0x28
 2494 05e0 B8000000 		.4byte	0xb8
 2495 05e4 05       		.uleb128 0x5
 2496 05e5 03       		.byte	0x3
 2497 05e6 00000000 		.4byte	Pump_AL_rxBufferOverflow
 2498 05ea 00       		.byte	0
 2499              		.section	.debug_abbrev,"",%progbits
 2500              	.Ldebug_abbrev0:
 2501 0000 01       		.uleb128 0x1
 2502 0001 11       		.uleb128 0x11
 2503 0002 01       		.byte	0x1
 2504 0003 25       		.uleb128 0x25
 2505 0004 0E       		.uleb128 0xe
 2506 0005 13       		.uleb128 0x13
 2507 0006 0B       		.uleb128 0xb
 2508 0007 03       		.uleb128 0x3
 2509 0008 0E       		.uleb128 0xe
 2510 0009 1B       		.uleb128 0x1b
 2511 000a 0E       		.uleb128 0xe
 2512 000b 55       		.uleb128 0x55
 2513 000c 17       		.uleb128 0x17
 2514 000d 11       		.uleb128 0x11
 2515 000e 01       		.uleb128 0x1
 2516 000f 10       		.uleb128 0x10
 2517 0010 17       		.uleb128 0x17
 2518 0011 00       		.byte	0
 2519 0012 00       		.byte	0
 2520 0013 02       		.uleb128 0x2
 2521 0014 24       		.uleb128 0x24
 2522 0015 00       		.byte	0
 2523 0016 0B       		.uleb128 0xb
 2524 0017 0B       		.uleb128 0xb
 2525 0018 3E       		.uleb128 0x3e
 2526 0019 0B       		.uleb128 0xb
 2527 001a 03       		.uleb128 0x3
 2528 001b 0E       		.uleb128 0xe
 2529 001c 00       		.byte	0
 2530 001d 00       		.byte	0
 2531 001e 03       		.uleb128 0x3
 2532 001f 24       		.uleb128 0x24
 2533 0020 00       		.byte	0
 2534 0021 0B       		.uleb128 0xb
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 74


 2535 0022 0B       		.uleb128 0xb
 2536 0023 3E       		.uleb128 0x3e
 2537 0024 0B       		.uleb128 0xb
 2538 0025 03       		.uleb128 0x3
 2539 0026 08       		.uleb128 0x8
 2540 0027 00       		.byte	0
 2541 0028 00       		.byte	0
 2542 0029 04       		.uleb128 0x4
 2543 002a 16       		.uleb128 0x16
 2544 002b 00       		.byte	0
 2545 002c 03       		.uleb128 0x3
 2546 002d 0E       		.uleb128 0xe
 2547 002e 3A       		.uleb128 0x3a
 2548 002f 0B       		.uleb128 0xb
 2549 0030 3B       		.uleb128 0x3b
 2550 0031 0B       		.uleb128 0xb
 2551 0032 49       		.uleb128 0x49
 2552 0033 13       		.uleb128 0x13
 2553 0034 00       		.byte	0
 2554 0035 00       		.byte	0
 2555 0036 05       		.uleb128 0x5
 2556 0037 16       		.uleb128 0x16
 2557 0038 00       		.byte	0
 2558 0039 03       		.uleb128 0x3
 2559 003a 0E       		.uleb128 0xe
 2560 003b 3A       		.uleb128 0x3a
 2561 003c 0B       		.uleb128 0xb
 2562 003d 3B       		.uleb128 0x3b
 2563 003e 05       		.uleb128 0x5
 2564 003f 49       		.uleb128 0x49
 2565 0040 13       		.uleb128 0x13
 2566 0041 00       		.byte	0
 2567 0042 00       		.byte	0
 2568 0043 06       		.uleb128 0x6
 2569 0044 35       		.uleb128 0x35
 2570 0045 00       		.byte	0
 2571 0046 49       		.uleb128 0x49
 2572 0047 13       		.uleb128 0x13
 2573 0048 00       		.byte	0
 2574 0049 00       		.byte	0
 2575 004a 07       		.uleb128 0x7
 2576 004b 2E       		.uleb128 0x2e
 2577 004c 00       		.byte	0
 2578 004d 3F       		.uleb128 0x3f
 2579 004e 19       		.uleb128 0x19
 2580 004f 03       		.uleb128 0x3
 2581 0050 0E       		.uleb128 0xe
 2582 0051 3A       		.uleb128 0x3a
 2583 0052 0B       		.uleb128 0xb
 2584 0053 3B       		.uleb128 0x3b
 2585 0054 0B       		.uleb128 0xb
 2586 0055 27       		.uleb128 0x27
 2587 0056 19       		.uleb128 0x19
 2588 0057 11       		.uleb128 0x11
 2589 0058 01       		.uleb128 0x1
 2590 0059 12       		.uleb128 0x12
 2591 005a 06       		.uleb128 0x6
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 75


 2592 005b 40       		.uleb128 0x40
 2593 005c 18       		.uleb128 0x18
 2594 005d 9642     		.uleb128 0x2116
 2595 005f 19       		.uleb128 0x19
 2596 0060 00       		.byte	0
 2597 0061 00       		.byte	0
 2598 0062 08       		.uleb128 0x8
 2599 0063 2E       		.uleb128 0x2e
 2600 0064 01       		.byte	0x1
 2601 0065 3F       		.uleb128 0x3f
 2602 0066 19       		.uleb128 0x19
 2603 0067 03       		.uleb128 0x3
 2604 0068 0E       		.uleb128 0xe
 2605 0069 3A       		.uleb128 0x3a
 2606 006a 0B       		.uleb128 0xb
 2607 006b 3B       		.uleb128 0x3b
 2608 006c 0B       		.uleb128 0xb
 2609 006d 27       		.uleb128 0x27
 2610 006e 19       		.uleb128 0x19
 2611 006f 11       		.uleb128 0x11
 2612 0070 01       		.uleb128 0x1
 2613 0071 12       		.uleb128 0x12
 2614 0072 06       		.uleb128 0x6
 2615 0073 40       		.uleb128 0x40
 2616 0074 18       		.uleb128 0x18
 2617 0075 9642     		.uleb128 0x2116
 2618 0077 19       		.uleb128 0x19
 2619 0078 01       		.uleb128 0x1
 2620 0079 13       		.uleb128 0x13
 2621 007a 00       		.byte	0
 2622 007b 00       		.byte	0
 2623 007c 09       		.uleb128 0x9
 2624 007d 34       		.uleb128 0x34
 2625 007e 00       		.byte	0
 2626 007f 03       		.uleb128 0x3
 2627 0080 0E       		.uleb128 0xe
 2628 0081 3A       		.uleb128 0x3a
 2629 0082 0B       		.uleb128 0xb
 2630 0083 3B       		.uleb128 0x3b
 2631 0084 0B       		.uleb128 0xb
 2632 0085 49       		.uleb128 0x49
 2633 0086 13       		.uleb128 0x13
 2634 0087 02       		.uleb128 0x2
 2635 0088 18       		.uleb128 0x18
 2636 0089 00       		.byte	0
 2637 008a 00       		.byte	0
 2638 008b 0A       		.uleb128 0xa
 2639 008c 2E       		.uleb128 0x2e
 2640 008d 00       		.byte	0
 2641 008e 3F       		.uleb128 0x3f
 2642 008f 19       		.uleb128 0x19
 2643 0090 03       		.uleb128 0x3
 2644 0091 0E       		.uleb128 0xe
 2645 0092 3A       		.uleb128 0x3a
 2646 0093 0B       		.uleb128 0xb
 2647 0094 3B       		.uleb128 0x3b
 2648 0095 05       		.uleb128 0x5
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 76


 2649 0096 27       		.uleb128 0x27
 2650 0097 19       		.uleb128 0x19
 2651 0098 49       		.uleb128 0x49
 2652 0099 13       		.uleb128 0x13
 2653 009a 11       		.uleb128 0x11
 2654 009b 01       		.uleb128 0x1
 2655 009c 12       		.uleb128 0x12
 2656 009d 06       		.uleb128 0x6
 2657 009e 40       		.uleb128 0x40
 2658 009f 18       		.uleb128 0x18
 2659 00a0 9742     		.uleb128 0x2117
 2660 00a2 19       		.uleb128 0x19
 2661 00a3 00       		.byte	0
 2662 00a4 00       		.byte	0
 2663 00a5 0B       		.uleb128 0xb
 2664 00a6 2E       		.uleb128 0x2e
 2665 00a7 01       		.byte	0x1
 2666 00a8 3F       		.uleb128 0x3f
 2667 00a9 19       		.uleb128 0x19
 2668 00aa 03       		.uleb128 0x3
 2669 00ab 0E       		.uleb128 0xe
 2670 00ac 3A       		.uleb128 0x3a
 2671 00ad 0B       		.uleb128 0xb
 2672 00ae 3B       		.uleb128 0x3b
 2673 00af 05       		.uleb128 0x5
 2674 00b0 27       		.uleb128 0x27
 2675 00b1 19       		.uleb128 0x19
 2676 00b2 11       		.uleb128 0x11
 2677 00b3 01       		.uleb128 0x1
 2678 00b4 12       		.uleb128 0x12
 2679 00b5 06       		.uleb128 0x6
 2680 00b6 40       		.uleb128 0x40
 2681 00b7 18       		.uleb128 0x18
 2682 00b8 9742     		.uleb128 0x2117
 2683 00ba 19       		.uleb128 0x19
 2684 00bb 01       		.uleb128 0x1
 2685 00bc 13       		.uleb128 0x13
 2686 00bd 00       		.byte	0
 2687 00be 00       		.byte	0
 2688 00bf 0C       		.uleb128 0xc
 2689 00c0 05       		.uleb128 0x5
 2690 00c1 00       		.byte	0
 2691 00c2 03       		.uleb128 0x3
 2692 00c3 0E       		.uleb128 0xe
 2693 00c4 3A       		.uleb128 0x3a
 2694 00c5 0B       		.uleb128 0xb
 2695 00c6 3B       		.uleb128 0x3b
 2696 00c7 05       		.uleb128 0x5
 2697 00c8 49       		.uleb128 0x49
 2698 00c9 13       		.uleb128 0x13
 2699 00ca 02       		.uleb128 0x2
 2700 00cb 18       		.uleb128 0x18
 2701 00cc 00       		.byte	0
 2702 00cd 00       		.byte	0
 2703 00ce 0D       		.uleb128 0xd
 2704 00cf 2E       		.uleb128 0x2e
 2705 00d0 00       		.byte	0
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 77


 2706 00d1 3F       		.uleb128 0x3f
 2707 00d2 19       		.uleb128 0x19
 2708 00d3 03       		.uleb128 0x3
 2709 00d4 0E       		.uleb128 0xe
 2710 00d5 3A       		.uleb128 0x3a
 2711 00d6 0B       		.uleb128 0xb
 2712 00d7 3B       		.uleb128 0x3b
 2713 00d8 05       		.uleb128 0x5
 2714 00d9 27       		.uleb128 0x27
 2715 00da 19       		.uleb128 0x19
 2716 00db 11       		.uleb128 0x11
 2717 00dc 01       		.uleb128 0x1
 2718 00dd 12       		.uleb128 0x12
 2719 00de 06       		.uleb128 0x6
 2720 00df 40       		.uleb128 0x40
 2721 00e0 18       		.uleb128 0x18
 2722 00e1 9742     		.uleb128 0x2117
 2723 00e3 19       		.uleb128 0x19
 2724 00e4 00       		.byte	0
 2725 00e5 00       		.byte	0
 2726 00e6 0E       		.uleb128 0xe
 2727 00e7 2E       		.uleb128 0x2e
 2728 00e8 01       		.byte	0x1
 2729 00e9 3F       		.uleb128 0x3f
 2730 00ea 19       		.uleb128 0x19
 2731 00eb 03       		.uleb128 0x3
 2732 00ec 0E       		.uleb128 0xe
 2733 00ed 3A       		.uleb128 0x3a
 2734 00ee 0B       		.uleb128 0xb
 2735 00ef 3B       		.uleb128 0x3b
 2736 00f0 05       		.uleb128 0x5
 2737 00f1 27       		.uleb128 0x27
 2738 00f2 19       		.uleb128 0x19
 2739 00f3 49       		.uleb128 0x49
 2740 00f4 13       		.uleb128 0x13
 2741 00f5 11       		.uleb128 0x11
 2742 00f6 01       		.uleb128 0x1
 2743 00f7 12       		.uleb128 0x12
 2744 00f8 06       		.uleb128 0x6
 2745 00f9 40       		.uleb128 0x40
 2746 00fa 18       		.uleb128 0x18
 2747 00fb 9642     		.uleb128 0x2116
 2748 00fd 19       		.uleb128 0x19
 2749 00fe 01       		.uleb128 0x1
 2750 00ff 13       		.uleb128 0x13
 2751 0100 00       		.byte	0
 2752 0101 00       		.byte	0
 2753 0102 0F       		.uleb128 0xf
 2754 0103 34       		.uleb128 0x34
 2755 0104 00       		.byte	0
 2756 0105 03       		.uleb128 0x3
 2757 0106 0E       		.uleb128 0xe
 2758 0107 3A       		.uleb128 0x3a
 2759 0108 0B       		.uleb128 0xb
 2760 0109 3B       		.uleb128 0x3b
 2761 010a 05       		.uleb128 0x5
 2762 010b 49       		.uleb128 0x49
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 78


 2763 010c 13       		.uleb128 0x13
 2764 010d 02       		.uleb128 0x2
 2765 010e 18       		.uleb128 0x18
 2766 010f 00       		.byte	0
 2767 0110 00       		.byte	0
 2768 0111 10       		.uleb128 0x10
 2769 0112 2E       		.uleb128 0x2e
 2770 0113 01       		.byte	0x1
 2771 0114 3F       		.uleb128 0x3f
 2772 0115 19       		.uleb128 0x19
 2773 0116 03       		.uleb128 0x3
 2774 0117 0E       		.uleb128 0xe
 2775 0118 3A       		.uleb128 0x3a
 2776 0119 0B       		.uleb128 0xb
 2777 011a 3B       		.uleb128 0x3b
 2778 011b 05       		.uleb128 0x5
 2779 011c 27       		.uleb128 0x27
 2780 011d 19       		.uleb128 0x19
 2781 011e 49       		.uleb128 0x49
 2782 011f 13       		.uleb128 0x13
 2783 0120 11       		.uleb128 0x11
 2784 0121 01       		.uleb128 0x1
 2785 0122 12       		.uleb128 0x12
 2786 0123 06       		.uleb128 0x6
 2787 0124 40       		.uleb128 0x40
 2788 0125 18       		.uleb128 0x18
 2789 0126 9742     		.uleb128 0x2117
 2790 0128 19       		.uleb128 0x19
 2791 0129 01       		.uleb128 0x1
 2792 012a 13       		.uleb128 0x13
 2793 012b 00       		.byte	0
 2794 012c 00       		.byte	0
 2795 012d 11       		.uleb128 0x11
 2796 012e 2E       		.uleb128 0x2e
 2797 012f 00       		.byte	0
 2798 0130 3F       		.uleb128 0x3f
 2799 0131 19       		.uleb128 0x19
 2800 0132 03       		.uleb128 0x3
 2801 0133 0E       		.uleb128 0xe
 2802 0134 3A       		.uleb128 0x3a
 2803 0135 0B       		.uleb128 0xb
 2804 0136 3B       		.uleb128 0x3b
 2805 0137 05       		.uleb128 0x5
 2806 0138 27       		.uleb128 0x27
 2807 0139 19       		.uleb128 0x19
 2808 013a 49       		.uleb128 0x49
 2809 013b 13       		.uleb128 0x13
 2810 013c 11       		.uleb128 0x11
 2811 013d 01       		.uleb128 0x1
 2812 013e 12       		.uleb128 0x12
 2813 013f 06       		.uleb128 0x6
 2814 0140 40       		.uleb128 0x40
 2815 0141 18       		.uleb128 0x18
 2816 0142 9642     		.uleb128 0x2116
 2817 0144 19       		.uleb128 0x19
 2818 0145 00       		.byte	0
 2819 0146 00       		.byte	0
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 79


 2820 0147 12       		.uleb128 0x12
 2821 0148 2E       		.uleb128 0x2e
 2822 0149 01       		.byte	0x1
 2823 014a 3F       		.uleb128 0x3f
 2824 014b 19       		.uleb128 0x19
 2825 014c 03       		.uleb128 0x3
 2826 014d 0E       		.uleb128 0xe
 2827 014e 3A       		.uleb128 0x3a
 2828 014f 0B       		.uleb128 0xb
 2829 0150 3B       		.uleb128 0x3b
 2830 0151 05       		.uleb128 0x5
 2831 0152 27       		.uleb128 0x27
 2832 0153 19       		.uleb128 0x19
 2833 0154 11       		.uleb128 0x11
 2834 0155 01       		.uleb128 0x1
 2835 0156 12       		.uleb128 0x12
 2836 0157 06       		.uleb128 0x6
 2837 0158 40       		.uleb128 0x40
 2838 0159 18       		.uleb128 0x18
 2839 015a 9642     		.uleb128 0x2116
 2840 015c 19       		.uleb128 0x19
 2841 015d 01       		.uleb128 0x1
 2842 015e 13       		.uleb128 0x13
 2843 015f 00       		.byte	0
 2844 0160 00       		.byte	0
 2845 0161 13       		.uleb128 0x13
 2846 0162 0F       		.uleb128 0xf
 2847 0163 00       		.byte	0
 2848 0164 0B       		.uleb128 0xb
 2849 0165 0B       		.uleb128 0xb
 2850 0166 49       		.uleb128 0x49
 2851 0167 13       		.uleb128 0x13
 2852 0168 00       		.byte	0
 2853 0169 00       		.byte	0
 2854 016a 14       		.uleb128 0x14
 2855 016b 26       		.uleb128 0x26
 2856 016c 00       		.byte	0
 2857 016d 49       		.uleb128 0x49
 2858 016e 13       		.uleb128 0x13
 2859 016f 00       		.byte	0
 2860 0170 00       		.byte	0
 2861 0171 15       		.uleb128 0x15
 2862 0172 0B       		.uleb128 0xb
 2863 0173 01       		.byte	0x1
 2864 0174 11       		.uleb128 0x11
 2865 0175 01       		.uleb128 0x1
 2866 0176 12       		.uleb128 0x12
 2867 0177 06       		.uleb128 0x6
 2868 0178 00       		.byte	0
 2869 0179 00       		.byte	0
 2870 017a 16       		.uleb128 0x16
 2871 017b 34       		.uleb128 0x34
 2872 017c 00       		.byte	0
 2873 017d 03       		.uleb128 0x3
 2874 017e 0E       		.uleb128 0xe
 2875 017f 3A       		.uleb128 0x3a
 2876 0180 0B       		.uleb128 0xb
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 80


 2877 0181 3B       		.uleb128 0x3b
 2878 0182 0B       		.uleb128 0xb
 2879 0183 49       		.uleb128 0x49
 2880 0184 13       		.uleb128 0x13
 2881 0185 3F       		.uleb128 0x3f
 2882 0186 19       		.uleb128 0x19
 2883 0187 02       		.uleb128 0x2
 2884 0188 18       		.uleb128 0x18
 2885 0189 00       		.byte	0
 2886 018a 00       		.byte	0
 2887 018b 17       		.uleb128 0x17
 2888 018c 01       		.uleb128 0x1
 2889 018d 01       		.byte	0x1
 2890 018e 49       		.uleb128 0x49
 2891 018f 13       		.uleb128 0x13
 2892 0190 01       		.uleb128 0x1
 2893 0191 13       		.uleb128 0x13
 2894 0192 00       		.byte	0
 2895 0193 00       		.byte	0
 2896 0194 18       		.uleb128 0x18
 2897 0195 21       		.uleb128 0x21
 2898 0196 00       		.byte	0
 2899 0197 49       		.uleb128 0x49
 2900 0198 13       		.uleb128 0x13
 2901 0199 2F       		.uleb128 0x2f
 2902 019a 0B       		.uleb128 0xb
 2903 019b 00       		.byte	0
 2904 019c 00       		.byte	0
 2905 019d 00       		.byte	0
 2906              		.section	.debug_aranges,"",%progbits
 2907 0000 FC000000 		.4byte	0xfc
 2908 0004 0200     		.2byte	0x2
 2909 0006 00000000 		.4byte	.Ldebug_info0
 2910 000a 04       		.byte	0x4
 2911 000b 00       		.byte	0
 2912 000c 0000     		.2byte	0
 2913 000e 0000     		.2byte	0
 2914 0010 00000000 		.4byte	.LFB0
 2915 0014 20000000 		.4byte	.LFE0-.LFB0
 2916 0018 00000000 		.4byte	.LFB1
 2917 001c 4C000000 		.4byte	.LFE1-.LFB1
 2918 0020 00000000 		.4byte	.LFB2
 2919 0024 64000000 		.4byte	.LFE2-.LFB2
 2920 0028 00000000 		.4byte	.LFB3
 2921 002c 5C000000 		.4byte	.LFE3-.LFB3
 2922 0030 00000000 		.4byte	.LFB4
 2923 0034 10000000 		.4byte	.LFE4-.LFB4
 2924 0038 00000000 		.4byte	.LFB5
 2925 003c 14000000 		.4byte	.LFE5-.LFB5
 2926 0040 00000000 		.4byte	.LFB6
 2927 0044 18000000 		.4byte	.LFE6-.LFB6
 2928 0048 00000000 		.4byte	.LFB7
 2929 004c 18000000 		.4byte	.LFE7-.LFB7
 2930 0050 00000000 		.4byte	.LFB8
 2931 0054 20000000 		.4byte	.LFE8-.LFB8
 2932 0058 00000000 		.4byte	.LFB9
 2933 005c 84000000 		.4byte	.LFE9-.LFB9
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 81


 2934 0060 00000000 		.4byte	.LFB10
 2935 0064 40000000 		.4byte	.LFE10-.LFB10
 2936 0068 00000000 		.4byte	.LFB11
 2937 006c A8000000 		.4byte	.LFE11-.LFB11
 2938 0070 00000000 		.4byte	.LFB12
 2939 0074 22000000 		.4byte	.LFE12-.LFB12
 2940 0078 00000000 		.4byte	.LFB13
 2941 007c 84000000 		.4byte	.LFE13-.LFB13
 2942 0080 00000000 		.4byte	.LFB14
 2943 0084 70000000 		.4byte	.LFE14-.LFB14
 2944 0088 00000000 		.4byte	.LFB15
 2945 008c 14000000 		.4byte	.LFE15-.LFB15
 2946 0090 00000000 		.4byte	.LFB16
 2947 0094 20000000 		.4byte	.LFE16-.LFB16
 2948 0098 00000000 		.4byte	.LFB17
 2949 009c 20000000 		.4byte	.LFE17-.LFB17
 2950 00a0 00000000 		.4byte	.LFB18
 2951 00a4 20000000 		.4byte	.LFE18-.LFB18
 2952 00a8 00000000 		.4byte	.LFB19
 2953 00ac 2C000000 		.4byte	.LFE19-.LFB19
 2954 00b0 00000000 		.4byte	.LFB20
 2955 00b4 18000000 		.4byte	.LFE20-.LFB20
 2956 00b8 00000000 		.4byte	.LFB21
 2957 00bc 34000000 		.4byte	.LFE21-.LFB21
 2958 00c0 00000000 		.4byte	.LFB22
 2959 00c4 40000000 		.4byte	.LFE22-.LFB22
 2960 00c8 00000000 		.4byte	.LFB23
 2961 00cc 40000000 		.4byte	.LFE23-.LFB23
 2962 00d0 00000000 		.4byte	.LFB24
 2963 00d4 30000000 		.4byte	.LFE24-.LFB24
 2964 00d8 00000000 		.4byte	.LFB25
 2965 00dc 44000000 		.4byte	.LFE25-.LFB25
 2966 00e0 00000000 		.4byte	.LFB26
 2967 00e4 40000000 		.4byte	.LFE26-.LFB26
 2968 00e8 00000000 		.4byte	.LFB27
 2969 00ec BC000000 		.4byte	.LFE27-.LFB27
 2970 00f0 00000000 		.4byte	.LFB28
 2971 00f4 14000000 		.4byte	.LFE28-.LFB28
 2972 00f8 00000000 		.4byte	0
 2973 00fc 00000000 		.4byte	0
 2974              		.section	.debug_ranges,"",%progbits
 2975              	.Ldebug_ranges0:
 2976 0000 00000000 		.4byte	.LFB0
 2977 0004 20000000 		.4byte	.LFE0
 2978 0008 00000000 		.4byte	.LFB1
 2979 000c 4C000000 		.4byte	.LFE1
 2980 0010 00000000 		.4byte	.LFB2
 2981 0014 64000000 		.4byte	.LFE2
 2982 0018 00000000 		.4byte	.LFB3
 2983 001c 5C000000 		.4byte	.LFE3
 2984 0020 00000000 		.4byte	.LFB4
 2985 0024 10000000 		.4byte	.LFE4
 2986 0028 00000000 		.4byte	.LFB5
 2987 002c 14000000 		.4byte	.LFE5
 2988 0030 00000000 		.4byte	.LFB6
 2989 0034 18000000 		.4byte	.LFE6
 2990 0038 00000000 		.4byte	.LFB7
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 82


 2991 003c 18000000 		.4byte	.LFE7
 2992 0040 00000000 		.4byte	.LFB8
 2993 0044 20000000 		.4byte	.LFE8
 2994 0048 00000000 		.4byte	.LFB9
 2995 004c 84000000 		.4byte	.LFE9
 2996 0050 00000000 		.4byte	.LFB10
 2997 0054 40000000 		.4byte	.LFE10
 2998 0058 00000000 		.4byte	.LFB11
 2999 005c A8000000 		.4byte	.LFE11
 3000 0060 00000000 		.4byte	.LFB12
 3001 0064 22000000 		.4byte	.LFE12
 3002 0068 00000000 		.4byte	.LFB13
 3003 006c 84000000 		.4byte	.LFE13
 3004 0070 00000000 		.4byte	.LFB14
 3005 0074 70000000 		.4byte	.LFE14
 3006 0078 00000000 		.4byte	.LFB15
 3007 007c 14000000 		.4byte	.LFE15
 3008 0080 00000000 		.4byte	.LFB16
 3009 0084 20000000 		.4byte	.LFE16
 3010 0088 00000000 		.4byte	.LFB17
 3011 008c 20000000 		.4byte	.LFE17
 3012 0090 00000000 		.4byte	.LFB18
 3013 0094 20000000 		.4byte	.LFE18
 3014 0098 00000000 		.4byte	.LFB19
 3015 009c 2C000000 		.4byte	.LFE19
 3016 00a0 00000000 		.4byte	.LFB20
 3017 00a4 18000000 		.4byte	.LFE20
 3018 00a8 00000000 		.4byte	.LFB21
 3019 00ac 34000000 		.4byte	.LFE21
 3020 00b0 00000000 		.4byte	.LFB22
 3021 00b4 40000000 		.4byte	.LFE22
 3022 00b8 00000000 		.4byte	.LFB23
 3023 00bc 40000000 		.4byte	.LFE23
 3024 00c0 00000000 		.4byte	.LFB24
 3025 00c4 30000000 		.4byte	.LFE24
 3026 00c8 00000000 		.4byte	.LFB25
 3027 00cc 44000000 		.4byte	.LFE25
 3028 00d0 00000000 		.4byte	.LFB26
 3029 00d4 40000000 		.4byte	.LFE26
 3030 00d8 00000000 		.4byte	.LFB27
 3031 00dc BC000000 		.4byte	.LFE27
 3032 00e0 00000000 		.4byte	.LFB28
 3033 00e4 14000000 		.4byte	.LFE28
 3034 00e8 00000000 		.4byte	0
 3035 00ec 00000000 		.4byte	0
 3036              		.section	.debug_line,"",%progbits
 3037              	.Ldebug_line0:
 3038 0000 33030000 		.section	.debug_str,"MS",%progbits,1
 3038      02004600 
 3038      00000201 
 3038      FB0E0D00 
 3038      01010101 
 3039              	.LASF10:
 3040 0000 75696E74 		.ascii	"uint16\000"
 3040      313600
 3041              	.LASF66:
 3042 0007 50756D70 		.ascii	"Pump_AL_initVar\000"
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 83


 3042      5F414C5F 
 3042      696E6974 
 3042      56617200 
 3043              	.LASF32:
 3044 0017 6C6F635F 		.ascii	"loc_rxBufferWrite\000"
 3044      72784275 
 3044      66666572 
 3044      57726974 
 3044      6500
 3045              	.LASF50:
 3046 0029 74784461 		.ascii	"txDataByte\000"
 3046      74614279 
 3046      746500
 3047              	.LASF51:
 3048 0034 50756D70 		.ascii	"Pump_AL_ReadTxStatus\000"
 3048      5F414C5F 
 3048      52656164 
 3048      54785374 
 3048      61747573 
 3049              	.LASF53:
 3050 0049 50756D70 		.ascii	"Pump_AL_PutString\000"
 3050      5F414C5F 
 3050      50757453 
 3050      7472696E 
 3050      6700
 3051              	.LASF42:
 3052 005b 50756D70 		.ascii	"Pump_AL_ClearRxBuffer\000"
 3052      5F414C5F 
 3052      436C6561 
 3052      72527842 
 3052      75666665 
 3053              	.LASF54:
 3054 0071 73747269 		.ascii	"string\000"
 3054      6E6700
 3055              	.LASF7:
 3056 0078 6C6F6E67 		.ascii	"long long unsigned int\000"
 3056      206C6F6E 
 3056      6720756E 
 3056      7369676E 
 3056      65642069 
 3057              	.LASF40:
 3058 008f 50756D70 		.ascii	"Pump_AL_GetRxBufferSize\000"
 3058      5F414C5F 
 3058      47657452 
 3058      78427566 
 3058      66657253 
 3059              	.LASF6:
 3060 00a7 6C6F6E67 		.ascii	"long long int\000"
 3060      206C6F6E 
 3060      6720696E 
 3060      7400
 3061              	.LASF0:
 3062 00b5 7369676E 		.ascii	"signed char\000"
 3062      65642063 
 3062      68617200 
 3063              	.LASF71:
 3064 00c1 50756D70 		.ascii	"Pump_AL_rxBufferOverflow\000"
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 84


 3064      5F414C5F 
 3064      72784275 
 3064      66666572 
 3064      4F766572 
 3065              	.LASF27:
 3066 00da 50756D70 		.ascii	"Pump_AL_SetRxInterruptMode\000"
 3066      5F414C5F 
 3066      53657452 
 3066      78496E74 
 3066      65727275 
 3067              	.LASF16:
 3068 00f5 72656738 		.ascii	"reg8\000"
 3068      00
 3069              	.LASF4:
 3070 00fa 6C6F6E67 		.ascii	"long int\000"
 3070      20696E74 
 3070      00
 3071              	.LASF52:
 3072 0103 50756D70 		.ascii	"Pump_AL_PutChar\000"
 3072      5F414C5F 
 3072      50757443 
 3072      68617200 
 3073              	.LASF9:
 3074 0113 75696E74 		.ascii	"uint8\000"
 3074      3800
 3075              	.LASF13:
 3076 0119 646F7562 		.ascii	"double\000"
 3076      6C6500
 3077              	.LASF44:
 3078 0120 61646472 		.ascii	"addressMode\000"
 3078      6573734D 
 3078      6F646500 
 3079              	.LASF22:
 3080 012c 50756D70 		.ascii	"Pump_AL_Stop\000"
 3080      5F414C5F 
 3080      53746F70 
 3080      00
 3081              	.LASF11:
 3082 0139 75696E74 		.ascii	"uint32\000"
 3082      333200
 3083              	.LASF28:
 3084 0140 636F6E74 		.ascii	"control\000"
 3084      726F6C00 
 3085              	.LASF25:
 3086 0148 50756D70 		.ascii	"Pump_AL_EnableRxInt\000"
 3086      5F414C5F 
 3086      456E6162 
 3086      6C655278 
 3086      496E7400 
 3087              	.LASF62:
 3088 015c 7265744D 		.ascii	"retMode\000"
 3088      6F646500 
 3089              	.LASF56:
 3090 0164 50756D70 		.ascii	"Pump_AL_PutArray\000"
 3090      5F414C5F 
 3090      50757441 
 3090      72726179 
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 85


 3090      00
 3091              	.LASF8:
 3092 0175 756E7369 		.ascii	"unsigned int\000"
 3092      676E6564 
 3092      20696E74 
 3092      00
 3093              	.LASF39:
 3094 0182 50756D70 		.ascii	"Pump_AL_GetByte\000"
 3094      5F414C5F 
 3094      47657442 
 3094      79746500 
 3095              	.LASF58:
 3096 0192 50756D70 		.ascii	"Pump_AL_PutCRLF\000"
 3096      5F414C5F 
 3096      50757443 
 3096      524C4600 
 3097              	.LASF21:
 3098 01a2 50756D70 		.ascii	"Pump_AL_Enable\000"
 3098      5F414C5F 
 3098      456E6162 
 3098      6C6500
 3099              	.LASF5:
 3100 01b1 6C6F6E67 		.ascii	"long unsigned int\000"
 3100      20756E73 
 3100      69676E65 
 3100      6420696E 
 3100      7400
 3101              	.LASF69:
 3102 01c3 50756D70 		.ascii	"Pump_AL_rxBufferWrite\000"
 3102      5F414C5F 
 3102      72784275 
 3102      66666572 
 3102      57726974 
 3103              	.LASF74:
 3104 01d9 433A5C55 		.ascii	"C:\\Users\\Lenovo\\Desktop\\Hardware\\Software Mux\\"
 3104      73657273 
 3104      5C4C656E 
 3104      6F766F5C 
 3104      4465736B 
 3105 0207 4D757820 		.ascii	"Mux Advance Encore\\MuxAdvance.cydsn\000"
 3105      41647661 
 3105      6E636520 
 3105      456E636F 
 3105      72655C4D 
 3106              	.LASF41:
 3107 022b 73697A65 		.ascii	"size\000"
 3107      00
 3108              	.LASF3:
 3109 0230 73686F72 		.ascii	"short unsigned int\000"
 3109      7420756E 
 3109      7369676E 
 3109      65642069 
 3109      6E7400
 3110              	.LASF31:
 3111 0243 6C6F635F 		.ascii	"loc_rxBufferRead\000"
 3111      72784275 
 3111      66666572 
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 86


 3111      52656164 
 3111      00
 3112              	.LASF64:
 3113 0254 74785F70 		.ascii	"tx_period\000"
 3113      6572696F 
 3113      6400
 3114              	.LASF29:
 3115 025e 696E7453 		.ascii	"intSrc\000"
 3115      726300
 3116              	.LASF60:
 3117 0265 50756D70 		.ascii	"Pump_AL_ClearTxBuffer\000"
 3117      5F414C5F 
 3117      436C6561 
 3117      72547842 
 3117      75666665 
 3118              	.LASF48:
 3119 027b 50756D70 		.ascii	"Pump_AL_SetTxInterruptMode\000"
 3119      5F414C5F 
 3119      53657454 
 3119      78496E74 
 3119      65727275 
 3120              	.LASF19:
 3121 0296 50756D70 		.ascii	"Pump_AL_Start\000"
 3121      5F414C5F 
 3121      53746172 
 3121      7400
 3122              	.LASF65:
 3123 02a4 50756D70 		.ascii	"Pump_AL_SetTxAddressMode\000"
 3123      5F414C5F 
 3123      53657454 
 3123      78416464 
 3123      72657373 
 3124              	.LASF17:
 3125 02bd 72656733 		.ascii	"reg32\000"
 3125      3200
 3126              	.LASF63:
 3127 02c3 746D7053 		.ascii	"tmpStat\000"
 3127      74617400 
 3128              	.LASF18:
 3129 02cb 73697A65 		.ascii	"sizetype\000"
 3129      74797065 
 3129      00
 3130              	.LASF46:
 3131 02d4 61646472 		.ascii	"address\000"
 3131      65737300 
 3132              	.LASF72:
 3133 02dc 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 3133      4320342E 
 3133      392E3320 
 3133      32303135 
 3133      30333033 
 3134 030f 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 3134      20726576 
 3134      6973696F 
 3134      6E203232 
 3134      31323230 
 3135 0342 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 87


 3135      66756E63 
 3135      74696F6E 
 3135      2D736563 
 3135      74696F6E 
 3136              	.LASF37:
 3137 036a 72785374 		.ascii	"rxStatus\000"
 3137      61747573 
 3137      00
 3138              	.LASF12:
 3139 0373 666C6F61 		.ascii	"float\000"
 3139      7400
 3140              	.LASF33:
 3141 0379 50756D70 		.ascii	"Pump_AL_ReadRxData\000"
 3141      5F414C5F 
 3141      52656164 
 3141      52784461 
 3141      746100
 3142              	.LASF73:
 3143 038c 2E5C4765 		.ascii	".\\Generated_Source\\PSoC5\\Pump_AL.c\000"
 3143      6E657261 
 3143      7465645F 
 3143      536F7572 
 3143      63655C50 
 3144              	.LASF47:
 3145 03af 50756D70 		.ascii	"Pump_AL_SetRxAddress2\000"
 3145      5F414C5F 
 3145      53657452 
 3145      78416464 
 3145      72657373 
 3146              	.LASF34:
 3147 03c5 50756D70 		.ascii	"Pump_AL_ReadRxStatus\000"
 3147      5F414C5F 
 3147      52656164 
 3147      52785374 
 3147      61747573 
 3148              	.LASF1:
 3149 03da 756E7369 		.ascii	"unsigned char\000"
 3149      676E6564 
 3149      20636861 
 3149      7200
 3150              	.LASF20:
 3151 03e8 50756D70 		.ascii	"Pump_AL_Init\000"
 3151      5F414C5F 
 3151      496E6974 
 3151      00
 3152              	.LASF2:
 3153 03f5 73686F72 		.ascii	"short int\000"
 3153      7420696E 
 3153      7400
 3154              	.LASF43:
 3155 03ff 50756D70 		.ascii	"Pump_AL_SetRxAddressMode\000"
 3155      5F414C5F 
 3155      53657452 
 3155      78416464 
 3155      72657373 
 3156              	.LASF67:
 3157 0418 50756D70 		.ascii	"Pump_AL_rxBuffer\000"
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 88


 3157      5F414C5F 
 3157      72784275 
 3157      66666572 
 3157      00
 3158              	.LASF57:
 3159 0429 62797465 		.ascii	"byteCount\000"
 3159      436F756E 
 3159      7400
 3160              	.LASF30:
 3161 0433 72784461 		.ascii	"rxData\000"
 3161      746100
 3162              	.LASF49:
 3163 043a 50756D70 		.ascii	"Pump_AL_WriteTxData\000"
 3163      5F414C5F 
 3163      57726974 
 3163      65547844 
 3163      61746100 
 3164              	.LASF15:
 3165 044e 63686172 		.ascii	"char\000"
 3165      00
 3166              	.LASF26:
 3167 0453 50756D70 		.ascii	"Pump_AL_DisableRxInt\000"
 3167      5F414C5F 
 3167      44697361 
 3167      626C6552 
 3167      78496E74 
 3168              	.LASF14:
 3169 0468 63686172 		.ascii	"char8\000"
 3169      3800
 3170              	.LASF61:
 3171 046e 50756D70 		.ascii	"Pump_AL_SendBreak\000"
 3171      5F414C5F 
 3171      53656E64 
 3171      42726561 
 3171      6B00
 3172              	.LASF24:
 3173 0480 50756D70 		.ascii	"Pump_AL_WriteControlRegister\000"
 3173      5F414C5F 
 3173      57726974 
 3173      65436F6E 
 3173      74726F6C 
 3174              	.LASF36:
 3175 049d 50756D70 		.ascii	"Pump_AL_GetChar\000"
 3175      5F414C5F 
 3175      47657443 
 3175      68617200 
 3176              	.LASF23:
 3177 04ad 656E6162 		.ascii	"enableInterrupts\000"
 3177      6C65496E 
 3177      74657272 
 3177      75707473 
 3177      00
 3178              	.LASF59:
 3179 04be 50756D70 		.ascii	"Pump_AL_GetTxBufferSize\000"
 3179      5F414C5F 
 3179      47657454 
 3179      78427566 
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccRzx2no.s 			page 89


 3179      66657253 
 3180              	.LASF35:
 3181 04d6 73746174 		.ascii	"status\000"
 3181      757300
 3182              	.LASF38:
 3183 04dd 50756D70 		.ascii	"Pump_AL_ReadControlRegister\000"
 3183      5F414C5F 
 3183      52656164 
 3183      436F6E74 
 3183      726F6C52 
 3184              	.LASF55:
 3185 04f9 6275665F 		.ascii	"buf_index\000"
 3185      696E6465 
 3185      7800
 3186              	.LASF45:
 3187 0503 50756D70 		.ascii	"Pump_AL_SetRxAddress1\000"
 3187      5F414C5F 
 3187      53657452 
 3187      78416464 
 3187      72657373 
 3188              	.LASF70:
 3189 0519 50756D70 		.ascii	"Pump_AL_rxBufferLoopDetect\000"
 3189      5F414C5F 
 3189      72784275 
 3189      66666572 
 3189      4C6F6F70 
 3190              	.LASF68:
 3191 0534 50756D70 		.ascii	"Pump_AL_rxBufferRead\000"
 3191      5F414C5F 
 3191      72784275 
 3191      66666572 
 3191      52656164 
 3192              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
