ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\cc2uLX6d.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"Serial_Programmer.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.Serial_Programmer_Load,"ax",%progbits
  19              		.align	2
  20              		.global	Serial_Programmer_Load
  21              		.thumb
  22              		.thumb_func
  23              		.type	Serial_Programmer_Load, %function
  24              	Serial_Programmer_Load:
  25              	.LFB0:
  26              		.file 1 ".\\Generated_Source\\PSoC5\\Serial_Programmer.c"
   1:.\Generated_Source\PSoC5/Serial_Programmer.c **** /****************************************************************************//**
   2:.\Generated_Source\PSoC5/Serial_Programmer.c **** * \file Serial_Programmer.c
   3:.\Generated_Source\PSoC5/Serial_Programmer.c **** * \version 1.40
   4:.\Generated_Source\PSoC5/Serial_Programmer.c **** *
   5:.\Generated_Source\PSoC5/Serial_Programmer.c **** * \brief
   6:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   Provides an API for the Bootloadable application.
   7:.\Generated_Source\PSoC5/Serial_Programmer.c **** *
   8:.\Generated_Source\PSoC5/Serial_Programmer.c **** ********************************************************************************
   9:.\Generated_Source\PSoC5/Serial_Programmer.c **** * \copyright
  10:.\Generated_Source\PSoC5/Serial_Programmer.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  11:.\Generated_Source\PSoC5/Serial_Programmer.c **** * You may use this file only in accordance with the license, terms, conditions,
  12:.\Generated_Source\PSoC5/Serial_Programmer.c **** * disclaimers, and limitations in the end user license agreement accompanying
  13:.\Generated_Source\PSoC5/Serial_Programmer.c **** * the software package with which this file was provided.
  14:.\Generated_Source\PSoC5/Serial_Programmer.c **** *******************************************************************************/
  15:.\Generated_Source\PSoC5/Serial_Programmer.c **** 
  16:.\Generated_Source\PSoC5/Serial_Programmer.c **** #include "Serial_Programmer.h"
  17:.\Generated_Source\PSoC5/Serial_Programmer.c **** 
  18:.\Generated_Source\PSoC5/Serial_Programmer.c **** /**
  19:.\Generated_Source\PSoC5/Serial_Programmer.c ****  \defgroup functions_group Functions
  20:.\Generated_Source\PSoC5/Serial_Programmer.c ****  @{
  21:.\Generated_Source\PSoC5/Serial_Programmer.c **** */
  22:.\Generated_Source\PSoC5/Serial_Programmer.c **** 
  23:.\Generated_Source\PSoC5/Serial_Programmer.c **** #if (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)
  24:.\Generated_Source\PSoC5/Serial_Programmer.c **** static cystatus Serial_Programmer_WriteFlashByte(const uint32 address, const uint8 inputValue) CYLA
  25:.\Generated_Source\PSoC5/Serial_Programmer.c ****                                ;
  26:.\Generated_Source\PSoC5/Serial_Programmer.c **** #endif /*(CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)*/
  27:.\Generated_Source\PSoC5/Serial_Programmer.c **** 
  28:.\Generated_Source\PSoC5/Serial_Programmer.c **** /*******************************************************************************
  29:.\Generated_Source\PSoC5/Serial_Programmer.c **** * Function Name: Serial_Programmer_Load
  30:.\Generated_Source\PSoC5/Serial_Programmer.c **** ****************************************************************************//**
  31:.\Generated_Source\PSoC5/Serial_Programmer.c **** *
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\cc2uLX6d.s 			page 2


  32:.\Generated_Source\PSoC5/Serial_Programmer.c **** * \brief
  33:.\Generated_Source\PSoC5/Serial_Programmer.c **** *  Schedules the Bootloader/Launcher to be launched and then performs
  34:.\Generated_Source\PSoC5/Serial_Programmer.c **** *  a software reset to launch it
  35:.\Generated_Source\PSoC5/Serial_Programmer.c **** *
  36:.\Generated_Source\PSoC5/Serial_Programmer.c **** * \return
  37:.\Generated_Source\PSoC5/Serial_Programmer.c **** *  This method will never return. It will load a new application and reset
  38:.\Generated_Source\PSoC5/Serial_Programmer.c **** *  the device.
  39:.\Generated_Source\PSoC5/Serial_Programmer.c **** *
  40:.\Generated_Source\PSoC5/Serial_Programmer.c **** *******************************************************************************/
  41:.\Generated_Source\PSoC5/Serial_Programmer.c **** void Serial_Programmer_Load(void) 
  42:.\Generated_Source\PSoC5/Serial_Programmer.c **** {
  27              		.loc 1 42 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
  43:.\Generated_Source\PSoC5/Serial_Programmer.c ****     /* Schedule Bootloader to start after reset */
  44:.\Generated_Source\PSoC5/Serial_Programmer.c ****     Serial_Programmer_SET_RUN_TYPE(Serial_Programmer_SCHEDULE_BTLDR);
  37              		.loc 1 44 0
  38 0004 024B     		ldr	r3, .L2
  39 0006 4022     		movs	r2, #64
  40 0008 1A70     		strb	r2, [r3]
  45:.\Generated_Source\PSoC5/Serial_Programmer.c **** 
  46:.\Generated_Source\PSoC5/Serial_Programmer.c ****     CySoftwareReset();
  41              		.loc 1 46 0
  42 000a FFF7FEFF 		bl	CySoftwareReset
  47:.\Generated_Source\PSoC5/Serial_Programmer.c **** }
  43              		.loc 1 47 0
  44 000e 80BD     		pop	{r7, pc}
  45              	.L3:
  46              		.align	2
  47              	.L2:
  48 0010 FA460040 		.word	1073759994
  49              		.cfi_endproc
  50              	.LFE0:
  51              		.size	Serial_Programmer_Load, .-Serial_Programmer_Load
  52              		.section	.text.Serial_Programmer_SetFlashByte,"ax",%progbits
  53              		.align	2
  54              		.global	Serial_Programmer_SetFlashByte
  55              		.thumb
  56              		.thumb_func
  57              		.type	Serial_Programmer_SetFlashByte, %function
  58              	Serial_Programmer_SetFlashByte:
  59              	.LFB1:
  48:.\Generated_Source\PSoC5/Serial_Programmer.c **** 
  49:.\Generated_Source\PSoC5/Serial_Programmer.c **** #if (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)
  50:.\Generated_Source\PSoC5/Serial_Programmer.c **** /*******************************************************************************
  51:.\Generated_Source\PSoC5/Serial_Programmer.c **** * Function Name: Serial_Programmer_GetActiveApplication
  52:.\Generated_Source\PSoC5/Serial_Programmer.c **** ****************************************************************************//**
  53:.\Generated_Source\PSoC5/Serial_Programmer.c **** *
  54:.\Generated_Source\PSoC5/Serial_Programmer.c **** * \brief
  55:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   Gets the application which will be loaded after a next reset event.
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\cc2uLX6d.s 			page 3


  56:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   NOTE Intended for the combination project type ONLY!
  57:.\Generated_Source\PSoC5/Serial_Programmer.c **** *
  58:.\Generated_Source\PSoC5/Serial_Programmer.c **** * \return 
  59:.\Generated_Source\PSoC5/Serial_Programmer.c **** *  A number of the current active application set in the metadata section.
  60:.\Generated_Source\PSoC5/Serial_Programmer.c **** *  \n  0 - app#0 is set as active.
  61:.\Generated_Source\PSoC5/Serial_Programmer.c **** *  \n  1 - app#1 is set as active.
  62:.\Generated_Source\PSoC5/Serial_Programmer.c **** *
  63:.\Generated_Source\PSoC5/Serial_Programmer.c **** * \note If neither of the applications is set active, then the API returns 0x02.
  64:.\Generated_Source\PSoC5/Serial_Programmer.c **** *
  65:.\Generated_Source\PSoC5/Serial_Programmer.c **** *******************************************************************************/
  66:.\Generated_Source\PSoC5/Serial_Programmer.c **** uint8 Serial_Programmer_GetActiveApplication(void) CYSMALL \
  67:.\Generated_Source\PSoC5/Serial_Programmer.c ****                           
  68:.\Generated_Source\PSoC5/Serial_Programmer.c **** {   
  69:.\Generated_Source\PSoC5/Serial_Programmer.c ****     uint8 result = Serial_Programmer_MD_BTLDB_ACTIVE_NONE;
  70:.\Generated_Source\PSoC5/Serial_Programmer.c ****     
  71:.\Generated_Source\PSoC5/Serial_Programmer.c ****     if (0u != Serial_Programmer_GET_CODE_DATA( \
  72:.\Generated_Source\PSoC5/Serial_Programmer.c ****               Serial_Programmer_MD_BTLDB_ACTIVE_OFFSET(Serial_Programmer_MD_BTLDB_ACTIVE_0))) 
  73:.\Generated_Source\PSoC5/Serial_Programmer.c ****     {
  74:.\Generated_Source\PSoC5/Serial_Programmer.c ****         result = Serial_Programmer_MD_BTLDB_ACTIVE_0;
  75:.\Generated_Source\PSoC5/Serial_Programmer.c ****     }
  76:.\Generated_Source\PSoC5/Serial_Programmer.c ****     else if (0u != Serial_Programmer_GET_CODE_DATA( \
  77:.\Generated_Source\PSoC5/Serial_Programmer.c ****                    Serial_Programmer_MD_BTLDB_ACTIVE_OFFSET(Serial_Programmer_MD_BTLDB_ACTIVE_1)))
  78:.\Generated_Source\PSoC5/Serial_Programmer.c ****     {
  79:.\Generated_Source\PSoC5/Serial_Programmer.c ****         result = Serial_Programmer_MD_BTLDB_ACTIVE_1;    
  80:.\Generated_Source\PSoC5/Serial_Programmer.c ****     }
  81:.\Generated_Source\PSoC5/Serial_Programmer.c ****     else
  82:.\Generated_Source\PSoC5/Serial_Programmer.c ****     {
  83:.\Generated_Source\PSoC5/Serial_Programmer.c ****         /*Do nothing, result is none*/
  84:.\Generated_Source\PSoC5/Serial_Programmer.c ****     }
  85:.\Generated_Source\PSoC5/Serial_Programmer.c ****     
  86:.\Generated_Source\PSoC5/Serial_Programmer.c ****     return (result);
  87:.\Generated_Source\PSoC5/Serial_Programmer.c **** }
  88:.\Generated_Source\PSoC5/Serial_Programmer.c **** 
  89:.\Generated_Source\PSoC5/Serial_Programmer.c **** /*******************************************************************************
  90:.\Generated_Source\PSoC5/Serial_Programmer.c **** * Function Name: Serial_Programmer_SetActiveApplication
  91:.\Generated_Source\PSoC5/Serial_Programmer.c **** ****************************************************************************//**
  92:.\Generated_Source\PSoC5/Serial_Programmer.c **** *
  93:.\Generated_Source\PSoC5/Serial_Programmer.c **** * \brief 
  94:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   Sets the application which will be loaded after a next reset event.          
  95:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   
  96:.\Generated_Source\PSoC5/Serial_Programmer.c **** * \details
  97:.\Generated_Source\PSoC5/Serial_Programmer.c **** * Theory: 
  98:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   This API sets in the Flash (metadata section) the given active application 
  99:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   number.
 100:.\Generated_Source\PSoC5/Serial_Programmer.c **** *          
 101:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   NOTE The active application number is not set directly, but the boolean 
 102:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   mark instead means that the application is active or not for the relative 
 103:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   metadata. Both metadata sections are updated. For example, if the second 
 104:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   application is to be set active, then in the metadata section for the first 
 105:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   application there will be a "0" written, which means that it is not active, and 
 106:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   for the second metadata section there will be a "1" written, which means that it is 
 107:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   active. 
 108:.\Generated_Source\PSoC5/Serial_Programmer.c **** *
 109:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   NOTE Intended for the combination project type ONLY!
 110:.\Generated_Source\PSoC5/Serial_Programmer.c **** *
 111:.\Generated_Source\PSoC5/Serial_Programmer.c **** * \param appId  
 112:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   The active application number to be written to flash (metadata section) 
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\cc2uLX6d.s 			page 4


 113:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   NOTE Possible values are:
 114:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   0 - for the first application
 115:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   1 - for the second application.
 116:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   Any other number is considered invalid. 
 117:.\Generated_Source\PSoC5/Serial_Programmer.c **** *
 118:.\Generated_Source\PSoC5/Serial_Programmer.c **** * \return 
 119:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   A status of writing to flash operation.
 120:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   \n CYRET_SUCCESS - Returned if appId was successfully changed. 
 121:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   \n CYRET_BAD_PARAM - Returned if the parameter appID passed to the function has the 
 122:.\Generated_Source\PSoC5/Serial_Programmer.c **** *                       same value as the active application ID. 
 123:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   \note - The other non-zero value is considered as a failure during writing to flash.  
 124:.\Generated_Source\PSoC5/Serial_Programmer.c **** *
 125:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   \note - This API does not update Bootloader_activeApp variable.
 126:.\Generated_Source\PSoC5/Serial_Programmer.c **** *
 127:.\Generated_Source\PSoC5/Serial_Programmer.c **** *******************************************************************************/
 128:.\Generated_Source\PSoC5/Serial_Programmer.c **** cystatus Serial_Programmer_SetActiveApplication(uint8 appId) CYSMALL \
 129:.\Generated_Source\PSoC5/Serial_Programmer.c ****                 
 130:.\Generated_Source\PSoC5/Serial_Programmer.c **** {
 131:.\Generated_Source\PSoC5/Serial_Programmer.c ****     cystatus result = CYRET_SUCCESS;
 132:.\Generated_Source\PSoC5/Serial_Programmer.c **** 
 133:.\Generated_Source\PSoC5/Serial_Programmer.c ****     uint8 CYDATA idx;
 134:.\Generated_Source\PSoC5/Serial_Programmer.c ****     
 135:.\Generated_Source\PSoC5/Serial_Programmer.c ****     /* If invalid application number */
 136:.\Generated_Source\PSoC5/Serial_Programmer.c ****     if (appId > Serial_Programmer_MD_BTLDB_ACTIVE_1)
 137:.\Generated_Source\PSoC5/Serial_Programmer.c ****     {
 138:.\Generated_Source\PSoC5/Serial_Programmer.c ****         result = CYRET_BAD_PARAM;
 139:.\Generated_Source\PSoC5/Serial_Programmer.c ****     }
 140:.\Generated_Source\PSoC5/Serial_Programmer.c ****     else
 141:.\Generated_Source\PSoC5/Serial_Programmer.c ****     {
 142:.\Generated_Source\PSoC5/Serial_Programmer.c ****         /* If appID has same value as active application ID */
 143:.\Generated_Source\PSoC5/Serial_Programmer.c ****         if (1u == Serial_Programmer_GET_CODE_DATA(Serial_Programmer_MD_BTLDB_ACTIVE_OFFSET(appId)))
 144:.\Generated_Source\PSoC5/Serial_Programmer.c ****         {
 145:.\Generated_Source\PSoC5/Serial_Programmer.c ****             result = CYRET_BAD_PARAM;
 146:.\Generated_Source\PSoC5/Serial_Programmer.c ****         }
 147:.\Generated_Source\PSoC5/Serial_Programmer.c ****         else
 148:.\Generated_Source\PSoC5/Serial_Programmer.c ****         {
 149:.\Generated_Source\PSoC5/Serial_Programmer.c ****             /* Updating metadata section */
 150:.\Generated_Source\PSoC5/Serial_Programmer.c ****             for(idx = 0u; idx < Serial_Programmer_MAX_NUM_OF_BTLDB; idx++)
 151:.\Generated_Source\PSoC5/Serial_Programmer.c ****             {
 152:.\Generated_Source\PSoC5/Serial_Programmer.c ****                 result |= Serial_Programmer_WriteFlashByte((uint32) Serial_Programmer_MD_BTLDB_ACTI
 153:.\Generated_Source\PSoC5/Serial_Programmer.c ****                                                                                             (uint8)
 154:.\Generated_Source\PSoC5/Serial_Programmer.c ****             }
 155:.\Generated_Source\PSoC5/Serial_Programmer.c ****         }
 156:.\Generated_Source\PSoC5/Serial_Programmer.c ****     }
 157:.\Generated_Source\PSoC5/Serial_Programmer.c ****     
 158:.\Generated_Source\PSoC5/Serial_Programmer.c ****     return (result);
 159:.\Generated_Source\PSoC5/Serial_Programmer.c **** }
 160:.\Generated_Source\PSoC5/Serial_Programmer.c **** 
 161:.\Generated_Source\PSoC5/Serial_Programmer.c **** /*******************************************************************************
 162:.\Generated_Source\PSoC5/Serial_Programmer.c **** * Function Name: Serial_Programmer_WriteFlashByte
 163:.\Generated_Source\PSoC5/Serial_Programmer.c **** ****************************************************************************//**
 164:.\Generated_Source\PSoC5/Serial_Programmer.c **** *
 165:.\Generated_Source\PSoC5/Serial_Programmer.c **** * \brief 
 166:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   This API writes to flash the specified data.
 167:.\Generated_Source\PSoC5/Serial_Programmer.c **** *
 168:.\Generated_Source\PSoC5/Serial_Programmer.c **** * \param address 
 169:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   The address in flash.
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\cc2uLX6d.s 			page 5


 170:.\Generated_Source\PSoC5/Serial_Programmer.c **** *
 171:.\Generated_Source\PSoC5/Serial_Programmer.c **** * \param inputValue 
 172:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   One-byte data.
 173:.\Generated_Source\PSoC5/Serial_Programmer.c **** *
 174:.\Generated_Source\PSoC5/Serial_Programmer.c **** * \return 
 175:.\Generated_Source\PSoC5/Serial_Programmer.c **** *   A status of the writing to flash procedure.
 176:.\Generated_Source\PSoC5/Serial_Programmer.c **** *
 177:.\Generated_Source\PSoC5/Serial_Programmer.c **** *******************************************************************************/
 178:.\Generated_Source\PSoC5/Serial_Programmer.c **** static cystatus Serial_Programmer_WriteFlashByte(const uint32 address, const uint8 inputValue) CYLA
 179:.\Generated_Source\PSoC5/Serial_Programmer.c ****                                
 180:.\Generated_Source\PSoC5/Serial_Programmer.c **** {
 181:.\Generated_Source\PSoC5/Serial_Programmer.c ****     cystatus result = CYRET_SUCCESS;
 182:.\Generated_Source\PSoC5/Serial_Programmer.c ****     uint32 flsAddr = address - CYDEV_FLASH_BASE;
 183:.\Generated_Source\PSoC5/Serial_Programmer.c ****     uint8  rowData[CYDEV_FLS_ROW_SIZE];
 184:.\Generated_Source\PSoC5/Serial_Programmer.c **** 
 185:.\Generated_Source\PSoC5/Serial_Programmer.c ****     #if !(CY_PSOC4)
 186:.\Generated_Source\PSoC5/Serial_Programmer.c ****         uint8 arrayId = ( uint8 )(flsAddr / CYDEV_FLS_SECTOR_SIZE);
 187:.\Generated_Source\PSoC5/Serial_Programmer.c ****     #endif  /* !(CY_PSOC4) */
 188:.\Generated_Source\PSoC5/Serial_Programmer.c **** 
 189:.\Generated_Source\PSoC5/Serial_Programmer.c ****     #if (CY_PSOC4)
 190:.\Generated_Source\PSoC5/Serial_Programmer.c ****         uint16 rowNum = ( uint16 )(flsAddr / CYDEV_FLS_ROW_SIZE);
 191:.\Generated_Source\PSoC5/Serial_Programmer.c ****     #else
 192:.\Generated_Source\PSoC5/Serial_Programmer.c ****         uint16 rowNum = ( uint16 )((flsAddr % CYDEV_FLS_SECTOR_SIZE) / CYDEV_FLS_ROW_SIZE);
 193:.\Generated_Source\PSoC5/Serial_Programmer.c ****     #endif  /* (CY_PSOC4) */
 194:.\Generated_Source\PSoC5/Serial_Programmer.c **** 
 195:.\Generated_Source\PSoC5/Serial_Programmer.c ****     uint32 baseAddr = address - (address % CYDEV_FLS_ROW_SIZE);
 196:.\Generated_Source\PSoC5/Serial_Programmer.c ****     uint16 idx;
 197:.\Generated_Source\PSoC5/Serial_Programmer.c **** 
 198:.\Generated_Source\PSoC5/Serial_Programmer.c ****     for(idx = 0u; idx < CYDEV_FLS_ROW_SIZE; idx++)
 199:.\Generated_Source\PSoC5/Serial_Programmer.c ****     {
 200:.\Generated_Source\PSoC5/Serial_Programmer.c ****         rowData[idx] = (uint8)Serial_Programmer_GET_CODE_DATA(baseAddr + idx);
 201:.\Generated_Source\PSoC5/Serial_Programmer.c ****     }
 202:.\Generated_Source\PSoC5/Serial_Programmer.c **** 
 203:.\Generated_Source\PSoC5/Serial_Programmer.c ****     rowData[address % CYDEV_FLS_ROW_SIZE] = inputValue;
 204:.\Generated_Source\PSoC5/Serial_Programmer.c **** 
 205:.\Generated_Source\PSoC5/Serial_Programmer.c ****     #if(CY_PSOC4)
 206:.\Generated_Source\PSoC5/Serial_Programmer.c ****         result = CySysFlashWriteRow((uint32) rowNum, rowData);
 207:.\Generated_Source\PSoC5/Serial_Programmer.c ****     #else
 208:.\Generated_Source\PSoC5/Serial_Programmer.c ****         result = CyWriteRowData(arrayId, rowNum, rowData);
 209:.\Generated_Source\PSoC5/Serial_Programmer.c ****     #endif  /* (CY_PSOC4) */
 210:.\Generated_Source\PSoC5/Serial_Programmer.c **** 
 211:.\Generated_Source\PSoC5/Serial_Programmer.c ****     #if(CY_PSOC5)
 212:.\Generated_Source\PSoC5/Serial_Programmer.c ****         /***************************************************************************
 213:.\Generated_Source\PSoC5/Serial_Programmer.c ****         * When writing to flash, data in the instruction cache can become stale.
 214:.\Generated_Source\PSoC5/Serial_Programmer.c ****         * Therefore, the cache data does not correlate to the data just written to
 215:.\Generated_Source\PSoC5/Serial_Programmer.c ****         * flash. A call to CyFlushCache() is required to invalidate the data in the
 216:.\Generated_Source\PSoC5/Serial_Programmer.c ****         * cache and force fresh information to be loaded from flash.
 217:.\Generated_Source\PSoC5/Serial_Programmer.c ****         ***************************************************************************/
 218:.\Generated_Source\PSoC5/Serial_Programmer.c ****         CyFlushCache();
 219:.\Generated_Source\PSoC5/Serial_Programmer.c ****     #endif /* (CY_PSOC5) */
 220:.\Generated_Source\PSoC5/Serial_Programmer.c ****     return (result);
 221:.\Generated_Source\PSoC5/Serial_Programmer.c **** }
 222:.\Generated_Source\PSoC5/Serial_Programmer.c **** #endif /*(CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)*/
 223:.\Generated_Source\PSoC5/Serial_Programmer.c **** /** @} functions_group */
 224:.\Generated_Source\PSoC5/Serial_Programmer.c **** 
 225:.\Generated_Source\PSoC5/Serial_Programmer.c **** /*******************************************************************************
 226:.\Generated_Source\PSoC5/Serial_Programmer.c **** * The following code is OBSOLETE and must not be used.
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\cc2uLX6d.s 			page 6


 227:.\Generated_Source\PSoC5/Serial_Programmer.c **** *******************************************************************************/
 228:.\Generated_Source\PSoC5/Serial_Programmer.c **** void Serial_Programmer_SetFlashByte(uint32 address, uint8 runType) 
 229:.\Generated_Source\PSoC5/Serial_Programmer.c **** {
  60              		.loc 1 229 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 280
  63              		@ frame_needed = 1, uses_anonymous_args = 0
  64 0000 80B5     		push	{r7, lr}
  65              		.cfi_def_cfa_offset 8
  66              		.cfi_offset 7, -8
  67              		.cfi_offset 14, -4
  68 0002 C6B0     		sub	sp, sp, #280
  69              		.cfi_def_cfa_offset 288
  70 0004 00AF     		add	r7, sp, #0
  71              		.cfi_def_cfa_register 7
  72 0006 3B1D     		adds	r3, r7, #4
  73 0008 1860     		str	r0, [r3]
  74 000a 0A46     		mov	r2, r1
  75 000c FB1C     		adds	r3, r7, #3
  76 000e 1A70     		strb	r2, [r3]
 230:.\Generated_Source\PSoC5/Serial_Programmer.c ****     uint32 flsAddr = address - CYDEV_FLASH_BASE;
  77              		.loc 1 230 0
  78 0010 3B1D     		adds	r3, r7, #4
  79 0012 1B68     		ldr	r3, [r3]
  80 0014 C7F81031 		str	r3, [r7, #272]
 231:.\Generated_Source\PSoC5/Serial_Programmer.c ****     uint8  rowData[CYDEV_FLS_ROW_SIZE];
 232:.\Generated_Source\PSoC5/Serial_Programmer.c **** 
 233:.\Generated_Source\PSoC5/Serial_Programmer.c ****     #if !(CY_PSOC4)
 234:.\Generated_Source\PSoC5/Serial_Programmer.c ****         uint8 arrayId = ( uint8 )(flsAddr / CYDEV_FLS_SECTOR_SIZE);
  81              		.loc 1 234 0
  82 0018 D7F81031 		ldr	r3, [r7, #272]
  83 001c 1B0C     		lsrs	r3, r3, #16
  84 001e 87F80F31 		strb	r3, [r7, #271]
 235:.\Generated_Source\PSoC5/Serial_Programmer.c ****     #endif  /* !(CY_PSOC4) */
 236:.\Generated_Source\PSoC5/Serial_Programmer.c **** 
 237:.\Generated_Source\PSoC5/Serial_Programmer.c ****     #if (CY_PSOC4)
 238:.\Generated_Source\PSoC5/Serial_Programmer.c ****         uint16 rowNum = ( uint16 )(flsAddr / CYDEV_FLS_ROW_SIZE);
 239:.\Generated_Source\PSoC5/Serial_Programmer.c ****     #else
 240:.\Generated_Source\PSoC5/Serial_Programmer.c ****         uint16 rowNum = ( uint16 )((flsAddr % CYDEV_FLS_SECTOR_SIZE) / CYDEV_FLS_ROW_SIZE);
  85              		.loc 1 240 0
  86 0022 D7F81031 		ldr	r3, [r7, #272]
  87 0026 9BB2     		uxth	r3, r3
  88 0028 1B0A     		lsrs	r3, r3, #8
  89 002a A7F80C31 		strh	r3, [r7, #268]	@ movhi
 241:.\Generated_Source\PSoC5/Serial_Programmer.c ****     #endif  /* (CY_PSOC4) */
 242:.\Generated_Source\PSoC5/Serial_Programmer.c **** 
 243:.\Generated_Source\PSoC5/Serial_Programmer.c ****     uint32 baseAddr = address - (address % CYDEV_FLS_ROW_SIZE);
  90              		.loc 1 243 0
  91 002e 3B1D     		adds	r3, r7, #4
  92 0030 1B68     		ldr	r3, [r3]
  93 0032 23F0FF03 		bic	r3, r3, #255
  94 0036 C7F80831 		str	r3, [r7, #264]
 244:.\Generated_Source\PSoC5/Serial_Programmer.c ****     uint16 idx;
 245:.\Generated_Source\PSoC5/Serial_Programmer.c **** 
 246:.\Generated_Source\PSoC5/Serial_Programmer.c **** 
 247:.\Generated_Source\PSoC5/Serial_Programmer.c ****     for (idx = 0u; idx < CYDEV_FLS_ROW_SIZE; idx++)
  95              		.loc 1 247 0
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\cc2uLX6d.s 			page 7


  96 003a 0023     		movs	r3, #0
  97 003c A7F81631 		strh	r3, [r7, #278]	@ movhi
  98 0040 0FE0     		b	.L5
  99              	.L6:
 248:.\Generated_Source\PSoC5/Serial_Programmer.c ****     {
 249:.\Generated_Source\PSoC5/Serial_Programmer.c ****         rowData[idx] = Serial_Programmer_GET_CODE_DATA(baseAddr + idx);
 100              		.loc 1 249 0 discriminator 3
 101 0042 B7F81631 		ldrh	r3, [r7, #278]
 102 0046 B7F81611 		ldrh	r1, [r7, #278]
 103 004a D7F80821 		ldr	r2, [r7, #264]
 104 004e 0A44     		add	r2, r2, r1
 105 0050 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 106 0052 07F10802 		add	r2, r7, #8
 107 0056 D154     		strb	r1, [r2, r3]
 247:.\Generated_Source\PSoC5/Serial_Programmer.c ****     {
 108              		.loc 1 247 0 discriminator 3
 109 0058 B7F81631 		ldrh	r3, [r7, #278]
 110 005c 0133     		adds	r3, r3, #1
 111 005e A7F81631 		strh	r3, [r7, #278]	@ movhi
 112              	.L5:
 247:.\Generated_Source\PSoC5/Serial_Programmer.c ****     {
 113              		.loc 1 247 0 is_stmt 0 discriminator 1
 114 0062 B7F81631 		ldrh	r3, [r7, #278]
 115 0066 FF2B     		cmp	r3, #255
 116 0068 EBD9     		bls	.L6
 250:.\Generated_Source\PSoC5/Serial_Programmer.c ****     }
 251:.\Generated_Source\PSoC5/Serial_Programmer.c ****     rowData[address % CYDEV_FLS_ROW_SIZE] = runType;
 117              		.loc 1 251 0 is_stmt 1
 118 006a 3B1D     		adds	r3, r7, #4
 119 006c 1B68     		ldr	r3, [r3]
 120 006e DBB2     		uxtb	r3, r3
 121 0070 07F10802 		add	r2, r7, #8
 122 0074 F91C     		adds	r1, r7, #3
 123 0076 0978     		ldrb	r1, [r1]
 124 0078 D154     		strb	r1, [r2, r3]
 252:.\Generated_Source\PSoC5/Serial_Programmer.c **** 
 253:.\Generated_Source\PSoC5/Serial_Programmer.c ****     #if(CY_PSOC4)
 254:.\Generated_Source\PSoC5/Serial_Programmer.c ****         (void) CySysFlashWriteRow((uint32) rowNum, rowData);
 255:.\Generated_Source\PSoC5/Serial_Programmer.c ****     #else
 256:.\Generated_Source\PSoC5/Serial_Programmer.c ****         (void) CyWriteRowData(arrayId, rowNum, rowData);
 125              		.loc 1 256 0
 126 007a 97F80F11 		ldrb	r1, [r7, #271]	@ zero_extendqisi2
 127 007e B7F80C21 		ldrh	r2, [r7, #268]
 128 0082 07F10803 		add	r3, r7, #8
 129 0086 0846     		mov	r0, r1
 130 0088 1146     		mov	r1, r2
 131 008a 1A46     		mov	r2, r3
 132 008c FFF7FEFF 		bl	CyWriteRowData
 257:.\Generated_Source\PSoC5/Serial_Programmer.c ****     #endif  /* (CY_PSOC4) */
 258:.\Generated_Source\PSoC5/Serial_Programmer.c **** 
 259:.\Generated_Source\PSoC5/Serial_Programmer.c ****     #if(CY_PSOC5)
 260:.\Generated_Source\PSoC5/Serial_Programmer.c ****         /***************************************************************************
 261:.\Generated_Source\PSoC5/Serial_Programmer.c ****         * When writing to flash, data in the instruction cache can become obsolete.
 262:.\Generated_Source\PSoC5/Serial_Programmer.c ****         * Therefore, the cache data does not correlate to the data just written to
 263:.\Generated_Source\PSoC5/Serial_Programmer.c ****         * flash. A call to CyFlushCache() is required to invalidate the data in the
 264:.\Generated_Source\PSoC5/Serial_Programmer.c ****         * cache and force fresh information to be loaded from flash.
 265:.\Generated_Source\PSoC5/Serial_Programmer.c ****         ***************************************************************************/
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\cc2uLX6d.s 			page 8


 266:.\Generated_Source\PSoC5/Serial_Programmer.c ****         CyFlushCache();
 133              		.loc 1 266 0
 134 0090 FFF7FEFF 		bl	CyFlushCache
 267:.\Generated_Source\PSoC5/Serial_Programmer.c ****     #endif /* (CY_PSOC5) */
 268:.\Generated_Source\PSoC5/Serial_Programmer.c **** }
 135              		.loc 1 268 0
 136 0094 07F58C77 		add	r7, r7, #280
 137              		.cfi_def_cfa_offset 8
 138 0098 BD46     		mov	sp, r7
 139              		.cfi_def_cfa_register 13
 140              		@ sp needed
 141 009a 80BD     		pop	{r7, pc}
 142              		.cfi_endproc
 143              	.LFE1:
 144              		.size	Serial_Programmer_SetFlashByte, .-Serial_Programmer_SetFlashByte
 145              		.text
 146              	.Letext0:
 147              		.file 2 ".\\Generated_Source\\PSoC5\\cytypes.h"
 148              		.section	.debug_info,"",%progbits
 149              	.Ldebug_info0:
 150 0000 5C010000 		.4byte	0x15c
 151 0004 0400     		.2byte	0x4
 152 0006 00000000 		.4byte	.Ldebug_abbrev0
 153 000a 04       		.byte	0x4
 154 000b 01       		.uleb128 0x1
 155 000c A7000000 		.4byte	.LASF24
 156 0010 01       		.byte	0x1
 157 0011 1A000000 		.4byte	.LASF25
 158 0015 C2010000 		.4byte	.LASF26
 159 0019 00000000 		.4byte	.Ldebug_ranges0+0
 160 001d 00000000 		.4byte	0
 161 0021 00000000 		.4byte	.Ldebug_line0
 162 0025 02       		.uleb128 0x2
 163 0026 01       		.byte	0x1
 164 0027 06       		.byte	0x6
 165 0028 37020000 		.4byte	.LASF0
 166 002c 02       		.uleb128 0x2
 167 002d 01       		.byte	0x1
 168 002e 08       		.byte	0x8
 169 002f 4D000000 		.4byte	.LASF1
 170 0033 02       		.uleb128 0x2
 171 0034 02       		.byte	0x2
 172 0035 05       		.byte	0x5
 173 0036 24020000 		.4byte	.LASF2
 174 003a 02       		.uleb128 0x2
 175 003b 02       		.byte	0x2
 176 003c 07       		.byte	0x7
 177 003d 07000000 		.4byte	.LASF3
 178 0041 02       		.uleb128 0x2
 179 0042 04       		.byte	0x4
 180 0043 05       		.byte	0x5
 181 0044 2E020000 		.4byte	.LASF4
 182 0048 02       		.uleb128 0x2
 183 0049 04       		.byte	0x4
 184 004a 07       		.byte	0x7
 185 004b 68000000 		.4byte	.LASF5
 186 004f 02       		.uleb128 0x2
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\cc2uLX6d.s 			page 9


 187 0050 08       		.byte	0x8
 188 0051 05       		.byte	0x5
 189 0052 AF010000 		.4byte	.LASF6
 190 0056 02       		.uleb128 0x2
 191 0057 08       		.byte	0x8
 192 0058 07       		.byte	0x7
 193 0059 67010000 		.4byte	.LASF7
 194 005d 03       		.uleb128 0x3
 195 005e 04       		.byte	0x4
 196 005f 05       		.byte	0x5
 197 0060 696E7400 		.ascii	"int\000"
 198 0064 02       		.uleb128 0x2
 199 0065 04       		.byte	0x4
 200 0066 07       		.byte	0x7
 201 0067 52010000 		.4byte	.LASF8
 202 006b 04       		.uleb128 0x4
 203 006c 7A000000 		.4byte	.LASF9
 204 0070 02       		.byte	0x2
 205 0071 A1       		.byte	0xa1
 206 0072 2C000000 		.4byte	0x2c
 207 0076 04       		.uleb128 0x4
 208 0077 44010000 		.4byte	.LASF10
 209 007b 02       		.byte	0x2
 210 007c A2       		.byte	0xa2
 211 007d 3A000000 		.4byte	0x3a
 212 0081 04       		.uleb128 0x4
 213 0082 4B010000 		.4byte	.LASF11
 214 0086 02       		.byte	0x2
 215 0087 A3       		.byte	0xa3
 216 0088 48000000 		.4byte	0x48
 217 008c 02       		.uleb128 0x2
 218 008d 04       		.byte	0x4
 219 008e 04       		.byte	0x4
 220 008f 47000000 		.4byte	.LASF12
 221 0093 02       		.uleb128 0x2
 222 0094 08       		.byte	0x8
 223 0095 04       		.byte	0x4
 224 0096 35010000 		.4byte	.LASF13
 225 009a 02       		.uleb128 0x2
 226 009b 01       		.byte	0x1
 227 009c 08       		.byte	0x8
 228 009d BD010000 		.4byte	.LASF14
 229 00a1 05       		.uleb128 0x5
 230 00a2 63000000 		.4byte	.LASF15
 231 00a6 02       		.byte	0x2
 232 00a7 4B01     		.2byte	0x14b
 233 00a9 AD000000 		.4byte	0xad
 234 00ad 06       		.uleb128 0x6
 235 00ae 6B000000 		.4byte	0x6b
 236 00b2 02       		.uleb128 0x2
 237 00b3 04       		.byte	0x4
 238 00b4 07       		.byte	0x7
 239 00b5 A6010000 		.4byte	.LASF16
 240 00b9 07       		.uleb128 0x7
 241 00ba 86010000 		.4byte	.LASF27
 242 00be 01       		.byte	0x1
 243 00bf 29       		.byte	0x29
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\cc2uLX6d.s 			page 10


 244 00c0 00000000 		.4byte	.LFB0
 245 00c4 14000000 		.4byte	.LFE0-.LFB0
 246 00c8 01       		.uleb128 0x1
 247 00c9 9C       		.byte	0x9c
 248 00ca 08       		.uleb128 0x8
 249 00cb 88000000 		.4byte	.LASF28
 250 00cf 01       		.byte	0x1
 251 00d0 E4       		.byte	0xe4
 252 00d1 00000000 		.4byte	.LFB1
 253 00d5 9C000000 		.4byte	.LFE1-.LFB1
 254 00d9 01       		.uleb128 0x1
 255 00da 9C       		.byte	0x9c
 256 00db 53010000 		.4byte	0x153
 257 00df 09       		.uleb128 0x9
 258 00e0 5F010000 		.4byte	.LASF17
 259 00e4 01       		.byte	0x1
 260 00e5 E4       		.byte	0xe4
 261 00e6 81000000 		.4byte	0x81
 262 00ea 03       		.uleb128 0x3
 263 00eb 91       		.byte	0x91
 264 00ec E47D     		.sleb128 -284
 265 00ee 09       		.uleb128 0x9
 266 00ef 7E010000 		.4byte	.LASF18
 267 00f3 01       		.byte	0x1
 268 00f4 E4       		.byte	0xe4
 269 00f5 6B000000 		.4byte	0x6b
 270 00f9 03       		.uleb128 0x3
 271 00fa 91       		.byte	0x91
 272 00fb E37D     		.sleb128 -285
 273 00fd 0A       		.uleb128 0xa
 274 00fe 3C010000 		.4byte	.LASF19
 275 0102 01       		.byte	0x1
 276 0103 E6       		.byte	0xe6
 277 0104 81000000 		.4byte	0x81
 278 0108 02       		.uleb128 0x2
 279 0109 91       		.byte	0x91
 280 010a 70       		.sleb128 -16
 281 010b 0A       		.uleb128 0xa
 282 010c 5B000000 		.4byte	.LASF20
 283 0110 01       		.byte	0x1
 284 0111 E7       		.byte	0xe7
 285 0112 53010000 		.4byte	0x153
 286 0116 03       		.uleb128 0x3
 287 0117 91       		.byte	0x91
 288 0118 E87D     		.sleb128 -280
 289 011a 0A       		.uleb128 0xa
 290 011b 80000000 		.4byte	.LASF21
 291 011f 01       		.byte	0x1
 292 0120 EA       		.byte	0xea
 293 0121 6B000000 		.4byte	0x6b
 294 0125 02       		.uleb128 0x2
 295 0126 91       		.byte	0x91
 296 0127 6F       		.sleb128 -17
 297 0128 0A       		.uleb128 0xa
 298 0129 00000000 		.4byte	.LASF22
 299 012d 01       		.byte	0x1
 300 012e F0       		.byte	0xf0
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\cc2uLX6d.s 			page 11


 301 012f 76000000 		.4byte	0x76
 302 0133 02       		.uleb128 0x2
 303 0134 91       		.byte	0x91
 304 0135 6C       		.sleb128 -20
 305 0136 0A       		.uleb128 0xa
 306 0137 9D010000 		.4byte	.LASF23
 307 013b 01       		.byte	0x1
 308 013c F3       		.byte	0xf3
 309 013d 81000000 		.4byte	0x81
 310 0141 02       		.uleb128 0x2
 311 0142 91       		.byte	0x91
 312 0143 68       		.sleb128 -24
 313 0144 0B       		.uleb128 0xb
 314 0145 69647800 		.ascii	"idx\000"
 315 0149 01       		.byte	0x1
 316 014a F4       		.byte	0xf4
 317 014b 76000000 		.4byte	0x76
 318 014f 02       		.uleb128 0x2
 319 0150 91       		.byte	0x91
 320 0151 76       		.sleb128 -10
 321 0152 00       		.byte	0
 322 0153 0C       		.uleb128 0xc
 323 0154 6B000000 		.4byte	0x6b
 324 0158 0D       		.uleb128 0xd
 325 0159 B2000000 		.4byte	0xb2
 326 015d FF       		.byte	0xff
 327 015e 00       		.byte	0
 328 015f 00       		.byte	0
 329              		.section	.debug_abbrev,"",%progbits
 330              	.Ldebug_abbrev0:
 331 0000 01       		.uleb128 0x1
 332 0001 11       		.uleb128 0x11
 333 0002 01       		.byte	0x1
 334 0003 25       		.uleb128 0x25
 335 0004 0E       		.uleb128 0xe
 336 0005 13       		.uleb128 0x13
 337 0006 0B       		.uleb128 0xb
 338 0007 03       		.uleb128 0x3
 339 0008 0E       		.uleb128 0xe
 340 0009 1B       		.uleb128 0x1b
 341 000a 0E       		.uleb128 0xe
 342 000b 55       		.uleb128 0x55
 343 000c 17       		.uleb128 0x17
 344 000d 11       		.uleb128 0x11
 345 000e 01       		.uleb128 0x1
 346 000f 10       		.uleb128 0x10
 347 0010 17       		.uleb128 0x17
 348 0011 00       		.byte	0
 349 0012 00       		.byte	0
 350 0013 02       		.uleb128 0x2
 351 0014 24       		.uleb128 0x24
 352 0015 00       		.byte	0
 353 0016 0B       		.uleb128 0xb
 354 0017 0B       		.uleb128 0xb
 355 0018 3E       		.uleb128 0x3e
 356 0019 0B       		.uleb128 0xb
 357 001a 03       		.uleb128 0x3
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\cc2uLX6d.s 			page 12


 358 001b 0E       		.uleb128 0xe
 359 001c 00       		.byte	0
 360 001d 00       		.byte	0
 361 001e 03       		.uleb128 0x3
 362 001f 24       		.uleb128 0x24
 363 0020 00       		.byte	0
 364 0021 0B       		.uleb128 0xb
 365 0022 0B       		.uleb128 0xb
 366 0023 3E       		.uleb128 0x3e
 367 0024 0B       		.uleb128 0xb
 368 0025 03       		.uleb128 0x3
 369 0026 08       		.uleb128 0x8
 370 0027 00       		.byte	0
 371 0028 00       		.byte	0
 372 0029 04       		.uleb128 0x4
 373 002a 16       		.uleb128 0x16
 374 002b 00       		.byte	0
 375 002c 03       		.uleb128 0x3
 376 002d 0E       		.uleb128 0xe
 377 002e 3A       		.uleb128 0x3a
 378 002f 0B       		.uleb128 0xb
 379 0030 3B       		.uleb128 0x3b
 380 0031 0B       		.uleb128 0xb
 381 0032 49       		.uleb128 0x49
 382 0033 13       		.uleb128 0x13
 383 0034 00       		.byte	0
 384 0035 00       		.byte	0
 385 0036 05       		.uleb128 0x5
 386 0037 16       		.uleb128 0x16
 387 0038 00       		.byte	0
 388 0039 03       		.uleb128 0x3
 389 003a 0E       		.uleb128 0xe
 390 003b 3A       		.uleb128 0x3a
 391 003c 0B       		.uleb128 0xb
 392 003d 3B       		.uleb128 0x3b
 393 003e 05       		.uleb128 0x5
 394 003f 49       		.uleb128 0x49
 395 0040 13       		.uleb128 0x13
 396 0041 00       		.byte	0
 397 0042 00       		.byte	0
 398 0043 06       		.uleb128 0x6
 399 0044 35       		.uleb128 0x35
 400 0045 00       		.byte	0
 401 0046 49       		.uleb128 0x49
 402 0047 13       		.uleb128 0x13
 403 0048 00       		.byte	0
 404 0049 00       		.byte	0
 405 004a 07       		.uleb128 0x7
 406 004b 2E       		.uleb128 0x2e
 407 004c 00       		.byte	0
 408 004d 3F       		.uleb128 0x3f
 409 004e 19       		.uleb128 0x19
 410 004f 03       		.uleb128 0x3
 411 0050 0E       		.uleb128 0xe
 412 0051 3A       		.uleb128 0x3a
 413 0052 0B       		.uleb128 0xb
 414 0053 3B       		.uleb128 0x3b
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\cc2uLX6d.s 			page 13


 415 0054 0B       		.uleb128 0xb
 416 0055 27       		.uleb128 0x27
 417 0056 19       		.uleb128 0x19
 418 0057 11       		.uleb128 0x11
 419 0058 01       		.uleb128 0x1
 420 0059 12       		.uleb128 0x12
 421 005a 06       		.uleb128 0x6
 422 005b 40       		.uleb128 0x40
 423 005c 18       		.uleb128 0x18
 424 005d 9642     		.uleb128 0x2116
 425 005f 19       		.uleb128 0x19
 426 0060 00       		.byte	0
 427 0061 00       		.byte	0
 428 0062 08       		.uleb128 0x8
 429 0063 2E       		.uleb128 0x2e
 430 0064 01       		.byte	0x1
 431 0065 3F       		.uleb128 0x3f
 432 0066 19       		.uleb128 0x19
 433 0067 03       		.uleb128 0x3
 434 0068 0E       		.uleb128 0xe
 435 0069 3A       		.uleb128 0x3a
 436 006a 0B       		.uleb128 0xb
 437 006b 3B       		.uleb128 0x3b
 438 006c 0B       		.uleb128 0xb
 439 006d 27       		.uleb128 0x27
 440 006e 19       		.uleb128 0x19
 441 006f 11       		.uleb128 0x11
 442 0070 01       		.uleb128 0x1
 443 0071 12       		.uleb128 0x12
 444 0072 06       		.uleb128 0x6
 445 0073 40       		.uleb128 0x40
 446 0074 18       		.uleb128 0x18
 447 0075 9642     		.uleb128 0x2116
 448 0077 19       		.uleb128 0x19
 449 0078 01       		.uleb128 0x1
 450 0079 13       		.uleb128 0x13
 451 007a 00       		.byte	0
 452 007b 00       		.byte	0
 453 007c 09       		.uleb128 0x9
 454 007d 05       		.uleb128 0x5
 455 007e 00       		.byte	0
 456 007f 03       		.uleb128 0x3
 457 0080 0E       		.uleb128 0xe
 458 0081 3A       		.uleb128 0x3a
 459 0082 0B       		.uleb128 0xb
 460 0083 3B       		.uleb128 0x3b
 461 0084 0B       		.uleb128 0xb
 462 0085 49       		.uleb128 0x49
 463 0086 13       		.uleb128 0x13
 464 0087 02       		.uleb128 0x2
 465 0088 18       		.uleb128 0x18
 466 0089 00       		.byte	0
 467 008a 00       		.byte	0
 468 008b 0A       		.uleb128 0xa
 469 008c 34       		.uleb128 0x34
 470 008d 00       		.byte	0
 471 008e 03       		.uleb128 0x3
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\cc2uLX6d.s 			page 14


 472 008f 0E       		.uleb128 0xe
 473 0090 3A       		.uleb128 0x3a
 474 0091 0B       		.uleb128 0xb
 475 0092 3B       		.uleb128 0x3b
 476 0093 0B       		.uleb128 0xb
 477 0094 49       		.uleb128 0x49
 478 0095 13       		.uleb128 0x13
 479 0096 02       		.uleb128 0x2
 480 0097 18       		.uleb128 0x18
 481 0098 00       		.byte	0
 482 0099 00       		.byte	0
 483 009a 0B       		.uleb128 0xb
 484 009b 34       		.uleb128 0x34
 485 009c 00       		.byte	0
 486 009d 03       		.uleb128 0x3
 487 009e 08       		.uleb128 0x8
 488 009f 3A       		.uleb128 0x3a
 489 00a0 0B       		.uleb128 0xb
 490 00a1 3B       		.uleb128 0x3b
 491 00a2 0B       		.uleb128 0xb
 492 00a3 49       		.uleb128 0x49
 493 00a4 13       		.uleb128 0x13
 494 00a5 02       		.uleb128 0x2
 495 00a6 18       		.uleb128 0x18
 496 00a7 00       		.byte	0
 497 00a8 00       		.byte	0
 498 00a9 0C       		.uleb128 0xc
 499 00aa 01       		.uleb128 0x1
 500 00ab 01       		.byte	0x1
 501 00ac 49       		.uleb128 0x49
 502 00ad 13       		.uleb128 0x13
 503 00ae 00       		.byte	0
 504 00af 00       		.byte	0
 505 00b0 0D       		.uleb128 0xd
 506 00b1 21       		.uleb128 0x21
 507 00b2 00       		.byte	0
 508 00b3 49       		.uleb128 0x49
 509 00b4 13       		.uleb128 0x13
 510 00b5 2F       		.uleb128 0x2f
 511 00b6 0B       		.uleb128 0xb
 512 00b7 00       		.byte	0
 513 00b8 00       		.byte	0
 514 00b9 00       		.byte	0
 515              		.section	.debug_aranges,"",%progbits
 516 0000 24000000 		.4byte	0x24
 517 0004 0200     		.2byte	0x2
 518 0006 00000000 		.4byte	.Ldebug_info0
 519 000a 04       		.byte	0x4
 520 000b 00       		.byte	0
 521 000c 0000     		.2byte	0
 522 000e 0000     		.2byte	0
 523 0010 00000000 		.4byte	.LFB0
 524 0014 14000000 		.4byte	.LFE0-.LFB0
 525 0018 00000000 		.4byte	.LFB1
 526 001c 9C000000 		.4byte	.LFE1-.LFB1
 527 0020 00000000 		.4byte	0
 528 0024 00000000 		.4byte	0
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\cc2uLX6d.s 			page 15


 529              		.section	.debug_ranges,"",%progbits
 530              	.Ldebug_ranges0:
 531 0000 00000000 		.4byte	.LFB0
 532 0004 14000000 		.4byte	.LFE0
 533 0008 00000000 		.4byte	.LFB1
 534 000c 9C000000 		.4byte	.LFE1
 535 0010 00000000 		.4byte	0
 536 0014 00000000 		.4byte	0
 537              		.section	.debug_line,"",%progbits
 538              	.Ldebug_line0:
 539 0000 94000000 		.section	.debug_str,"MS",%progbits,1
 539      02005000 
 539      00000201 
 539      FB0E0D00 
 539      01010101 
 540              	.LASF22:
 541 0000 726F774E 		.ascii	"rowNum\000"
 541      756D00
 542              	.LASF3:
 543 0007 73686F72 		.ascii	"short unsigned int\000"
 543      7420756E 
 543      7369676E 
 543      65642069 
 543      6E7400
 544              	.LASF25:
 545 001a 2E5C4765 		.ascii	".\\Generated_Source\\PSoC5\\Serial_Programmer.c\000"
 545      6E657261 
 545      7465645F 
 545      536F7572 
 545      63655C50 
 546              	.LASF12:
 547 0047 666C6F61 		.ascii	"float\000"
 547      7400
 548              	.LASF1:
 549 004d 756E7369 		.ascii	"unsigned char\000"
 549      676E6564 
 549      20636861 
 549      7200
 550              	.LASF20:
 551 005b 726F7744 		.ascii	"rowData\000"
 551      61746100 
 552              	.LASF15:
 553 0063 72656738 		.ascii	"reg8\000"
 553      00
 554              	.LASF5:
 555 0068 6C6F6E67 		.ascii	"long unsigned int\000"
 555      20756E73 
 555      69676E65 
 555      6420696E 
 555      7400
 556              	.LASF9:
 557 007a 75696E74 		.ascii	"uint8\000"
 557      3800
 558              	.LASF21:
 559 0080 61727261 		.ascii	"arrayId\000"
 559      79496400 
 560              	.LASF28:
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\cc2uLX6d.s 			page 16


 561 0088 53657269 		.ascii	"Serial_Programmer_SetFlashByte\000"
 561      616C5F50 
 561      726F6772 
 561      616D6D65 
 561      725F5365 
 562              	.LASF24:
 563 00a7 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 563      4320342E 
 563      392E3320 
 563      32303135 
 563      30333033 
 564 00da 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 564      20726576 
 564      6973696F 
 564      6E203232 
 564      31323230 
 565 010d 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 565      66756E63 
 565      74696F6E 
 565      2D736563 
 565      74696F6E 
 566              	.LASF13:
 567 0135 646F7562 		.ascii	"double\000"
 567      6C6500
 568              	.LASF19:
 569 013c 666C7341 		.ascii	"flsAddr\000"
 569      64647200 
 570              	.LASF10:
 571 0144 75696E74 		.ascii	"uint16\000"
 571      313600
 572              	.LASF11:
 573 014b 75696E74 		.ascii	"uint32\000"
 573      333200
 574              	.LASF8:
 575 0152 756E7369 		.ascii	"unsigned int\000"
 575      676E6564 
 575      20696E74 
 575      00
 576              	.LASF17:
 577 015f 61646472 		.ascii	"address\000"
 577      65737300 
 578              	.LASF7:
 579 0167 6C6F6E67 		.ascii	"long long unsigned int\000"
 579      206C6F6E 
 579      6720756E 
 579      7369676E 
 579      65642069 
 580              	.LASF18:
 581 017e 72756E54 		.ascii	"runType\000"
 581      79706500 
 582              	.LASF27:
 583 0186 53657269 		.ascii	"Serial_Programmer_Load\000"
 583      616C5F50 
 583      726F6772 
 583      616D6D65 
 583      725F4C6F 
 584              	.LASF23:
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\cc2uLX6d.s 			page 17


 585 019d 62617365 		.ascii	"baseAddr\000"
 585      41646472 
 585      00
 586              	.LASF16:
 587 01a6 73697A65 		.ascii	"sizetype\000"
 587      74797065 
 587      00
 588              	.LASF6:
 589 01af 6C6F6E67 		.ascii	"long long int\000"
 589      206C6F6E 
 589      6720696E 
 589      7400
 590              	.LASF14:
 591 01bd 63686172 		.ascii	"char\000"
 591      00
 592              	.LASF26:
 593 01c2 433A5C55 		.ascii	"C:\\Users\\Proyectos_Hardware\\Dropbox\\Proyecto Co"
 593      73657273 
 593      5C50726F 
 593      79656374 
 593      6F735F48 
 594 01f1 6E74726F 		.ascii	"ntroller\\Mux Advance Encore V2_00\\MuxAdvance.cyds"
 594      6C6C6572 
 594      5C4D7578 
 594      20416476 
 594      616E6365 
 595 0222 6E00     		.ascii	"n\000"
 596              	.LASF2:
 597 0224 73686F72 		.ascii	"short int\000"
 597      7420696E 
 597      7400
 598              	.LASF4:
 599 022e 6C6F6E67 		.ascii	"long int\000"
 599      20696E74 
 599      00
 600              	.LASF0:
 601 0237 7369676E 		.ascii	"signed char\000"
 601      65642063 
 601      68617200 
 602              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
