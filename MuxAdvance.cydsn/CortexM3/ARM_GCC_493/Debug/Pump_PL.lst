ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"Pump_PL.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	Pump_PL_initVar
  19              		.bss
  20              		.type	Pump_PL_initVar, %object
  21              		.size	Pump_PL_initVar, 1
  22              	Pump_PL_initVar:
  23 0000 00       		.space	1
  24              		.comm	Pump_PL_rxBuffer,256,4
  25              		.global	Pump_PL_rxBufferRead
  26 0001 00       		.align	1
  27              		.type	Pump_PL_rxBufferRead, %object
  28              		.size	Pump_PL_rxBufferRead, 2
  29              	Pump_PL_rxBufferRead:
  30 0002 0000     		.space	2
  31              		.global	Pump_PL_rxBufferWrite
  32              		.align	1
  33              		.type	Pump_PL_rxBufferWrite, %object
  34              		.size	Pump_PL_rxBufferWrite, 2
  35              	Pump_PL_rxBufferWrite:
  36 0004 0000     		.space	2
  37              		.global	Pump_PL_rxBufferLoopDetect
  38              		.type	Pump_PL_rxBufferLoopDetect, %object
  39              		.size	Pump_PL_rxBufferLoopDetect, 1
  40              	Pump_PL_rxBufferLoopDetect:
  41 0006 00       		.space	1
  42              		.global	Pump_PL_rxBufferOverflow
  43              		.type	Pump_PL_rxBufferOverflow, %object
  44              		.size	Pump_PL_rxBufferOverflow, 1
  45              	Pump_PL_rxBufferOverflow:
  46 0007 00       		.space	1
  47              		.section	.text.Pump_PL_Start,"ax",%progbits
  48              		.align	2
  49              		.global	Pump_PL_Start
  50              		.thumb
  51              		.thumb_func
  52              		.type	Pump_PL_Start, %function
  53              	Pump_PL_Start:
  54              	.LFB0:
  55              		.file 1 ".\\Generated_Source\\PSoC5\\Pump_PL.c"
   1:.\Generated_Source\PSoC5/Pump_PL.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC5/Pump_PL.c **** * File Name: Pump_PL.c
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 2


   3:.\Generated_Source\PSoC5/Pump_PL.c **** * Version 2.30
   4:.\Generated_Source\PSoC5/Pump_PL.c **** *
   5:.\Generated_Source\PSoC5/Pump_PL.c **** * Description:
   6:.\Generated_Source\PSoC5/Pump_PL.c **** *  This file provides all API functionality of the UART component
   7:.\Generated_Source\PSoC5/Pump_PL.c **** *
   8:.\Generated_Source\PSoC5/Pump_PL.c **** * Note:
   9:.\Generated_Source\PSoC5/Pump_PL.c **** *
  10:.\Generated_Source\PSoC5/Pump_PL.c **** ********************************************************************************
  11:.\Generated_Source\PSoC5/Pump_PL.c **** * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  12:.\Generated_Source\PSoC5/Pump_PL.c **** * You may use this file only in accordance with the license, terms, conditions,
  13:.\Generated_Source\PSoC5/Pump_PL.c **** * disclaimers, and limitations in the end user license agreement accompanying
  14:.\Generated_Source\PSoC5/Pump_PL.c **** * the software package with which this file was provided.
  15:.\Generated_Source\PSoC5/Pump_PL.c **** *******************************************************************************/
  16:.\Generated_Source\PSoC5/Pump_PL.c **** 
  17:.\Generated_Source\PSoC5/Pump_PL.c **** #include "Pump_PL.h"
  18:.\Generated_Source\PSoC5/Pump_PL.c **** #include "CyLib.h"
  19:.\Generated_Source\PSoC5/Pump_PL.c **** #if(Pump_PL_INTERNAL_CLOCK_USED)
  20:.\Generated_Source\PSoC5/Pump_PL.c ****     #include "Pump_PL_IntClock.h"
  21:.\Generated_Source\PSoC5/Pump_PL.c **** #endif /* End Pump_PL_INTERNAL_CLOCK_USED */
  22:.\Generated_Source\PSoC5/Pump_PL.c **** 
  23:.\Generated_Source\PSoC5/Pump_PL.c **** 
  24:.\Generated_Source\PSoC5/Pump_PL.c **** /***************************************
  25:.\Generated_Source\PSoC5/Pump_PL.c **** * Global data allocation
  26:.\Generated_Source\PSoC5/Pump_PL.c **** ***************************************/
  27:.\Generated_Source\PSoC5/Pump_PL.c **** 
  28:.\Generated_Source\PSoC5/Pump_PL.c **** uint8 Pump_PL_initVar = 0u;
  29:.\Generated_Source\PSoC5/Pump_PL.c **** #if( Pump_PL_TX_ENABLED && (Pump_PL_TXBUFFERSIZE > Pump_PL_FIFO_LENGTH))
  30:.\Generated_Source\PSoC5/Pump_PL.c ****     volatile uint8 Pump_PL_txBuffer[Pump_PL_TXBUFFERSIZE];
  31:.\Generated_Source\PSoC5/Pump_PL.c ****     volatile uint8 Pump_PL_txBufferRead = 0u;
  32:.\Generated_Source\PSoC5/Pump_PL.c ****     uint8 Pump_PL_txBufferWrite = 0u;
  33:.\Generated_Source\PSoC5/Pump_PL.c **** #endif /* End Pump_PL_TX_ENABLED */
  34:.\Generated_Source\PSoC5/Pump_PL.c **** #if( ( Pump_PL_RX_ENABLED || Pump_PL_HD_ENABLED ) && \
  35:.\Generated_Source\PSoC5/Pump_PL.c ****      (Pump_PL_RXBUFFERSIZE > Pump_PL_FIFO_LENGTH) )
  36:.\Generated_Source\PSoC5/Pump_PL.c ****     volatile uint8 Pump_PL_rxBuffer[Pump_PL_RXBUFFERSIZE];
  37:.\Generated_Source\PSoC5/Pump_PL.c ****     volatile uint16 Pump_PL_rxBufferRead = 0u;
  38:.\Generated_Source\PSoC5/Pump_PL.c ****     volatile uint16 Pump_PL_rxBufferWrite = 0u;
  39:.\Generated_Source\PSoC5/Pump_PL.c ****     volatile uint8 Pump_PL_rxBufferLoopDetect = 0u;
  40:.\Generated_Source\PSoC5/Pump_PL.c ****     volatile uint8 Pump_PL_rxBufferOverflow = 0u;
  41:.\Generated_Source\PSoC5/Pump_PL.c ****     #if (Pump_PL_RXHW_ADDRESS_ENABLED)
  42:.\Generated_Source\PSoC5/Pump_PL.c ****         volatile uint8 Pump_PL_rxAddressMode = Pump_PL_RXADDRESSMODE;
  43:.\Generated_Source\PSoC5/Pump_PL.c ****         volatile uint8 Pump_PL_rxAddressDetected = 0u;
  44:.\Generated_Source\PSoC5/Pump_PL.c ****     #endif /* End EnableHWAddress */
  45:.\Generated_Source\PSoC5/Pump_PL.c **** #endif /* End Pump_PL_RX_ENABLED */
  46:.\Generated_Source\PSoC5/Pump_PL.c **** 
  47:.\Generated_Source\PSoC5/Pump_PL.c **** 
  48:.\Generated_Source\PSoC5/Pump_PL.c **** /*******************************************************************************
  49:.\Generated_Source\PSoC5/Pump_PL.c **** * Function Name: Pump_PL_Start
  50:.\Generated_Source\PSoC5/Pump_PL.c **** ********************************************************************************
  51:.\Generated_Source\PSoC5/Pump_PL.c **** *
  52:.\Generated_Source\PSoC5/Pump_PL.c **** * Summary:
  53:.\Generated_Source\PSoC5/Pump_PL.c **** *  Initialize and Enable the UART component.
  54:.\Generated_Source\PSoC5/Pump_PL.c **** *  Enable the clock input to enable operation.
  55:.\Generated_Source\PSoC5/Pump_PL.c **** *
  56:.\Generated_Source\PSoC5/Pump_PL.c **** * Parameters:
  57:.\Generated_Source\PSoC5/Pump_PL.c **** *  None.
  58:.\Generated_Source\PSoC5/Pump_PL.c **** *
  59:.\Generated_Source\PSoC5/Pump_PL.c **** * Return:
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 3


  60:.\Generated_Source\PSoC5/Pump_PL.c **** *  None.
  61:.\Generated_Source\PSoC5/Pump_PL.c **** *
  62:.\Generated_Source\PSoC5/Pump_PL.c **** * Global variables:
  63:.\Generated_Source\PSoC5/Pump_PL.c **** *  The Pump_PL_intiVar variable is used to indicate initial
  64:.\Generated_Source\PSoC5/Pump_PL.c **** *  configuration of this component. The variable is initialized to zero (0u)
  65:.\Generated_Source\PSoC5/Pump_PL.c **** *  and set to one (1u) the first time UART_Start() is called. This allows for
  66:.\Generated_Source\PSoC5/Pump_PL.c **** *  component initialization without re-initialization in all subsequent calls
  67:.\Generated_Source\PSoC5/Pump_PL.c **** *  to the Pump_PL_Start() routine.
  68:.\Generated_Source\PSoC5/Pump_PL.c **** *
  69:.\Generated_Source\PSoC5/Pump_PL.c **** * Reentrant:
  70:.\Generated_Source\PSoC5/Pump_PL.c **** *  No.
  71:.\Generated_Source\PSoC5/Pump_PL.c **** *
  72:.\Generated_Source\PSoC5/Pump_PL.c **** *******************************************************************************/
  73:.\Generated_Source\PSoC5/Pump_PL.c **** void Pump_PL_Start(void) 
  74:.\Generated_Source\PSoC5/Pump_PL.c **** {
  56              		.loc 1 74 0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 1, uses_anonymous_args = 0
  60 0000 80B5     		push	{r7, lr}
  61              		.cfi_def_cfa_offset 8
  62              		.cfi_offset 7, -8
  63              		.cfi_offset 14, -4
  64 0002 00AF     		add	r7, sp, #0
  65              		.cfi_def_cfa_register 7
  75:.\Generated_Source\PSoC5/Pump_PL.c ****     /* If not Initialized then initialize all required hardware and software */
  76:.\Generated_Source\PSoC5/Pump_PL.c ****     if(Pump_PL_initVar == 0u)
  66              		.loc 1 76 0
  67 0004 054B     		ldr	r3, .L3
  68 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  69 0008 002B     		cmp	r3, #0
  70 000a 04D1     		bne	.L2
  77:.\Generated_Source\PSoC5/Pump_PL.c ****     {
  78:.\Generated_Source\PSoC5/Pump_PL.c ****         Pump_PL_Init();
  71              		.loc 1 78 0
  72 000c FFF7FEFF 		bl	Pump_PL_Init
  79:.\Generated_Source\PSoC5/Pump_PL.c ****         Pump_PL_initVar = 1u;
  73              		.loc 1 79 0
  74 0010 024B     		ldr	r3, .L3
  75 0012 0122     		movs	r2, #1
  76 0014 1A70     		strb	r2, [r3]
  77              	.L2:
  80:.\Generated_Source\PSoC5/Pump_PL.c ****     }
  81:.\Generated_Source\PSoC5/Pump_PL.c ****     Pump_PL_Enable();
  78              		.loc 1 81 0
  79 0016 FFF7FEFF 		bl	Pump_PL_Enable
  82:.\Generated_Source\PSoC5/Pump_PL.c **** }
  80              		.loc 1 82 0
  81 001a 80BD     		pop	{r7, pc}
  82              	.L4:
  83              		.align	2
  84              	.L3:
  85 001c 00000000 		.word	Pump_PL_initVar
  86              		.cfi_endproc
  87              	.LFE0:
  88              		.size	Pump_PL_Start, .-Pump_PL_Start
  89              		.section	.text.Pump_PL_Init,"ax",%progbits
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 4


  90              		.align	2
  91              		.global	Pump_PL_Init
  92              		.thumb
  93              		.thumb_func
  94              		.type	Pump_PL_Init, %function
  95              	Pump_PL_Init:
  96              	.LFB1:
  83:.\Generated_Source\PSoC5/Pump_PL.c **** 
  84:.\Generated_Source\PSoC5/Pump_PL.c **** 
  85:.\Generated_Source\PSoC5/Pump_PL.c **** /*******************************************************************************
  86:.\Generated_Source\PSoC5/Pump_PL.c **** * Function Name: Pump_PL_Init
  87:.\Generated_Source\PSoC5/Pump_PL.c **** ********************************************************************************
  88:.\Generated_Source\PSoC5/Pump_PL.c **** *
  89:.\Generated_Source\PSoC5/Pump_PL.c **** * Summary:
  90:.\Generated_Source\PSoC5/Pump_PL.c **** *  Initialize component's parameters to the parameters set by user in the
  91:.\Generated_Source\PSoC5/Pump_PL.c **** *  customizer of the component placed onto schematic. Usually called in
  92:.\Generated_Source\PSoC5/Pump_PL.c **** *  Pump_PL_Start().
  93:.\Generated_Source\PSoC5/Pump_PL.c **** *
  94:.\Generated_Source\PSoC5/Pump_PL.c **** * Parameters:
  95:.\Generated_Source\PSoC5/Pump_PL.c **** *  None.
  96:.\Generated_Source\PSoC5/Pump_PL.c **** *
  97:.\Generated_Source\PSoC5/Pump_PL.c **** * Return:
  98:.\Generated_Source\PSoC5/Pump_PL.c **** *  None.
  99:.\Generated_Source\PSoC5/Pump_PL.c **** *
 100:.\Generated_Source\PSoC5/Pump_PL.c **** *******************************************************************************/
 101:.\Generated_Source\PSoC5/Pump_PL.c **** void Pump_PL_Init(void) 
 102:.\Generated_Source\PSoC5/Pump_PL.c **** {
  97              		.loc 1 102 0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 1, uses_anonymous_args = 0
 101 0000 80B5     		push	{r7, lr}
 102              		.cfi_def_cfa_offset 8
 103              		.cfi_offset 7, -8
 104              		.cfi_offset 14, -4
 105 0002 00AF     		add	r7, sp, #0
 106              		.cfi_def_cfa_register 7
 103:.\Generated_Source\PSoC5/Pump_PL.c ****     #if(Pump_PL_RX_ENABLED || Pump_PL_HD_ENABLED)
 104:.\Generated_Source\PSoC5/Pump_PL.c **** 
 105:.\Generated_Source\PSoC5/Pump_PL.c ****         #if(Pump_PL_RX_INTERRUPT_ENABLED && (Pump_PL_RXBUFFERSIZE > Pump_PL_FIFO_LENGTH))
 106:.\Generated_Source\PSoC5/Pump_PL.c ****             /* Set the RX Interrupt. */
 107:.\Generated_Source\PSoC5/Pump_PL.c ****             (void)CyIntSetVector(Pump_PL_RX_VECT_NUM, &Pump_PL_RXISR);
 107              		.loc 1 107 0
 108 0004 0420     		movs	r0, #4
 109 0006 0B49     		ldr	r1, .L6
 110 0008 FFF7FEFF 		bl	CyIntSetVector
 108:.\Generated_Source\PSoC5/Pump_PL.c ****             CyIntSetPriority(Pump_PL_RX_VECT_NUM, Pump_PL_RX_PRIOR_NUM);
 111              		.loc 1 108 0
 112 000c 0420     		movs	r0, #4
 113 000e 0721     		movs	r1, #7
 114 0010 FFF7FEFF 		bl	CyIntSetPriority
 109:.\Generated_Source\PSoC5/Pump_PL.c ****         #endif /* End Pump_PL_RX_INTERRUPT_ENABLED */
 110:.\Generated_Source\PSoC5/Pump_PL.c **** 
 111:.\Generated_Source\PSoC5/Pump_PL.c ****         #if (Pump_PL_RXHW_ADDRESS_ENABLED)
 112:.\Generated_Source\PSoC5/Pump_PL.c ****             Pump_PL_SetRxAddressMode(Pump_PL_RXAddressMode);
 113:.\Generated_Source\PSoC5/Pump_PL.c ****             Pump_PL_SetRxAddress1(Pump_PL_RXHWADDRESS1);
 114:.\Generated_Source\PSoC5/Pump_PL.c ****             Pump_PL_SetRxAddress2(Pump_PL_RXHWADDRESS2);
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 5


 115:.\Generated_Source\PSoC5/Pump_PL.c ****         #endif /* End Pump_PL_RXHW_ADDRESS_ENABLED */
 116:.\Generated_Source\PSoC5/Pump_PL.c **** 
 117:.\Generated_Source\PSoC5/Pump_PL.c ****         /* Init Count7 period */
 118:.\Generated_Source\PSoC5/Pump_PL.c ****         Pump_PL_RXBITCTR_PERIOD_REG = Pump_PL_RXBITCTR_INIT;
 115              		.loc 1 118 0
 116 0014 084B     		ldr	r3, .L6+4
 117 0016 7222     		movs	r2, #114
 118 0018 1A70     		strb	r2, [r3]
 119:.\Generated_Source\PSoC5/Pump_PL.c ****         /* Configure the Initial RX interrupt mask */
 120:.\Generated_Source\PSoC5/Pump_PL.c ****         Pump_PL_RXSTATUS_MASK_REG  = Pump_PL_INIT_RX_INTERRUPTS_MASK;
 119              		.loc 1 120 0
 120 001a 084B     		ldr	r3, .L6+8
 121 001c 2022     		movs	r2, #32
 122 001e 1A70     		strb	r2, [r3]
 121:.\Generated_Source\PSoC5/Pump_PL.c ****     #endif /* End Pump_PL_RX_ENABLED || Pump_PL_HD_ENABLED*/
 122:.\Generated_Source\PSoC5/Pump_PL.c **** 
 123:.\Generated_Source\PSoC5/Pump_PL.c ****     #if(Pump_PL_TX_ENABLED)
 124:.\Generated_Source\PSoC5/Pump_PL.c ****         #if(Pump_PL_TX_INTERRUPT_ENABLED && (Pump_PL_TXBUFFERSIZE > Pump_PL_FIFO_LENGTH))
 125:.\Generated_Source\PSoC5/Pump_PL.c ****             /* Set the TX Interrupt. */
 126:.\Generated_Source\PSoC5/Pump_PL.c ****             (void)CyIntSetVector(Pump_PL_TX_VECT_NUM, &Pump_PL_TXISR);
 127:.\Generated_Source\PSoC5/Pump_PL.c ****             CyIntSetPriority(Pump_PL_TX_VECT_NUM, Pump_PL_TX_PRIOR_NUM);
 128:.\Generated_Source\PSoC5/Pump_PL.c ****         #endif /* End Pump_PL_TX_INTERRUPT_ENABLED */
 129:.\Generated_Source\PSoC5/Pump_PL.c **** 
 130:.\Generated_Source\PSoC5/Pump_PL.c ****         /* Write Counter Value for TX Bit Clk Generator*/
 131:.\Generated_Source\PSoC5/Pump_PL.c ****         #if(Pump_PL_TXCLKGEN_DP)
 132:.\Generated_Source\PSoC5/Pump_PL.c ****             Pump_PL_TXBITCLKGEN_CTR_REG = Pump_PL_BIT_CENTER;
 123              		.loc 1 132 0
 124 0020 074B     		ldr	r3, .L6+12
 125 0022 0722     		movs	r2, #7
 126 0024 1A70     		strb	r2, [r3]
 133:.\Generated_Source\PSoC5/Pump_PL.c ****             Pump_PL_TXBITCLKTX_COMPLETE_REG = (Pump_PL_NUMBER_OF_DATA_BITS +
 127              		.loc 1 133 0
 128 0026 074B     		ldr	r3, .L6+16
 129 0028 4822     		movs	r2, #72
 130 002a 1A70     		strb	r2, [r3]
 134:.\Generated_Source\PSoC5/Pump_PL.c ****                         Pump_PL_NUMBER_OF_START_BIT) * Pump_PL_OVER_SAMPLE_COUNT;
 135:.\Generated_Source\PSoC5/Pump_PL.c ****         #else
 136:.\Generated_Source\PSoC5/Pump_PL.c ****             Pump_PL_TXBITCTR_PERIOD_REG = ((Pump_PL_NUMBER_OF_DATA_BITS +
 137:.\Generated_Source\PSoC5/Pump_PL.c ****                         Pump_PL_NUMBER_OF_START_BIT) * Pump_PL_OVER_SAMPLE_8) - 1u;
 138:.\Generated_Source\PSoC5/Pump_PL.c ****         #endif /* End Pump_PL_TXCLKGEN_DP */
 139:.\Generated_Source\PSoC5/Pump_PL.c **** 
 140:.\Generated_Source\PSoC5/Pump_PL.c ****         /* Configure the Initial TX interrupt mask */
 141:.\Generated_Source\PSoC5/Pump_PL.c ****         #if(Pump_PL_TX_INTERRUPT_ENABLED && (Pump_PL_TXBUFFERSIZE > Pump_PL_FIFO_LENGTH))
 142:.\Generated_Source\PSoC5/Pump_PL.c ****             Pump_PL_TXSTATUS_MASK_REG = Pump_PL_TX_STS_FIFO_EMPTY;
 143:.\Generated_Source\PSoC5/Pump_PL.c ****         #else
 144:.\Generated_Source\PSoC5/Pump_PL.c ****             Pump_PL_TXSTATUS_MASK_REG = Pump_PL_INIT_TX_INTERRUPTS_MASK;
 131              		.loc 1 144 0
 132 002c 064B     		ldr	r3, .L6+20
 133 002e 0022     		movs	r2, #0
 134 0030 1A70     		strb	r2, [r3]
 145:.\Generated_Source\PSoC5/Pump_PL.c ****         #endif /*End Pump_PL_TX_INTERRUPT_ENABLED*/
 146:.\Generated_Source\PSoC5/Pump_PL.c **** 
 147:.\Generated_Source\PSoC5/Pump_PL.c ****     #endif /* End Pump_PL_TX_ENABLED */
 148:.\Generated_Source\PSoC5/Pump_PL.c **** 
 149:.\Generated_Source\PSoC5/Pump_PL.c ****     #if(Pump_PL_PARITY_TYPE_SW)  /* Write Parity to Control Register */
 150:.\Generated_Source\PSoC5/Pump_PL.c ****         Pump_PL_WriteControlRegister( \
 151:.\Generated_Source\PSoC5/Pump_PL.c ****             (Pump_PL_ReadControlRegister() & (uint8)~Pump_PL_CTRL_PARITY_TYPE_MASK) | \
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 6


 152:.\Generated_Source\PSoC5/Pump_PL.c ****             (uint8)(Pump_PL_PARITY_TYPE << Pump_PL_CTRL_PARITY_TYPE0_SHIFT) );
 153:.\Generated_Source\PSoC5/Pump_PL.c ****     #endif /* End Pump_PL_PARITY_TYPE_SW */
 154:.\Generated_Source\PSoC5/Pump_PL.c **** }
 135              		.loc 1 154 0
 136 0032 80BD     		pop	{r7, pc}
 137              	.L7:
 138              		.align	2
 139              	.L6:
 140 0034 00000000 		.word	Pump_PL_RXISR
 141 0038 84650040 		.word	1073767812
 142 003c 86650040 		.word	1073767814
 143 0040 29640040 		.word	1073767465
 144 0044 39640040 		.word	1073767481
 145 0048 8C640040 		.word	1073767564
 146              		.cfi_endproc
 147              	.LFE1:
 148              		.size	Pump_PL_Init, .-Pump_PL_Init
 149              		.section	.text.Pump_PL_Enable,"ax",%progbits
 150              		.align	2
 151              		.global	Pump_PL_Enable
 152              		.thumb
 153              		.thumb_func
 154              		.type	Pump_PL_Enable, %function
 155              	Pump_PL_Enable:
 156              	.LFB2:
 155:.\Generated_Source\PSoC5/Pump_PL.c **** 
 156:.\Generated_Source\PSoC5/Pump_PL.c **** 
 157:.\Generated_Source\PSoC5/Pump_PL.c **** /*******************************************************************************
 158:.\Generated_Source\PSoC5/Pump_PL.c **** * Function Name: Pump_PL_Enable
 159:.\Generated_Source\PSoC5/Pump_PL.c **** ********************************************************************************
 160:.\Generated_Source\PSoC5/Pump_PL.c **** *
 161:.\Generated_Source\PSoC5/Pump_PL.c **** * Summary:
 162:.\Generated_Source\PSoC5/Pump_PL.c **** *  Enables the UART block operation
 163:.\Generated_Source\PSoC5/Pump_PL.c **** *
 164:.\Generated_Source\PSoC5/Pump_PL.c **** * Parameters:
 165:.\Generated_Source\PSoC5/Pump_PL.c **** *  None.
 166:.\Generated_Source\PSoC5/Pump_PL.c **** *
 167:.\Generated_Source\PSoC5/Pump_PL.c **** * Return:
 168:.\Generated_Source\PSoC5/Pump_PL.c **** *  None.
 169:.\Generated_Source\PSoC5/Pump_PL.c **** *
 170:.\Generated_Source\PSoC5/Pump_PL.c **** * Global Variables:
 171:.\Generated_Source\PSoC5/Pump_PL.c **** *  Pump_PL_rxAddressDetected - set to initial state (0).
 172:.\Generated_Source\PSoC5/Pump_PL.c **** *
 173:.\Generated_Source\PSoC5/Pump_PL.c **** *******************************************************************************/
 174:.\Generated_Source\PSoC5/Pump_PL.c **** void Pump_PL_Enable(void) 
 175:.\Generated_Source\PSoC5/Pump_PL.c **** {
 157              		.loc 1 175 0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 8
 160              		@ frame_needed = 1, uses_anonymous_args = 0
 161 0000 80B5     		push	{r7, lr}
 162              		.cfi_def_cfa_offset 8
 163              		.cfi_offset 7, -8
 164              		.cfi_offset 14, -4
 165 0002 82B0     		sub	sp, sp, #8
 166              		.cfi_def_cfa_offset 16
 167 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 7


 168              		.cfi_def_cfa_register 7
 176:.\Generated_Source\PSoC5/Pump_PL.c ****     uint8 enableInterrupts;
 177:.\Generated_Source\PSoC5/Pump_PL.c ****     enableInterrupts = CyEnterCriticalSection();
 169              		.loc 1 177 0
 170 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 171 000a 0346     		mov	r3, r0
 172 000c FB71     		strb	r3, [r7, #7]
 178:.\Generated_Source\PSoC5/Pump_PL.c **** 
 179:.\Generated_Source\PSoC5/Pump_PL.c ****     #if(Pump_PL_RX_ENABLED || Pump_PL_HD_ENABLED)
 180:.\Generated_Source\PSoC5/Pump_PL.c ****         /*RX Counter (Count7) Enable */
 181:.\Generated_Source\PSoC5/Pump_PL.c ****         Pump_PL_RXBITCTR_CONTROL_REG |= Pump_PL_CNTR_ENABLE;
 173              		.loc 1 181 0
 174 000e 114A     		ldr	r2, .L9
 175 0010 104B     		ldr	r3, .L9
 176 0012 1B78     		ldrb	r3, [r3]
 177 0014 DBB2     		uxtb	r3, r3
 178 0016 43F02003 		orr	r3, r3, #32
 179 001a DBB2     		uxtb	r3, r3
 180 001c 1370     		strb	r3, [r2]
 182:.\Generated_Source\PSoC5/Pump_PL.c ****         /* Enable the RX Interrupt. */
 183:.\Generated_Source\PSoC5/Pump_PL.c ****         Pump_PL_RXSTATUS_ACTL_REG  |= Pump_PL_INT_ENABLE;
 181              		.loc 1 183 0
 182 001e 0E4A     		ldr	r2, .L9+4
 183 0020 0D4B     		ldr	r3, .L9+4
 184 0022 1B78     		ldrb	r3, [r3]
 185 0024 DBB2     		uxtb	r3, r3
 186 0026 43F01003 		orr	r3, r3, #16
 187 002a DBB2     		uxtb	r3, r3
 188 002c 1370     		strb	r3, [r2]
 184:.\Generated_Source\PSoC5/Pump_PL.c ****         #if(Pump_PL_RX_INTERRUPT_ENABLED && (Pump_PL_RXBUFFERSIZE > Pump_PL_FIFO_LENGTH))
 185:.\Generated_Source\PSoC5/Pump_PL.c ****             CyIntEnable(Pump_PL_RX_VECT_NUM);
 189              		.loc 1 185 0
 190 002e 0B4B     		ldr	r3, .L9+8
 191 0030 1022     		movs	r2, #16
 192 0032 1A60     		str	r2, [r3]
 186:.\Generated_Source\PSoC5/Pump_PL.c ****             #if (Pump_PL_RXHW_ADDRESS_ENABLED)
 187:.\Generated_Source\PSoC5/Pump_PL.c ****                 Pump_PL_rxAddressDetected = 0u;
 188:.\Generated_Source\PSoC5/Pump_PL.c ****             #endif /* End Pump_PL_RXHW_ADDRESS_ENABLED */
 189:.\Generated_Source\PSoC5/Pump_PL.c ****         #endif /* End Pump_PL_RX_INTERRUPT_ENABLED */
 190:.\Generated_Source\PSoC5/Pump_PL.c ****     #endif /* End Pump_PL_RX_ENABLED || Pump_PL_HD_ENABLED*/
 191:.\Generated_Source\PSoC5/Pump_PL.c **** 
 192:.\Generated_Source\PSoC5/Pump_PL.c ****     #if(Pump_PL_TX_ENABLED)
 193:.\Generated_Source\PSoC5/Pump_PL.c ****         /*TX Counter (DP/Count7) Enable */
 194:.\Generated_Source\PSoC5/Pump_PL.c ****         #if(!Pump_PL_TXCLKGEN_DP)
 195:.\Generated_Source\PSoC5/Pump_PL.c ****             Pump_PL_TXBITCTR_CONTROL_REG |= Pump_PL_CNTR_ENABLE;
 196:.\Generated_Source\PSoC5/Pump_PL.c ****         #endif /* End Pump_PL_TXCLKGEN_DP */
 197:.\Generated_Source\PSoC5/Pump_PL.c ****         /* Enable the TX Interrupt. */
 198:.\Generated_Source\PSoC5/Pump_PL.c ****         Pump_PL_TXSTATUS_ACTL_REG |= Pump_PL_INT_ENABLE;
 193              		.loc 1 198 0
 194 0034 0A4A     		ldr	r2, .L9+12
 195 0036 0A4B     		ldr	r3, .L9+12
 196 0038 1B78     		ldrb	r3, [r3]
 197 003a DBB2     		uxtb	r3, r3
 198 003c 43F01003 		orr	r3, r3, #16
 199 0040 DBB2     		uxtb	r3, r3
 200 0042 1370     		strb	r3, [r2]
 199:.\Generated_Source\PSoC5/Pump_PL.c ****         #if(Pump_PL_TX_INTERRUPT_ENABLED && (Pump_PL_TXBUFFERSIZE > Pump_PL_FIFO_LENGTH))
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 8


 200:.\Generated_Source\PSoC5/Pump_PL.c ****             CyIntEnable(Pump_PL_TX_VECT_NUM);
 201:.\Generated_Source\PSoC5/Pump_PL.c ****         #endif /* End Pump_PL_TX_INTERRUPT_ENABLED*/
 202:.\Generated_Source\PSoC5/Pump_PL.c ****      #endif /* End Pump_PL_TX_ENABLED */
 203:.\Generated_Source\PSoC5/Pump_PL.c **** 
 204:.\Generated_Source\PSoC5/Pump_PL.c ****     #if(Pump_PL_INTERNAL_CLOCK_USED)
 205:.\Generated_Source\PSoC5/Pump_PL.c ****         /* Enable the clock. */
 206:.\Generated_Source\PSoC5/Pump_PL.c ****         Pump_PL_IntClock_Start();
 207:.\Generated_Source\PSoC5/Pump_PL.c ****     #endif /* End Pump_PL_INTERNAL_CLOCK_USED */
 208:.\Generated_Source\PSoC5/Pump_PL.c **** 
 209:.\Generated_Source\PSoC5/Pump_PL.c ****     CyExitCriticalSection(enableInterrupts);
 201              		.loc 1 209 0
 202 0044 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 203 0046 1846     		mov	r0, r3
 204 0048 FFF7FEFF 		bl	CyExitCriticalSection
 210:.\Generated_Source\PSoC5/Pump_PL.c **** }
 205              		.loc 1 210 0
 206 004c 0837     		adds	r7, r7, #8
 207              		.cfi_def_cfa_offset 8
 208 004e BD46     		mov	sp, r7
 209              		.cfi_def_cfa_register 13
 210              		@ sp needed
 211 0050 80BD     		pop	{r7, pc}
 212              	.L10:
 213 0052 00BF     		.align	2
 214              	.L9:
 215 0054 94650040 		.word	1073767828
 216 0058 96650040 		.word	1073767830
 217 005c 00E100E0 		.word	-536813312
 218 0060 9C640040 		.word	1073767580
 219              		.cfi_endproc
 220              	.LFE2:
 221              		.size	Pump_PL_Enable, .-Pump_PL_Enable
 222              		.section	.text.Pump_PL_Stop,"ax",%progbits
 223              		.align	2
 224              		.global	Pump_PL_Stop
 225              		.thumb
 226              		.thumb_func
 227              		.type	Pump_PL_Stop, %function
 228              	Pump_PL_Stop:
 229              	.LFB3:
 211:.\Generated_Source\PSoC5/Pump_PL.c **** 
 212:.\Generated_Source\PSoC5/Pump_PL.c **** 
 213:.\Generated_Source\PSoC5/Pump_PL.c **** /*******************************************************************************
 214:.\Generated_Source\PSoC5/Pump_PL.c **** * Function Name: Pump_PL_Stop
 215:.\Generated_Source\PSoC5/Pump_PL.c **** ********************************************************************************
 216:.\Generated_Source\PSoC5/Pump_PL.c **** *
 217:.\Generated_Source\PSoC5/Pump_PL.c **** * Summary:
 218:.\Generated_Source\PSoC5/Pump_PL.c **** *  Disable the UART component
 219:.\Generated_Source\PSoC5/Pump_PL.c **** *
 220:.\Generated_Source\PSoC5/Pump_PL.c **** * Parameters:
 221:.\Generated_Source\PSoC5/Pump_PL.c **** *  None.
 222:.\Generated_Source\PSoC5/Pump_PL.c **** *
 223:.\Generated_Source\PSoC5/Pump_PL.c **** * Return:
 224:.\Generated_Source\PSoC5/Pump_PL.c **** *  None.
 225:.\Generated_Source\PSoC5/Pump_PL.c **** *
 226:.\Generated_Source\PSoC5/Pump_PL.c **** *******************************************************************************/
 227:.\Generated_Source\PSoC5/Pump_PL.c **** void Pump_PL_Stop(void) 
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 9


 228:.\Generated_Source\PSoC5/Pump_PL.c **** {
 230              		.loc 1 228 0
 231              		.cfi_startproc
 232              		@ args = 0, pretend = 0, frame = 8
 233              		@ frame_needed = 1, uses_anonymous_args = 0
 234 0000 80B5     		push	{r7, lr}
 235              		.cfi_def_cfa_offset 8
 236              		.cfi_offset 7, -8
 237              		.cfi_offset 14, -4
 238 0002 82B0     		sub	sp, sp, #8
 239              		.cfi_def_cfa_offset 16
 240 0004 00AF     		add	r7, sp, #0
 241              		.cfi_def_cfa_register 7
 229:.\Generated_Source\PSoC5/Pump_PL.c ****     uint8 enableInterrupts;
 230:.\Generated_Source\PSoC5/Pump_PL.c ****     enableInterrupts = CyEnterCriticalSection();
 242              		.loc 1 230 0
 243 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 244 000a 0346     		mov	r3, r0
 245 000c FB71     		strb	r3, [r7, #7]
 231:.\Generated_Source\PSoC5/Pump_PL.c **** 
 232:.\Generated_Source\PSoC5/Pump_PL.c ****     /* Write Bit Counter Disable */
 233:.\Generated_Source\PSoC5/Pump_PL.c ****     #if(Pump_PL_RX_ENABLED || Pump_PL_HD_ENABLED)
 234:.\Generated_Source\PSoC5/Pump_PL.c ****         Pump_PL_RXBITCTR_CONTROL_REG &= (uint8)~Pump_PL_CNTR_ENABLE;
 246              		.loc 1 234 0
 247 000e 104A     		ldr	r2, .L12
 248 0010 0F4B     		ldr	r3, .L12
 249 0012 1B78     		ldrb	r3, [r3]
 250 0014 DBB2     		uxtb	r3, r3
 251 0016 23F02003 		bic	r3, r3, #32
 252 001a DBB2     		uxtb	r3, r3
 253 001c 1370     		strb	r3, [r2]
 235:.\Generated_Source\PSoC5/Pump_PL.c ****     #endif /* End Pump_PL_RX_ENABLED */
 236:.\Generated_Source\PSoC5/Pump_PL.c **** 
 237:.\Generated_Source\PSoC5/Pump_PL.c ****     #if(Pump_PL_TX_ENABLED)
 238:.\Generated_Source\PSoC5/Pump_PL.c ****         #if(!Pump_PL_TXCLKGEN_DP)
 239:.\Generated_Source\PSoC5/Pump_PL.c ****             Pump_PL_TXBITCTR_CONTROL_REG &= (uint8)~Pump_PL_CNTR_ENABLE;
 240:.\Generated_Source\PSoC5/Pump_PL.c ****         #endif /* End Pump_PL_TXCLKGEN_DP */
 241:.\Generated_Source\PSoC5/Pump_PL.c ****     #endif /* Pump_PL_TX_ENABLED */
 242:.\Generated_Source\PSoC5/Pump_PL.c **** 
 243:.\Generated_Source\PSoC5/Pump_PL.c ****     #if(Pump_PL_INTERNAL_CLOCK_USED)
 244:.\Generated_Source\PSoC5/Pump_PL.c ****         /* Disable the clock. */
 245:.\Generated_Source\PSoC5/Pump_PL.c ****         Pump_PL_IntClock_Stop();
 246:.\Generated_Source\PSoC5/Pump_PL.c ****     #endif /* End Pump_PL_INTERNAL_CLOCK_USED */
 247:.\Generated_Source\PSoC5/Pump_PL.c **** 
 248:.\Generated_Source\PSoC5/Pump_PL.c ****     /* Disable internal interrupt component */
 249:.\Generated_Source\PSoC5/Pump_PL.c ****     #if(Pump_PL_RX_ENABLED || Pump_PL_HD_ENABLED)
 250:.\Generated_Source\PSoC5/Pump_PL.c ****         Pump_PL_RXSTATUS_ACTL_REG  &= (uint8)~Pump_PL_INT_ENABLE;
 254              		.loc 1 250 0
 255 001e 0D4A     		ldr	r2, .L12+4
 256 0020 0C4B     		ldr	r3, .L12+4
 257 0022 1B78     		ldrb	r3, [r3]
 258 0024 DBB2     		uxtb	r3, r3
 259 0026 23F01003 		bic	r3, r3, #16
 260 002a DBB2     		uxtb	r3, r3
 261 002c 1370     		strb	r3, [r2]
 251:.\Generated_Source\PSoC5/Pump_PL.c ****         #if(Pump_PL_RX_INTERRUPT_ENABLED && (Pump_PL_RXBUFFERSIZE > Pump_PL_FIFO_LENGTH))
 252:.\Generated_Source\PSoC5/Pump_PL.c ****             Pump_PL_DisableRxInt();
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 10


 262              		.loc 1 252 0
 263 002e FFF7FEFF 		bl	Pump_PL_DisableRxInt
 253:.\Generated_Source\PSoC5/Pump_PL.c ****         #endif /* End Pump_PL_RX_INTERRUPT_ENABLED */
 254:.\Generated_Source\PSoC5/Pump_PL.c ****     #endif /* End Pump_PL_RX_ENABLED */
 255:.\Generated_Source\PSoC5/Pump_PL.c **** 
 256:.\Generated_Source\PSoC5/Pump_PL.c ****     #if(Pump_PL_TX_ENABLED)
 257:.\Generated_Source\PSoC5/Pump_PL.c ****         Pump_PL_TXSTATUS_ACTL_REG &= (uint8)~Pump_PL_INT_ENABLE;
 264              		.loc 1 257 0
 265 0032 094A     		ldr	r2, .L12+8
 266 0034 084B     		ldr	r3, .L12+8
 267 0036 1B78     		ldrb	r3, [r3]
 268 0038 DBB2     		uxtb	r3, r3
 269 003a 23F01003 		bic	r3, r3, #16
 270 003e DBB2     		uxtb	r3, r3
 271 0040 1370     		strb	r3, [r2]
 258:.\Generated_Source\PSoC5/Pump_PL.c ****         #if(Pump_PL_TX_INTERRUPT_ENABLED && (Pump_PL_TXBUFFERSIZE > Pump_PL_FIFO_LENGTH))
 259:.\Generated_Source\PSoC5/Pump_PL.c ****             Pump_PL_DisableTxInt();
 260:.\Generated_Source\PSoC5/Pump_PL.c ****         #endif /* End Pump_PL_TX_INTERRUPT_ENABLED */
 261:.\Generated_Source\PSoC5/Pump_PL.c ****     #endif /* End Pump_PL_TX_ENABLED */
 262:.\Generated_Source\PSoC5/Pump_PL.c **** 
 263:.\Generated_Source\PSoC5/Pump_PL.c ****     CyExitCriticalSection(enableInterrupts);
 272              		.loc 1 263 0
 273 0042 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 274 0044 1846     		mov	r0, r3
 275 0046 FFF7FEFF 		bl	CyExitCriticalSection
 264:.\Generated_Source\PSoC5/Pump_PL.c **** }
 276              		.loc 1 264 0
 277 004a 0837     		adds	r7, r7, #8
 278              		.cfi_def_cfa_offset 8
 279 004c BD46     		mov	sp, r7
 280              		.cfi_def_cfa_register 13
 281              		@ sp needed
 282 004e 80BD     		pop	{r7, pc}
 283              	.L13:
 284              		.align	2
 285              	.L12:
 286 0050 94650040 		.word	1073767828
 287 0054 96650040 		.word	1073767830
 288 0058 9C640040 		.word	1073767580
 289              		.cfi_endproc
 290              	.LFE3:
 291              		.size	Pump_PL_Stop, .-Pump_PL_Stop
 292              		.section	.text.Pump_PL_ReadControlRegister,"ax",%progbits
 293              		.align	2
 294              		.global	Pump_PL_ReadControlRegister
 295              		.thumb
 296              		.thumb_func
 297              		.type	Pump_PL_ReadControlRegister, %function
 298              	Pump_PL_ReadControlRegister:
 299              	.LFB4:
 265:.\Generated_Source\PSoC5/Pump_PL.c **** 
 266:.\Generated_Source\PSoC5/Pump_PL.c **** 
 267:.\Generated_Source\PSoC5/Pump_PL.c **** /*******************************************************************************
 268:.\Generated_Source\PSoC5/Pump_PL.c **** * Function Name: Pump_PL_ReadControlRegister
 269:.\Generated_Source\PSoC5/Pump_PL.c **** ********************************************************************************
 270:.\Generated_Source\PSoC5/Pump_PL.c **** *
 271:.\Generated_Source\PSoC5/Pump_PL.c **** * Summary:
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 11


 272:.\Generated_Source\PSoC5/Pump_PL.c **** *  Read the current state of the control register
 273:.\Generated_Source\PSoC5/Pump_PL.c **** *
 274:.\Generated_Source\PSoC5/Pump_PL.c **** * Parameters:
 275:.\Generated_Source\PSoC5/Pump_PL.c **** *  None.
 276:.\Generated_Source\PSoC5/Pump_PL.c **** *
 277:.\Generated_Source\PSoC5/Pump_PL.c **** * Return:
 278:.\Generated_Source\PSoC5/Pump_PL.c **** *  Current state of the control register.
 279:.\Generated_Source\PSoC5/Pump_PL.c **** *
 280:.\Generated_Source\PSoC5/Pump_PL.c **** *******************************************************************************/
 281:.\Generated_Source\PSoC5/Pump_PL.c **** uint8 Pump_PL_ReadControlRegister(void) 
 282:.\Generated_Source\PSoC5/Pump_PL.c **** {
 300              		.loc 1 282 0
 301              		.cfi_startproc
 302              		@ args = 0, pretend = 0, frame = 0
 303              		@ frame_needed = 1, uses_anonymous_args = 0
 304              		@ link register save eliminated.
 305 0000 80B4     		push	{r7}
 306              		.cfi_def_cfa_offset 4
 307              		.cfi_offset 7, -4
 308 0002 00AF     		add	r7, sp, #0
 309              		.cfi_def_cfa_register 7
 283:.\Generated_Source\PSoC5/Pump_PL.c ****     #if( Pump_PL_CONTROL_REG_REMOVED )
 284:.\Generated_Source\PSoC5/Pump_PL.c ****         return(0u);
 310              		.loc 1 284 0
 311 0004 0023     		movs	r3, #0
 285:.\Generated_Source\PSoC5/Pump_PL.c ****     #else
 286:.\Generated_Source\PSoC5/Pump_PL.c ****         return(Pump_PL_CONTROL_REG);
 287:.\Generated_Source\PSoC5/Pump_PL.c ****     #endif /* End Pump_PL_CONTROL_REG_REMOVED */
 288:.\Generated_Source\PSoC5/Pump_PL.c **** }
 312              		.loc 1 288 0
 313 0006 1846     		mov	r0, r3
 314 0008 BD46     		mov	sp, r7
 315              		.cfi_def_cfa_register 13
 316              		@ sp needed
 317 000a 5DF8047B 		ldr	r7, [sp], #4
 318              		.cfi_restore 7
 319              		.cfi_def_cfa_offset 0
 320 000e 7047     		bx	lr
 321              		.cfi_endproc
 322              	.LFE4:
 323              		.size	Pump_PL_ReadControlRegister, .-Pump_PL_ReadControlRegister
 324              		.section	.text.Pump_PL_WriteControlRegister,"ax",%progbits
 325              		.align	2
 326              		.global	Pump_PL_WriteControlRegister
 327              		.thumb
 328              		.thumb_func
 329              		.type	Pump_PL_WriteControlRegister, %function
 330              	Pump_PL_WriteControlRegister:
 331              	.LFB5:
 289:.\Generated_Source\PSoC5/Pump_PL.c **** 
 290:.\Generated_Source\PSoC5/Pump_PL.c **** 
 291:.\Generated_Source\PSoC5/Pump_PL.c **** /*******************************************************************************
 292:.\Generated_Source\PSoC5/Pump_PL.c **** * Function Name: Pump_PL_WriteControlRegister
 293:.\Generated_Source\PSoC5/Pump_PL.c **** ********************************************************************************
 294:.\Generated_Source\PSoC5/Pump_PL.c **** *
 295:.\Generated_Source\PSoC5/Pump_PL.c **** * Summary:
 296:.\Generated_Source\PSoC5/Pump_PL.c **** *  Writes an 8-bit value into the control register
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 12


 297:.\Generated_Source\PSoC5/Pump_PL.c **** *
 298:.\Generated_Source\PSoC5/Pump_PL.c **** * Parameters:
 299:.\Generated_Source\PSoC5/Pump_PL.c **** *  control:  control register value
 300:.\Generated_Source\PSoC5/Pump_PL.c **** *
 301:.\Generated_Source\PSoC5/Pump_PL.c **** * Return:
 302:.\Generated_Source\PSoC5/Pump_PL.c **** *  None.
 303:.\Generated_Source\PSoC5/Pump_PL.c **** *
 304:.\Generated_Source\PSoC5/Pump_PL.c **** *******************************************************************************/
 305:.\Generated_Source\PSoC5/Pump_PL.c **** void  Pump_PL_WriteControlRegister(uint8 control) 
 306:.\Generated_Source\PSoC5/Pump_PL.c **** {
 332              		.loc 1 306 0
 333              		.cfi_startproc
 334              		@ args = 0, pretend = 0, frame = 8
 335              		@ frame_needed = 1, uses_anonymous_args = 0
 336              		@ link register save eliminated.
 337 0000 80B4     		push	{r7}
 338              		.cfi_def_cfa_offset 4
 339              		.cfi_offset 7, -4
 340 0002 83B0     		sub	sp, sp, #12
 341              		.cfi_def_cfa_offset 16
 342 0004 00AF     		add	r7, sp, #0
 343              		.cfi_def_cfa_register 7
 344 0006 0346     		mov	r3, r0
 345 0008 FB71     		strb	r3, [r7, #7]
 307:.\Generated_Source\PSoC5/Pump_PL.c ****     #if( Pump_PL_CONTROL_REG_REMOVED )
 308:.\Generated_Source\PSoC5/Pump_PL.c ****         if(control != 0u) { }      /* release compiler warning */
 309:.\Generated_Source\PSoC5/Pump_PL.c ****     #else
 310:.\Generated_Source\PSoC5/Pump_PL.c ****        Pump_PL_CONTROL_REG = control;
 311:.\Generated_Source\PSoC5/Pump_PL.c ****     #endif /* End Pump_PL_CONTROL_REG_REMOVED */
 312:.\Generated_Source\PSoC5/Pump_PL.c **** }
 346              		.loc 1 312 0
 347 000a 0C37     		adds	r7, r7, #12
 348              		.cfi_def_cfa_offset 4
 349 000c BD46     		mov	sp, r7
 350              		.cfi_def_cfa_register 13
 351              		@ sp needed
 352 000e 5DF8047B 		ldr	r7, [sp], #4
 353              		.cfi_restore 7
 354              		.cfi_def_cfa_offset 0
 355 0012 7047     		bx	lr
 356              		.cfi_endproc
 357              	.LFE5:
 358              		.size	Pump_PL_WriteControlRegister, .-Pump_PL_WriteControlRegister
 359              		.section	.text.Pump_PL_EnableRxInt,"ax",%progbits
 360              		.align	2
 361              		.global	Pump_PL_EnableRxInt
 362              		.thumb
 363              		.thumb_func
 364              		.type	Pump_PL_EnableRxInt, %function
 365              	Pump_PL_EnableRxInt:
 366              	.LFB6:
 313:.\Generated_Source\PSoC5/Pump_PL.c **** 
 314:.\Generated_Source\PSoC5/Pump_PL.c **** 
 315:.\Generated_Source\PSoC5/Pump_PL.c **** #if(Pump_PL_RX_ENABLED || Pump_PL_HD_ENABLED)
 316:.\Generated_Source\PSoC5/Pump_PL.c **** 
 317:.\Generated_Source\PSoC5/Pump_PL.c ****     #if(Pump_PL_RX_INTERRUPT_ENABLED)
 318:.\Generated_Source\PSoC5/Pump_PL.c **** 
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 13


 319:.\Generated_Source\PSoC5/Pump_PL.c ****         /*******************************************************************************
 320:.\Generated_Source\PSoC5/Pump_PL.c ****         * Function Name: Pump_PL_EnableRxInt
 321:.\Generated_Source\PSoC5/Pump_PL.c ****         ********************************************************************************
 322:.\Generated_Source\PSoC5/Pump_PL.c ****         *
 323:.\Generated_Source\PSoC5/Pump_PL.c ****         * Summary:
 324:.\Generated_Source\PSoC5/Pump_PL.c ****         *  Enable RX interrupt generation
 325:.\Generated_Source\PSoC5/Pump_PL.c ****         *
 326:.\Generated_Source\PSoC5/Pump_PL.c ****         * Parameters:
 327:.\Generated_Source\PSoC5/Pump_PL.c ****         *  None.
 328:.\Generated_Source\PSoC5/Pump_PL.c ****         *
 329:.\Generated_Source\PSoC5/Pump_PL.c ****         * Return:
 330:.\Generated_Source\PSoC5/Pump_PL.c ****         *  None.
 331:.\Generated_Source\PSoC5/Pump_PL.c ****         *
 332:.\Generated_Source\PSoC5/Pump_PL.c ****         * Theory:
 333:.\Generated_Source\PSoC5/Pump_PL.c ****         *  Enable the interrupt output -or- the interrupt component itself
 334:.\Generated_Source\PSoC5/Pump_PL.c ****         *
 335:.\Generated_Source\PSoC5/Pump_PL.c ****         *******************************************************************************/
 336:.\Generated_Source\PSoC5/Pump_PL.c ****         void Pump_PL_EnableRxInt(void) 
 337:.\Generated_Source\PSoC5/Pump_PL.c ****         {
 367              		.loc 1 337 0
 368              		.cfi_startproc
 369              		@ args = 0, pretend = 0, frame = 0
 370              		@ frame_needed = 1, uses_anonymous_args = 0
 371              		@ link register save eliminated.
 372 0000 80B4     		push	{r7}
 373              		.cfi_def_cfa_offset 4
 374              		.cfi_offset 7, -4
 375 0002 00AF     		add	r7, sp, #0
 376              		.cfi_def_cfa_register 7
 338:.\Generated_Source\PSoC5/Pump_PL.c ****             CyIntEnable(Pump_PL_RX_VECT_NUM);
 377              		.loc 1 338 0
 378 0004 034B     		ldr	r3, .L18
 379 0006 1022     		movs	r2, #16
 380 0008 1A60     		str	r2, [r3]
 339:.\Generated_Source\PSoC5/Pump_PL.c ****         }
 381              		.loc 1 339 0
 382 000a BD46     		mov	sp, r7
 383              		.cfi_def_cfa_register 13
 384              		@ sp needed
 385 000c 5DF8047B 		ldr	r7, [sp], #4
 386              		.cfi_restore 7
 387              		.cfi_def_cfa_offset 0
 388 0010 7047     		bx	lr
 389              	.L19:
 390 0012 00BF     		.align	2
 391              	.L18:
 392 0014 00E100E0 		.word	-536813312
 393              		.cfi_endproc
 394              	.LFE6:
 395              		.size	Pump_PL_EnableRxInt, .-Pump_PL_EnableRxInt
 396              		.section	.text.Pump_PL_DisableRxInt,"ax",%progbits
 397              		.align	2
 398              		.global	Pump_PL_DisableRxInt
 399              		.thumb
 400              		.thumb_func
 401              		.type	Pump_PL_DisableRxInt, %function
 402              	Pump_PL_DisableRxInt:
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 14


 403              	.LFB7:
 340:.\Generated_Source\PSoC5/Pump_PL.c **** 
 341:.\Generated_Source\PSoC5/Pump_PL.c **** 
 342:.\Generated_Source\PSoC5/Pump_PL.c ****         /*******************************************************************************
 343:.\Generated_Source\PSoC5/Pump_PL.c ****         * Function Name: Pump_PL_DisableRxInt
 344:.\Generated_Source\PSoC5/Pump_PL.c ****         ********************************************************************************
 345:.\Generated_Source\PSoC5/Pump_PL.c ****         *
 346:.\Generated_Source\PSoC5/Pump_PL.c ****         * Summary:
 347:.\Generated_Source\PSoC5/Pump_PL.c ****         *  Disable RX interrupt generation
 348:.\Generated_Source\PSoC5/Pump_PL.c ****         *
 349:.\Generated_Source\PSoC5/Pump_PL.c ****         * Parameters:
 350:.\Generated_Source\PSoC5/Pump_PL.c ****         *  None.
 351:.\Generated_Source\PSoC5/Pump_PL.c ****         *
 352:.\Generated_Source\PSoC5/Pump_PL.c ****         * Return:
 353:.\Generated_Source\PSoC5/Pump_PL.c ****         *  None.
 354:.\Generated_Source\PSoC5/Pump_PL.c ****         *
 355:.\Generated_Source\PSoC5/Pump_PL.c ****         * Theory:
 356:.\Generated_Source\PSoC5/Pump_PL.c ****         *  Disable the interrupt output -or- the interrupt component itself
 357:.\Generated_Source\PSoC5/Pump_PL.c ****         *
 358:.\Generated_Source\PSoC5/Pump_PL.c ****         *******************************************************************************/
 359:.\Generated_Source\PSoC5/Pump_PL.c ****         void Pump_PL_DisableRxInt(void) 
 360:.\Generated_Source\PSoC5/Pump_PL.c ****         {
 404              		.loc 1 360 0
 405              		.cfi_startproc
 406              		@ args = 0, pretend = 0, frame = 0
 407              		@ frame_needed = 1, uses_anonymous_args = 0
 408              		@ link register save eliminated.
 409 0000 80B4     		push	{r7}
 410              		.cfi_def_cfa_offset 4
 411              		.cfi_offset 7, -4
 412 0002 00AF     		add	r7, sp, #0
 413              		.cfi_def_cfa_register 7
 361:.\Generated_Source\PSoC5/Pump_PL.c ****             CyIntDisable(Pump_PL_RX_VECT_NUM);
 414              		.loc 1 361 0
 415 0004 034B     		ldr	r3, .L21
 416 0006 1022     		movs	r2, #16
 417 0008 1A60     		str	r2, [r3]
 362:.\Generated_Source\PSoC5/Pump_PL.c ****         }
 418              		.loc 1 362 0
 419 000a BD46     		mov	sp, r7
 420              		.cfi_def_cfa_register 13
 421              		@ sp needed
 422 000c 5DF8047B 		ldr	r7, [sp], #4
 423              		.cfi_restore 7
 424              		.cfi_def_cfa_offset 0
 425 0010 7047     		bx	lr
 426              	.L22:
 427 0012 00BF     		.align	2
 428              	.L21:
 429 0014 80E100E0 		.word	-536813184
 430              		.cfi_endproc
 431              	.LFE7:
 432              		.size	Pump_PL_DisableRxInt, .-Pump_PL_DisableRxInt
 433              		.section	.text.Pump_PL_SetRxInterruptMode,"ax",%progbits
 434              		.align	2
 435              		.global	Pump_PL_SetRxInterruptMode
 436              		.thumb
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 15


 437              		.thumb_func
 438              		.type	Pump_PL_SetRxInterruptMode, %function
 439              	Pump_PL_SetRxInterruptMode:
 440              	.LFB8:
 363:.\Generated_Source\PSoC5/Pump_PL.c **** 
 364:.\Generated_Source\PSoC5/Pump_PL.c ****     #endif /* Pump_PL_RX_INTERRUPT_ENABLED */
 365:.\Generated_Source\PSoC5/Pump_PL.c **** 
 366:.\Generated_Source\PSoC5/Pump_PL.c **** 
 367:.\Generated_Source\PSoC5/Pump_PL.c ****     /*******************************************************************************
 368:.\Generated_Source\PSoC5/Pump_PL.c ****     * Function Name: Pump_PL_SetRxInterruptMode
 369:.\Generated_Source\PSoC5/Pump_PL.c ****     ********************************************************************************
 370:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 371:.\Generated_Source\PSoC5/Pump_PL.c ****     * Summary:
 372:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Configure which status bits trigger an interrupt event
 373:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 374:.\Generated_Source\PSoC5/Pump_PL.c ****     * Parameters:
 375:.\Generated_Source\PSoC5/Pump_PL.c ****     *  IntSrc:  An or'd combination of the desired status bit masks (defined in
 376:.\Generated_Source\PSoC5/Pump_PL.c ****     *           the header file)
 377:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 378:.\Generated_Source\PSoC5/Pump_PL.c ****     * Return:
 379:.\Generated_Source\PSoC5/Pump_PL.c ****     *  None.
 380:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 381:.\Generated_Source\PSoC5/Pump_PL.c ****     * Theory:
 382:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Enables the output of specific status bits to the interrupt controller
 383:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 384:.\Generated_Source\PSoC5/Pump_PL.c ****     *******************************************************************************/
 385:.\Generated_Source\PSoC5/Pump_PL.c ****     void Pump_PL_SetRxInterruptMode(uint8 intSrc) 
 386:.\Generated_Source\PSoC5/Pump_PL.c ****     {
 441              		.loc 1 386 0
 442              		.cfi_startproc
 443              		@ args = 0, pretend = 0, frame = 8
 444              		@ frame_needed = 1, uses_anonymous_args = 0
 445              		@ link register save eliminated.
 446 0000 80B4     		push	{r7}
 447              		.cfi_def_cfa_offset 4
 448              		.cfi_offset 7, -4
 449 0002 83B0     		sub	sp, sp, #12
 450              		.cfi_def_cfa_offset 16
 451 0004 00AF     		add	r7, sp, #0
 452              		.cfi_def_cfa_register 7
 453 0006 0346     		mov	r3, r0
 454 0008 FB71     		strb	r3, [r7, #7]
 387:.\Generated_Source\PSoC5/Pump_PL.c ****         Pump_PL_RXSTATUS_MASK_REG  = intSrc;
 455              		.loc 1 387 0
 456 000a 044A     		ldr	r2, .L24
 457 000c FB79     		ldrb	r3, [r7, #7]
 458 000e 1370     		strb	r3, [r2]
 388:.\Generated_Source\PSoC5/Pump_PL.c ****     }
 459              		.loc 1 388 0
 460 0010 0C37     		adds	r7, r7, #12
 461              		.cfi_def_cfa_offset 4
 462 0012 BD46     		mov	sp, r7
 463              		.cfi_def_cfa_register 13
 464              		@ sp needed
 465 0014 5DF8047B 		ldr	r7, [sp], #4
 466              		.cfi_restore 7
 467              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 16


 468 0018 7047     		bx	lr
 469              	.L25:
 470 001a 00BF     		.align	2
 471              	.L24:
 472 001c 86650040 		.word	1073767814
 473              		.cfi_endproc
 474              	.LFE8:
 475              		.size	Pump_PL_SetRxInterruptMode, .-Pump_PL_SetRxInterruptMode
 476              		.section	.text.Pump_PL_ReadRxData,"ax",%progbits
 477              		.align	2
 478              		.global	Pump_PL_ReadRxData
 479              		.thumb
 480              		.thumb_func
 481              		.type	Pump_PL_ReadRxData, %function
 482              	Pump_PL_ReadRxData:
 483              	.LFB9:
 389:.\Generated_Source\PSoC5/Pump_PL.c **** 
 390:.\Generated_Source\PSoC5/Pump_PL.c **** 
 391:.\Generated_Source\PSoC5/Pump_PL.c ****     /*******************************************************************************
 392:.\Generated_Source\PSoC5/Pump_PL.c ****     * Function Name: Pump_PL_ReadRxData
 393:.\Generated_Source\PSoC5/Pump_PL.c ****     ********************************************************************************
 394:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 395:.\Generated_Source\PSoC5/Pump_PL.c ****     * Summary:
 396:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Returns data in RX Data register without checking status register to
 397:.\Generated_Source\PSoC5/Pump_PL.c ****     *  determine if data is valid
 398:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 399:.\Generated_Source\PSoC5/Pump_PL.c ****     * Parameters:
 400:.\Generated_Source\PSoC5/Pump_PL.c ****     *  None.
 401:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 402:.\Generated_Source\PSoC5/Pump_PL.c ****     * Return:
 403:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Received data from RX register
 404:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 405:.\Generated_Source\PSoC5/Pump_PL.c ****     * Global Variables:
 406:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_rxBuffer - RAM buffer pointer for save received data.
 407:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_rxBufferWrite - cyclic index for write to rxBuffer,
 408:.\Generated_Source\PSoC5/Pump_PL.c ****     *     checked to identify new data.
 409:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_rxBufferRead - cyclic index for read from rxBuffer,
 410:.\Generated_Source\PSoC5/Pump_PL.c ****     *     incremented after each byte has been read from buffer.
 411:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_rxBufferLoopDetect - creared if loop condition was detected
 412:.\Generated_Source\PSoC5/Pump_PL.c ****     *     in RX ISR.
 413:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 414:.\Generated_Source\PSoC5/Pump_PL.c ****     * Reentrant:
 415:.\Generated_Source\PSoC5/Pump_PL.c ****     *  No.
 416:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 417:.\Generated_Source\PSoC5/Pump_PL.c ****     *******************************************************************************/
 418:.\Generated_Source\PSoC5/Pump_PL.c ****     uint8 Pump_PL_ReadRxData(void) 
 419:.\Generated_Source\PSoC5/Pump_PL.c ****     {
 484              		.loc 1 419 0
 485              		.cfi_startproc
 486              		@ args = 0, pretend = 0, frame = 8
 487              		@ frame_needed = 1, uses_anonymous_args = 0
 488 0000 80B5     		push	{r7, lr}
 489              		.cfi_def_cfa_offset 8
 490              		.cfi_offset 7, -8
 491              		.cfi_offset 14, -4
 492 0002 82B0     		sub	sp, sp, #8
 493              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 17


 494 0004 00AF     		add	r7, sp, #0
 495              		.cfi_def_cfa_register 7
 420:.\Generated_Source\PSoC5/Pump_PL.c ****         uint8 rxData;
 421:.\Generated_Source\PSoC5/Pump_PL.c **** 
 422:.\Generated_Source\PSoC5/Pump_PL.c ****         #if(Pump_PL_RXBUFFERSIZE > Pump_PL_FIFO_LENGTH)
 423:.\Generated_Source\PSoC5/Pump_PL.c ****             uint16 loc_rxBufferRead;
 424:.\Generated_Source\PSoC5/Pump_PL.c ****             uint16 loc_rxBufferWrite;
 425:.\Generated_Source\PSoC5/Pump_PL.c ****             /* Protect variables that could change on interrupt. */
 426:.\Generated_Source\PSoC5/Pump_PL.c ****             /* Disable Rx interrupt. */
 427:.\Generated_Source\PSoC5/Pump_PL.c ****             #if(Pump_PL_RX_INTERRUPT_ENABLED)
 428:.\Generated_Source\PSoC5/Pump_PL.c ****                 Pump_PL_DisableRxInt();
 496              		.loc 1 428 0
 497 0006 FFF7FEFF 		bl	Pump_PL_DisableRxInt
 429:.\Generated_Source\PSoC5/Pump_PL.c ****             #endif /* Pump_PL_RX_INTERRUPT_ENABLED */
 430:.\Generated_Source\PSoC5/Pump_PL.c ****             loc_rxBufferRead = Pump_PL_rxBufferRead;
 498              		.loc 1 430 0
 499 000a 194B     		ldr	r3, .L33
 500 000c 1B88     		ldrh	r3, [r3]	@ movhi
 501 000e BB80     		strh	r3, [r7, #4]	@ movhi
 431:.\Generated_Source\PSoC5/Pump_PL.c ****             loc_rxBufferWrite = Pump_PL_rxBufferWrite;
 502              		.loc 1 431 0
 503 0010 184B     		ldr	r3, .L33+4
 504 0012 1B88     		ldrh	r3, [r3]	@ movhi
 505 0014 7B80     		strh	r3, [r7, #2]	@ movhi
 432:.\Generated_Source\PSoC5/Pump_PL.c **** 
 433:.\Generated_Source\PSoC5/Pump_PL.c ****             if( (Pump_PL_rxBufferLoopDetect != 0u) || (loc_rxBufferRead != loc_rxBufferWrite) )
 506              		.loc 1 433 0
 507 0016 184B     		ldr	r3, .L33+8
 508 0018 1B78     		ldrb	r3, [r3]
 509 001a DBB2     		uxtb	r3, r3
 510 001c 002B     		cmp	r3, #0
 511 001e 03D1     		bne	.L27
 512              		.loc 1 433 0 is_stmt 0 discriminator 1
 513 0020 BA88     		ldrh	r2, [r7, #4]
 514 0022 7B88     		ldrh	r3, [r7, #2]
 515 0024 9A42     		cmp	r2, r3
 516 0026 18D0     		beq	.L28
 517              	.L27:
 434:.\Generated_Source\PSoC5/Pump_PL.c ****             {
 435:.\Generated_Source\PSoC5/Pump_PL.c ****                 rxData = Pump_PL_rxBuffer[loc_rxBufferRead];
 518              		.loc 1 435 0 is_stmt 1
 519 0028 BB88     		ldrh	r3, [r7, #4]
 520 002a 144A     		ldr	r2, .L33+12
 521 002c D35C     		ldrb	r3, [r2, r3]
 522 002e FB71     		strb	r3, [r7, #7]
 436:.\Generated_Source\PSoC5/Pump_PL.c ****                 loc_rxBufferRead++;
 523              		.loc 1 436 0
 524 0030 BB88     		ldrh	r3, [r7, #4]
 525 0032 0133     		adds	r3, r3, #1
 526 0034 BB80     		strh	r3, [r7, #4]	@ movhi
 437:.\Generated_Source\PSoC5/Pump_PL.c **** 
 438:.\Generated_Source\PSoC5/Pump_PL.c ****                 if(loc_rxBufferRead >= Pump_PL_RXBUFFERSIZE)
 527              		.loc 1 438 0
 528 0036 BB88     		ldrh	r3, [r7, #4]
 529 0038 FF2B     		cmp	r3, #255
 530 003a 01D9     		bls	.L29
 439:.\Generated_Source\PSoC5/Pump_PL.c ****                 {
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 18


 440:.\Generated_Source\PSoC5/Pump_PL.c ****                     loc_rxBufferRead = 0u;
 531              		.loc 1 440 0
 532 003c 0023     		movs	r3, #0
 533 003e BB80     		strh	r3, [r7, #4]	@ movhi
 534              	.L29:
 441:.\Generated_Source\PSoC5/Pump_PL.c ****                 }
 442:.\Generated_Source\PSoC5/Pump_PL.c ****                 /* Update the real pointer */
 443:.\Generated_Source\PSoC5/Pump_PL.c ****                 Pump_PL_rxBufferRead = loc_rxBufferRead;
 535              		.loc 1 443 0
 536 0040 0B4A     		ldr	r2, .L33
 537 0042 BB88     		ldrh	r3, [r7, #4]	@ movhi
 538 0044 1380     		strh	r3, [r2]	@ movhi
 444:.\Generated_Source\PSoC5/Pump_PL.c **** 
 445:.\Generated_Source\PSoC5/Pump_PL.c ****                 if(Pump_PL_rxBufferLoopDetect != 0u )
 539              		.loc 1 445 0
 540 0046 0C4B     		ldr	r3, .L33+8
 541 0048 1B78     		ldrb	r3, [r3]
 542 004a DBB2     		uxtb	r3, r3
 543 004c 002B     		cmp	r3, #0
 544 004e 03D0     		beq	.L30
 446:.\Generated_Source\PSoC5/Pump_PL.c ****                 {
 447:.\Generated_Source\PSoC5/Pump_PL.c ****                     Pump_PL_rxBufferLoopDetect = 0u;
 545              		.loc 1 447 0
 546 0050 094B     		ldr	r3, .L33+8
 547 0052 0022     		movs	r2, #0
 548 0054 1A70     		strb	r2, [r3]
 445:.\Generated_Source\PSoC5/Pump_PL.c ****                 {
 549              		.loc 1 445 0
 550 0056 03E0     		b	.L31
 551              	.L30:
 552 0058 02E0     		b	.L31
 553              	.L28:
 448:.\Generated_Source\PSoC5/Pump_PL.c ****                     #if( (Pump_PL_RX_INTERRUPT_ENABLED) && (Pump_PL_FLOW_CONTROL != 0u) && \
 449:.\Generated_Source\PSoC5/Pump_PL.c ****                          (Pump_PL_RXBUFFERSIZE > Pump_PL_FIFO_LENGTH) )
 450:.\Generated_Source\PSoC5/Pump_PL.c ****                         /* When Hardware Flow Control selected - return RX mask */
 451:.\Generated_Source\PSoC5/Pump_PL.c ****                         #if( Pump_PL_HD_ENABLED )
 452:.\Generated_Source\PSoC5/Pump_PL.c ****                             if((Pump_PL_CONTROL_REG & Pump_PL_CTRL_HD_SEND) == 0u)
 453:.\Generated_Source\PSoC5/Pump_PL.c ****                             {   /* In Half duplex mode return RX mask only in RX
 454:.\Generated_Source\PSoC5/Pump_PL.c ****                                 *  configuration set, otherwise
 455:.\Generated_Source\PSoC5/Pump_PL.c ****                                 *  mask will be returned in LoadRxConfig() API.
 456:.\Generated_Source\PSoC5/Pump_PL.c ****                                 */
 457:.\Generated_Source\PSoC5/Pump_PL.c ****                                 Pump_PL_RXSTATUS_MASK_REG  |= Pump_PL_RX_STS_FIFO_NOTEMPTY;
 458:.\Generated_Source\PSoC5/Pump_PL.c ****                             }
 459:.\Generated_Source\PSoC5/Pump_PL.c ****                         #else
 460:.\Generated_Source\PSoC5/Pump_PL.c ****                             Pump_PL_RXSTATUS_MASK_REG  |= Pump_PL_RX_STS_FIFO_NOTEMPTY;
 461:.\Generated_Source\PSoC5/Pump_PL.c ****                         #endif /* end Pump_PL_HD_ENABLED */
 462:.\Generated_Source\PSoC5/Pump_PL.c ****                     #endif /* Pump_PL_RX_INTERRUPT_ENABLED and Hardware flow control*/
 463:.\Generated_Source\PSoC5/Pump_PL.c ****                 }
 464:.\Generated_Source\PSoC5/Pump_PL.c ****             }
 465:.\Generated_Source\PSoC5/Pump_PL.c ****             else
 466:.\Generated_Source\PSoC5/Pump_PL.c ****             {   /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit*/
 467:.\Generated_Source\PSoC5/Pump_PL.c ****                 rxData = Pump_PL_RXDATA_REG;
 554              		.loc 1 467 0
 555 005a 094B     		ldr	r3, .L33+16
 556 005c 1B78     		ldrb	r3, [r3]
 557 005e FB71     		strb	r3, [r7, #7]
 558              	.L31:
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 19


 468:.\Generated_Source\PSoC5/Pump_PL.c ****             }
 469:.\Generated_Source\PSoC5/Pump_PL.c **** 
 470:.\Generated_Source\PSoC5/Pump_PL.c ****             /* Enable Rx interrupt. */
 471:.\Generated_Source\PSoC5/Pump_PL.c ****             #if(Pump_PL_RX_INTERRUPT_ENABLED)
 472:.\Generated_Source\PSoC5/Pump_PL.c ****                 Pump_PL_EnableRxInt();
 559              		.loc 1 472 0
 560 0060 FFF7FEFF 		bl	Pump_PL_EnableRxInt
 473:.\Generated_Source\PSoC5/Pump_PL.c ****             #endif /* End Pump_PL_RX_INTERRUPT_ENABLED */
 474:.\Generated_Source\PSoC5/Pump_PL.c **** 
 475:.\Generated_Source\PSoC5/Pump_PL.c ****         #else /* Pump_PL_RXBUFFERSIZE > Pump_PL_FIFO_LENGTH */
 476:.\Generated_Source\PSoC5/Pump_PL.c **** 
 477:.\Generated_Source\PSoC5/Pump_PL.c ****             /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit*/
 478:.\Generated_Source\PSoC5/Pump_PL.c ****             rxData = Pump_PL_RXDATA_REG;
 479:.\Generated_Source\PSoC5/Pump_PL.c **** 
 480:.\Generated_Source\PSoC5/Pump_PL.c ****         #endif /* Pump_PL_RXBUFFERSIZE > Pump_PL_FIFO_LENGTH */
 481:.\Generated_Source\PSoC5/Pump_PL.c **** 
 482:.\Generated_Source\PSoC5/Pump_PL.c ****         return(rxData);
 561              		.loc 1 482 0
 562 0064 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 483:.\Generated_Source\PSoC5/Pump_PL.c ****     }
 563              		.loc 1 483 0
 564 0066 1846     		mov	r0, r3
 565 0068 0837     		adds	r7, r7, #8
 566              		.cfi_def_cfa_offset 8
 567 006a BD46     		mov	sp, r7
 568              		.cfi_def_cfa_register 13
 569              		@ sp needed
 570 006c 80BD     		pop	{r7, pc}
 571              	.L34:
 572 006e 00BF     		.align	2
 573              	.L33:
 574 0070 00000000 		.word	Pump_PL_rxBufferRead
 575 0074 00000000 		.word	Pump_PL_rxBufferWrite
 576 0078 00000000 		.word	Pump_PL_rxBufferLoopDetect
 577 007c 00000000 		.word	Pump_PL_rxBuffer
 578 0080 46650040 		.word	1073767750
 579              		.cfi_endproc
 580              	.LFE9:
 581              		.size	Pump_PL_ReadRxData, .-Pump_PL_ReadRxData
 582              		.section	.text.Pump_PL_ReadRxStatus,"ax",%progbits
 583              		.align	2
 584              		.global	Pump_PL_ReadRxStatus
 585              		.thumb
 586              		.thumb_func
 587              		.type	Pump_PL_ReadRxStatus, %function
 588              	Pump_PL_ReadRxStatus:
 589              	.LFB10:
 484:.\Generated_Source\PSoC5/Pump_PL.c **** 
 485:.\Generated_Source\PSoC5/Pump_PL.c **** 
 486:.\Generated_Source\PSoC5/Pump_PL.c ****     /*******************************************************************************
 487:.\Generated_Source\PSoC5/Pump_PL.c ****     * Function Name: Pump_PL_ReadRxStatus
 488:.\Generated_Source\PSoC5/Pump_PL.c ****     ********************************************************************************
 489:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 490:.\Generated_Source\PSoC5/Pump_PL.c ****     * Summary:
 491:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Read the current state of the status register
 492:.\Generated_Source\PSoC5/Pump_PL.c ****     *  And detect software buffer overflow.
 493:.\Generated_Source\PSoC5/Pump_PL.c ****     *
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 20


 494:.\Generated_Source\PSoC5/Pump_PL.c ****     * Parameters:
 495:.\Generated_Source\PSoC5/Pump_PL.c ****     *  None.
 496:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 497:.\Generated_Source\PSoC5/Pump_PL.c ****     * Return:
 498:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Current state of the status register.
 499:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 500:.\Generated_Source\PSoC5/Pump_PL.c ****     * Global Variables:
 501:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_rxBufferOverflow - used to indicate overload condition.
 502:.\Generated_Source\PSoC5/Pump_PL.c ****     *   It set to one in RX interrupt when there isn?t free space in
 503:.\Generated_Source\PSoC5/Pump_PL.c ****     *   Pump_PL_rxBufferRead to write new data. This condition returned
 504:.\Generated_Source\PSoC5/Pump_PL.c ****     *   and cleared to zero by this API as an
 505:.\Generated_Source\PSoC5/Pump_PL.c ****     *   Pump_PL_RX_STS_SOFT_BUFF_OVER bit along with RX Status register
 506:.\Generated_Source\PSoC5/Pump_PL.c ****     *   bits.
 507:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 508:.\Generated_Source\PSoC5/Pump_PL.c ****     *******************************************************************************/
 509:.\Generated_Source\PSoC5/Pump_PL.c ****     uint8 Pump_PL_ReadRxStatus(void) 
 510:.\Generated_Source\PSoC5/Pump_PL.c ****     {
 590              		.loc 1 510 0
 591              		.cfi_startproc
 592              		@ args = 0, pretend = 0, frame = 8
 593              		@ frame_needed = 1, uses_anonymous_args = 0
 594              		@ link register save eliminated.
 595 0000 80B4     		push	{r7}
 596              		.cfi_def_cfa_offset 4
 597              		.cfi_offset 7, -4
 598 0002 83B0     		sub	sp, sp, #12
 599              		.cfi_def_cfa_offset 16
 600 0004 00AF     		add	r7, sp, #0
 601              		.cfi_def_cfa_register 7
 511:.\Generated_Source\PSoC5/Pump_PL.c ****         uint8 status;
 512:.\Generated_Source\PSoC5/Pump_PL.c **** 
 513:.\Generated_Source\PSoC5/Pump_PL.c ****         status = Pump_PL_RXSTATUS_REG & Pump_PL_RX_HW_MASK;
 602              		.loc 1 513 0
 603 0006 0C4B     		ldr	r3, .L38
 604 0008 1B78     		ldrb	r3, [r3]
 605 000a DBB2     		uxtb	r3, r3
 606 000c 03F07F03 		and	r3, r3, #127
 607 0010 FB71     		strb	r3, [r7, #7]
 514:.\Generated_Source\PSoC5/Pump_PL.c **** 
 515:.\Generated_Source\PSoC5/Pump_PL.c ****         #if(Pump_PL_RXBUFFERSIZE > Pump_PL_FIFO_LENGTH)
 516:.\Generated_Source\PSoC5/Pump_PL.c ****             if( Pump_PL_rxBufferOverflow != 0u )
 608              		.loc 1 516 0
 609 0012 0A4B     		ldr	r3, .L38+4
 610 0014 1B78     		ldrb	r3, [r3]
 611 0016 DBB2     		uxtb	r3, r3
 612 0018 002B     		cmp	r3, #0
 613 001a 06D0     		beq	.L36
 517:.\Generated_Source\PSoC5/Pump_PL.c ****             {
 518:.\Generated_Source\PSoC5/Pump_PL.c ****                 status |= Pump_PL_RX_STS_SOFT_BUFF_OVER;
 614              		.loc 1 518 0
 615 001c FB79     		ldrb	r3, [r7, #7]
 616 001e 63F07F03 		orn	r3, r3, #127
 617 0022 FB71     		strb	r3, [r7, #7]
 519:.\Generated_Source\PSoC5/Pump_PL.c ****                 Pump_PL_rxBufferOverflow = 0u;
 618              		.loc 1 519 0
 619 0024 054B     		ldr	r3, .L38+4
 620 0026 0022     		movs	r2, #0
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 21


 621 0028 1A70     		strb	r2, [r3]
 622              	.L36:
 520:.\Generated_Source\PSoC5/Pump_PL.c ****             }
 521:.\Generated_Source\PSoC5/Pump_PL.c ****         #endif /* Pump_PL_RXBUFFERSIZE */
 522:.\Generated_Source\PSoC5/Pump_PL.c **** 
 523:.\Generated_Source\PSoC5/Pump_PL.c ****         return(status);
 623              		.loc 1 523 0
 624 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 524:.\Generated_Source\PSoC5/Pump_PL.c ****     }
 625              		.loc 1 524 0
 626 002c 1846     		mov	r0, r3
 627 002e 0C37     		adds	r7, r7, #12
 628              		.cfi_def_cfa_offset 4
 629 0030 BD46     		mov	sp, r7
 630              		.cfi_def_cfa_register 13
 631              		@ sp needed
 632 0032 5DF8047B 		ldr	r7, [sp], #4
 633              		.cfi_restore 7
 634              		.cfi_def_cfa_offset 0
 635 0036 7047     		bx	lr
 636              	.L39:
 637              		.align	2
 638              	.L38:
 639 0038 66650040 		.word	1073767782
 640 003c 00000000 		.word	Pump_PL_rxBufferOverflow
 641              		.cfi_endproc
 642              	.LFE10:
 643              		.size	Pump_PL_ReadRxStatus, .-Pump_PL_ReadRxStatus
 644              		.section	.text.Pump_PL_GetChar,"ax",%progbits
 645              		.align	2
 646              		.global	Pump_PL_GetChar
 647              		.thumb
 648              		.thumb_func
 649              		.type	Pump_PL_GetChar, %function
 650              	Pump_PL_GetChar:
 651              	.LFB11:
 525:.\Generated_Source\PSoC5/Pump_PL.c **** 
 526:.\Generated_Source\PSoC5/Pump_PL.c **** 
 527:.\Generated_Source\PSoC5/Pump_PL.c ****     /*******************************************************************************
 528:.\Generated_Source\PSoC5/Pump_PL.c ****     * Function Name: Pump_PL_GetChar
 529:.\Generated_Source\PSoC5/Pump_PL.c ****     ********************************************************************************
 530:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 531:.\Generated_Source\PSoC5/Pump_PL.c ****     * Summary:
 532:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Reads UART RX buffer immediately, if data is not available or an error
 533:.\Generated_Source\PSoC5/Pump_PL.c ****     *  condition exists, zero is returned; otherwise, character is read and
 534:.\Generated_Source\PSoC5/Pump_PL.c ****     *  returned.
 535:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 536:.\Generated_Source\PSoC5/Pump_PL.c ****     * Parameters:
 537:.\Generated_Source\PSoC5/Pump_PL.c ****     *  None.
 538:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 539:.\Generated_Source\PSoC5/Pump_PL.c ****     * Return:
 540:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Character read from UART RX buffer. ASCII characters from 1 to 255 are valid.
 541:.\Generated_Source\PSoC5/Pump_PL.c ****     *  A returned zero signifies an error condition or no data available.
 542:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 543:.\Generated_Source\PSoC5/Pump_PL.c ****     * Global Variables:
 544:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_rxBuffer - RAM buffer pointer for save received data.
 545:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_rxBufferWrite - cyclic index for write to rxBuffer,
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 22


 546:.\Generated_Source\PSoC5/Pump_PL.c ****     *     checked to identify new data.
 547:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_rxBufferRead - cyclic index for read from rxBuffer,
 548:.\Generated_Source\PSoC5/Pump_PL.c ****     *     incremented after each byte has been read from buffer.
 549:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_rxBufferLoopDetect - creared if loop condition was detected
 550:.\Generated_Source\PSoC5/Pump_PL.c ****     *     in RX ISR.
 551:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 552:.\Generated_Source\PSoC5/Pump_PL.c ****     * Reentrant:
 553:.\Generated_Source\PSoC5/Pump_PL.c ****     *  No.
 554:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 555:.\Generated_Source\PSoC5/Pump_PL.c ****     *******************************************************************************/
 556:.\Generated_Source\PSoC5/Pump_PL.c ****     uint8 Pump_PL_GetChar(void) 
 557:.\Generated_Source\PSoC5/Pump_PL.c ****     {
 652              		.loc 1 557 0
 653              		.cfi_startproc
 654              		@ args = 0, pretend = 0, frame = 8
 655              		@ frame_needed = 1, uses_anonymous_args = 0
 656 0000 80B5     		push	{r7, lr}
 657              		.cfi_def_cfa_offset 8
 658              		.cfi_offset 7, -8
 659              		.cfi_offset 14, -4
 660 0002 82B0     		sub	sp, sp, #8
 661              		.cfi_def_cfa_offset 16
 662 0004 00AF     		add	r7, sp, #0
 663              		.cfi_def_cfa_register 7
 558:.\Generated_Source\PSoC5/Pump_PL.c ****         uint8 rxData = 0u;
 664              		.loc 1 558 0
 665 0006 0023     		movs	r3, #0
 666 0008 FB71     		strb	r3, [r7, #7]
 559:.\Generated_Source\PSoC5/Pump_PL.c ****         uint8 rxStatus;
 560:.\Generated_Source\PSoC5/Pump_PL.c **** 
 561:.\Generated_Source\PSoC5/Pump_PL.c ****         #if(Pump_PL_RXBUFFERSIZE > Pump_PL_FIFO_LENGTH)
 562:.\Generated_Source\PSoC5/Pump_PL.c ****             uint16 loc_rxBufferRead;
 563:.\Generated_Source\PSoC5/Pump_PL.c ****             uint16 loc_rxBufferWrite;
 564:.\Generated_Source\PSoC5/Pump_PL.c ****             /* Protect variables that could change on interrupt. */
 565:.\Generated_Source\PSoC5/Pump_PL.c ****             /* Disable Rx interrupt. */
 566:.\Generated_Source\PSoC5/Pump_PL.c ****             #if(Pump_PL_RX_INTERRUPT_ENABLED)
 567:.\Generated_Source\PSoC5/Pump_PL.c ****                 Pump_PL_DisableRxInt();
 667              		.loc 1 567 0
 668 000a FFF7FEFF 		bl	Pump_PL_DisableRxInt
 568:.\Generated_Source\PSoC5/Pump_PL.c ****             #endif /* Pump_PL_RX_INTERRUPT_ENABLED */
 569:.\Generated_Source\PSoC5/Pump_PL.c ****             loc_rxBufferRead = Pump_PL_rxBufferRead;
 669              		.loc 1 569 0
 670 000e 204B     		ldr	r3, .L47
 671 0010 1B88     		ldrh	r3, [r3]	@ movhi
 672 0012 BB80     		strh	r3, [r7, #4]	@ movhi
 570:.\Generated_Source\PSoC5/Pump_PL.c ****             loc_rxBufferWrite = Pump_PL_rxBufferWrite;
 673              		.loc 1 570 0
 674 0014 1F4B     		ldr	r3, .L47+4
 675 0016 1B88     		ldrh	r3, [r3]	@ movhi
 676 0018 7B80     		strh	r3, [r7, #2]	@ movhi
 571:.\Generated_Source\PSoC5/Pump_PL.c **** 
 572:.\Generated_Source\PSoC5/Pump_PL.c ****             if( (Pump_PL_rxBufferLoopDetect != 0u) || (loc_rxBufferRead != loc_rxBufferWrite) )
 677              		.loc 1 572 0
 678 001a 1F4B     		ldr	r3, .L47+8
 679 001c 1B78     		ldrb	r3, [r3]
 680 001e DBB2     		uxtb	r3, r3
 681 0020 002B     		cmp	r3, #0
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 23


 682 0022 03D1     		bne	.L41
 683              		.loc 1 572 0 is_stmt 0 discriminator 1
 684 0024 BA88     		ldrh	r2, [r7, #4]
 685 0026 7B88     		ldrh	r3, [r7, #2]
 686 0028 9A42     		cmp	r2, r3
 687 002a 18D0     		beq	.L42
 688              	.L41:
 573:.\Generated_Source\PSoC5/Pump_PL.c ****             {
 574:.\Generated_Source\PSoC5/Pump_PL.c ****                 rxData = Pump_PL_rxBuffer[loc_rxBufferRead];
 689              		.loc 1 574 0 is_stmt 1
 690 002c BB88     		ldrh	r3, [r7, #4]
 691 002e 1B4A     		ldr	r2, .L47+12
 692 0030 D35C     		ldrb	r3, [r2, r3]
 693 0032 FB71     		strb	r3, [r7, #7]
 575:.\Generated_Source\PSoC5/Pump_PL.c ****                 loc_rxBufferRead++;
 694              		.loc 1 575 0
 695 0034 BB88     		ldrh	r3, [r7, #4]
 696 0036 0133     		adds	r3, r3, #1
 697 0038 BB80     		strh	r3, [r7, #4]	@ movhi
 576:.\Generated_Source\PSoC5/Pump_PL.c ****                 if(loc_rxBufferRead >= Pump_PL_RXBUFFERSIZE)
 698              		.loc 1 576 0
 699 003a BB88     		ldrh	r3, [r7, #4]
 700 003c FF2B     		cmp	r3, #255
 701 003e 01D9     		bls	.L43
 577:.\Generated_Source\PSoC5/Pump_PL.c ****                 {
 578:.\Generated_Source\PSoC5/Pump_PL.c ****                     loc_rxBufferRead = 0u;
 702              		.loc 1 578 0
 703 0040 0023     		movs	r3, #0
 704 0042 BB80     		strh	r3, [r7, #4]	@ movhi
 705              	.L43:
 579:.\Generated_Source\PSoC5/Pump_PL.c ****                 }
 580:.\Generated_Source\PSoC5/Pump_PL.c ****                 /* Update the real pointer */
 581:.\Generated_Source\PSoC5/Pump_PL.c ****                 Pump_PL_rxBufferRead = loc_rxBufferRead;
 706              		.loc 1 581 0
 707 0044 124A     		ldr	r2, .L47
 708 0046 BB88     		ldrh	r3, [r7, #4]	@ movhi
 709 0048 1380     		strh	r3, [r2]	@ movhi
 582:.\Generated_Source\PSoC5/Pump_PL.c **** 
 583:.\Generated_Source\PSoC5/Pump_PL.c ****                 if(Pump_PL_rxBufferLoopDetect > 0u )
 710              		.loc 1 583 0
 711 004a 134B     		ldr	r3, .L47+8
 712 004c 1B78     		ldrb	r3, [r3]
 713 004e DBB2     		uxtb	r3, r3
 714 0050 002B     		cmp	r3, #0
 715 0052 03D0     		beq	.L44
 584:.\Generated_Source\PSoC5/Pump_PL.c ****                 {
 585:.\Generated_Source\PSoC5/Pump_PL.c ****                     Pump_PL_rxBufferLoopDetect = 0u;
 716              		.loc 1 585 0
 717 0054 104B     		ldr	r3, .L47+8
 718 0056 0022     		movs	r2, #0
 719 0058 1A70     		strb	r2, [r3]
 583:.\Generated_Source\PSoC5/Pump_PL.c ****                 {
 720              		.loc 1 583 0
 721 005a 12E0     		b	.L45
 722              	.L44:
 723 005c 11E0     		b	.L45
 724              	.L42:
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 24


 586:.\Generated_Source\PSoC5/Pump_PL.c ****                     #if( (Pump_PL_RX_INTERRUPT_ENABLED) && (Pump_PL_FLOW_CONTROL != 0u) )
 587:.\Generated_Source\PSoC5/Pump_PL.c ****                         /* When Hardware Flow Control selected - return RX mask */
 588:.\Generated_Source\PSoC5/Pump_PL.c ****                         #if( Pump_PL_HD_ENABLED )
 589:.\Generated_Source\PSoC5/Pump_PL.c ****                             if((Pump_PL_CONTROL_REG & Pump_PL_CTRL_HD_SEND) == 0u)
 590:.\Generated_Source\PSoC5/Pump_PL.c ****                             {   /* In Half duplex mode return RX mask only if
 591:.\Generated_Source\PSoC5/Pump_PL.c ****                                 *  RX configuration set, otherwise
 592:.\Generated_Source\PSoC5/Pump_PL.c ****                                 *  mask will be returned in LoadRxConfig() API.
 593:.\Generated_Source\PSoC5/Pump_PL.c ****                                 */
 594:.\Generated_Source\PSoC5/Pump_PL.c ****                                 Pump_PL_RXSTATUS_MASK_REG  |= Pump_PL_RX_STS_FIFO_NOTEMPTY;
 595:.\Generated_Source\PSoC5/Pump_PL.c ****                             }
 596:.\Generated_Source\PSoC5/Pump_PL.c ****                         #else
 597:.\Generated_Source\PSoC5/Pump_PL.c ****                             Pump_PL_RXSTATUS_MASK_REG  |= Pump_PL_RX_STS_FIFO_NOTEMPTY;
 598:.\Generated_Source\PSoC5/Pump_PL.c ****                         #endif /* end Pump_PL_HD_ENABLED */
 599:.\Generated_Source\PSoC5/Pump_PL.c ****                     #endif /* Pump_PL_RX_INTERRUPT_ENABLED and Hardware flow control*/
 600:.\Generated_Source\PSoC5/Pump_PL.c ****                 }
 601:.\Generated_Source\PSoC5/Pump_PL.c **** 
 602:.\Generated_Source\PSoC5/Pump_PL.c ****             }
 603:.\Generated_Source\PSoC5/Pump_PL.c ****             else
 604:.\Generated_Source\PSoC5/Pump_PL.c ****             {   rxStatus = Pump_PL_RXSTATUS_REG;
 725              		.loc 1 604 0
 726 005e 104B     		ldr	r3, .L47+16
 727 0060 1B78     		ldrb	r3, [r3]
 728 0062 7B70     		strb	r3, [r7, #1]
 605:.\Generated_Source\PSoC5/Pump_PL.c ****                 if((rxStatus & Pump_PL_RX_STS_FIFO_NOTEMPTY) != 0u)
 729              		.loc 1 605 0
 730 0064 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 731 0066 03F02003 		and	r3, r3, #32
 732 006a 002B     		cmp	r3, #0
 733 006c 09D0     		beq	.L45
 606:.\Generated_Source\PSoC5/Pump_PL.c ****                 {   /* Read received data from FIFO*/
 607:.\Generated_Source\PSoC5/Pump_PL.c ****                     rxData = Pump_PL_RXDATA_REG;
 734              		.loc 1 607 0
 735 006e 0D4B     		ldr	r3, .L47+20
 736 0070 1B78     		ldrb	r3, [r3]
 737 0072 FB71     		strb	r3, [r7, #7]
 608:.\Generated_Source\PSoC5/Pump_PL.c ****                     /*Check status on error*/
 609:.\Generated_Source\PSoC5/Pump_PL.c ****                     if((rxStatus & (Pump_PL_RX_STS_BREAK | Pump_PL_RX_STS_PAR_ERROR |
 610:.\Generated_Source\PSoC5/Pump_PL.c ****                                    Pump_PL_RX_STS_STOP_ERROR | Pump_PL_RX_STS_OVERRUN)) != 0u)
 738              		.loc 1 610 0
 739 0074 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 740 0076 03F01E03 		and	r3, r3, #30
 609:.\Generated_Source\PSoC5/Pump_PL.c ****                                    Pump_PL_RX_STS_STOP_ERROR | Pump_PL_RX_STS_OVERRUN)) != 0u)
 741              		.loc 1 609 0
 742 007a 002B     		cmp	r3, #0
 743 007c 01D0     		beq	.L45
 611:.\Generated_Source\PSoC5/Pump_PL.c ****                     {
 612:.\Generated_Source\PSoC5/Pump_PL.c ****                         rxData = 0u;
 744              		.loc 1 612 0
 745 007e 0023     		movs	r3, #0
 746 0080 FB71     		strb	r3, [r7, #7]
 747              	.L45:
 613:.\Generated_Source\PSoC5/Pump_PL.c ****                     }
 614:.\Generated_Source\PSoC5/Pump_PL.c ****                 }
 615:.\Generated_Source\PSoC5/Pump_PL.c ****             }
 616:.\Generated_Source\PSoC5/Pump_PL.c **** 
 617:.\Generated_Source\PSoC5/Pump_PL.c ****             /* Enable Rx interrupt. */
 618:.\Generated_Source\PSoC5/Pump_PL.c ****             #if(Pump_PL_RX_INTERRUPT_ENABLED)
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 25


 619:.\Generated_Source\PSoC5/Pump_PL.c ****                 Pump_PL_EnableRxInt();
 748              		.loc 1 619 0
 749 0082 FFF7FEFF 		bl	Pump_PL_EnableRxInt
 620:.\Generated_Source\PSoC5/Pump_PL.c ****             #endif /* Pump_PL_RX_INTERRUPT_ENABLED */
 621:.\Generated_Source\PSoC5/Pump_PL.c **** 
 622:.\Generated_Source\PSoC5/Pump_PL.c ****         #else /* Pump_PL_RXBUFFERSIZE > Pump_PL_FIFO_LENGTH */
 623:.\Generated_Source\PSoC5/Pump_PL.c **** 
 624:.\Generated_Source\PSoC5/Pump_PL.c ****             rxStatus =Pump_PL_RXSTATUS_REG;
 625:.\Generated_Source\PSoC5/Pump_PL.c ****             if((rxStatus & Pump_PL_RX_STS_FIFO_NOTEMPTY) != 0u)
 626:.\Generated_Source\PSoC5/Pump_PL.c ****             {   /* Read received data from FIFO*/
 627:.\Generated_Source\PSoC5/Pump_PL.c ****                 rxData = Pump_PL_RXDATA_REG;
 628:.\Generated_Source\PSoC5/Pump_PL.c ****                 /*Check status on error*/
 629:.\Generated_Source\PSoC5/Pump_PL.c ****                 if((rxStatus & (Pump_PL_RX_STS_BREAK | Pump_PL_RX_STS_PAR_ERROR |
 630:.\Generated_Source\PSoC5/Pump_PL.c ****                                Pump_PL_RX_STS_STOP_ERROR | Pump_PL_RX_STS_OVERRUN)) != 0u)
 631:.\Generated_Source\PSoC5/Pump_PL.c ****                 {
 632:.\Generated_Source\PSoC5/Pump_PL.c ****                     rxData = 0u;
 633:.\Generated_Source\PSoC5/Pump_PL.c ****                 }
 634:.\Generated_Source\PSoC5/Pump_PL.c ****             }
 635:.\Generated_Source\PSoC5/Pump_PL.c ****         #endif /* Pump_PL_RXBUFFERSIZE > Pump_PL_FIFO_LENGTH */
 636:.\Generated_Source\PSoC5/Pump_PL.c **** 
 637:.\Generated_Source\PSoC5/Pump_PL.c ****         return(rxData);
 750              		.loc 1 637 0
 751 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 638:.\Generated_Source\PSoC5/Pump_PL.c ****     }
 752              		.loc 1 638 0
 753 0088 1846     		mov	r0, r3
 754 008a 0837     		adds	r7, r7, #8
 755              		.cfi_def_cfa_offset 8
 756 008c BD46     		mov	sp, r7
 757              		.cfi_def_cfa_register 13
 758              		@ sp needed
 759 008e 80BD     		pop	{r7, pc}
 760              	.L48:
 761              		.align	2
 762              	.L47:
 763 0090 00000000 		.word	Pump_PL_rxBufferRead
 764 0094 00000000 		.word	Pump_PL_rxBufferWrite
 765 0098 00000000 		.word	Pump_PL_rxBufferLoopDetect
 766 009c 00000000 		.word	Pump_PL_rxBuffer
 767 00a0 66650040 		.word	1073767782
 768 00a4 46650040 		.word	1073767750
 769              		.cfi_endproc
 770              	.LFE11:
 771              		.size	Pump_PL_GetChar, .-Pump_PL_GetChar
 772              		.section	.text.Pump_PL_GetByte,"ax",%progbits
 773              		.align	2
 774              		.global	Pump_PL_GetByte
 775              		.thumb
 776              		.thumb_func
 777              		.type	Pump_PL_GetByte, %function
 778              	Pump_PL_GetByte:
 779              	.LFB12:
 639:.\Generated_Source\PSoC5/Pump_PL.c **** 
 640:.\Generated_Source\PSoC5/Pump_PL.c **** 
 641:.\Generated_Source\PSoC5/Pump_PL.c ****     /*******************************************************************************
 642:.\Generated_Source\PSoC5/Pump_PL.c ****     * Function Name: Pump_PL_GetByte
 643:.\Generated_Source\PSoC5/Pump_PL.c ****     ********************************************************************************
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 26


 644:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 645:.\Generated_Source\PSoC5/Pump_PL.c ****     * Summary:
 646:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Grab the next available byte of data from the recieve FIFO
 647:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 648:.\Generated_Source\PSoC5/Pump_PL.c ****     * Parameters:
 649:.\Generated_Source\PSoC5/Pump_PL.c ****     *  None.
 650:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 651:.\Generated_Source\PSoC5/Pump_PL.c ****     * Return:
 652:.\Generated_Source\PSoC5/Pump_PL.c ****     *  MSB contains Status Register and LSB contains UART RX data
 653:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 654:.\Generated_Source\PSoC5/Pump_PL.c ****     * Reentrant:
 655:.\Generated_Source\PSoC5/Pump_PL.c ****     *  No.
 656:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 657:.\Generated_Source\PSoC5/Pump_PL.c ****     *******************************************************************************/
 658:.\Generated_Source\PSoC5/Pump_PL.c ****     uint16 Pump_PL_GetByte(void) 
 659:.\Generated_Source\PSoC5/Pump_PL.c ****     {
 780              		.loc 1 659 0
 781              		.cfi_startproc
 782              		@ args = 0, pretend = 0, frame = 0
 783              		@ frame_needed = 1, uses_anonymous_args = 0
 784 0000 98B5     		push	{r3, r4, r7, lr}
 785              		.cfi_def_cfa_offset 16
 786              		.cfi_offset 3, -16
 787              		.cfi_offset 4, -12
 788              		.cfi_offset 7, -8
 789              		.cfi_offset 14, -4
 790 0002 00AF     		add	r7, sp, #0
 791              		.cfi_def_cfa_register 7
 660:.\Generated_Source\PSoC5/Pump_PL.c ****         return ( ((uint16)Pump_PL_ReadRxStatus() << 8u) | Pump_PL_ReadRxData() );
 792              		.loc 1 660 0
 793 0004 FFF7FEFF 		bl	Pump_PL_ReadRxStatus
 794 0008 0346     		mov	r3, r0
 795 000a 1B02     		lsls	r3, r3, #8
 796 000c 9CB2     		uxth	r4, r3
 797 000e FFF7FEFF 		bl	Pump_PL_ReadRxData
 798 0012 0346     		mov	r3, r0
 799 0014 9BB2     		uxth	r3, r3
 800 0016 2246     		mov	r2, r4	@ movhi
 801 0018 1343     		orrs	r3, r3, r2
 802 001a 9BB2     		uxth	r3, r3
 803 001c 9BB2     		uxth	r3, r3
 661:.\Generated_Source\PSoC5/Pump_PL.c ****     }
 804              		.loc 1 661 0
 805 001e 1846     		mov	r0, r3
 806 0020 98BD     		pop	{r3, r4, r7, pc}
 807              		.cfi_endproc
 808              	.LFE12:
 809              		.size	Pump_PL_GetByte, .-Pump_PL_GetByte
 810 0022 00BF     		.section	.text.Pump_PL_GetRxBufferSize,"ax",%progbits
 811              		.align	2
 812              		.global	Pump_PL_GetRxBufferSize
 813              		.thumb
 814              		.thumb_func
 815              		.type	Pump_PL_GetRxBufferSize, %function
 816              	Pump_PL_GetRxBufferSize:
 817              	.LFB13:
 662:.\Generated_Source\PSoC5/Pump_PL.c **** 
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 27


 663:.\Generated_Source\PSoC5/Pump_PL.c **** 
 664:.\Generated_Source\PSoC5/Pump_PL.c ****     /*******************************************************************************
 665:.\Generated_Source\PSoC5/Pump_PL.c ****     * Function Name: Pump_PL_GetRxBufferSize
 666:.\Generated_Source\PSoC5/Pump_PL.c ****     ********************************************************************************
 667:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 668:.\Generated_Source\PSoC5/Pump_PL.c ****     * Summary:
 669:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Determine the amount of bytes left in the RX buffer and return the count in
 670:.\Generated_Source\PSoC5/Pump_PL.c ****     *  bytes
 671:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 672:.\Generated_Source\PSoC5/Pump_PL.c ****     * Parameters:
 673:.\Generated_Source\PSoC5/Pump_PL.c ****     *  None.
 674:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 675:.\Generated_Source\PSoC5/Pump_PL.c ****     * Return:
 676:.\Generated_Source\PSoC5/Pump_PL.c ****     *  uint16: Integer count of the number of bytes left
 677:.\Generated_Source\PSoC5/Pump_PL.c ****     *  in the RX buffer
 678:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 679:.\Generated_Source\PSoC5/Pump_PL.c ****     * Global Variables:
 680:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_rxBufferWrite - used to calculate left bytes.
 681:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_rxBufferRead - used to calculate left bytes.
 682:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_rxBufferLoopDetect - checked to decide left bytes amount.
 683:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 684:.\Generated_Source\PSoC5/Pump_PL.c ****     * Reentrant:
 685:.\Generated_Source\PSoC5/Pump_PL.c ****     *  No.
 686:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 687:.\Generated_Source\PSoC5/Pump_PL.c ****     * Theory:
 688:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Allows the user to find out how full the RX Buffer is.
 689:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 690:.\Generated_Source\PSoC5/Pump_PL.c ****     *******************************************************************************/
 691:.\Generated_Source\PSoC5/Pump_PL.c ****     uint16 Pump_PL_GetRxBufferSize(void)
 692:.\Generated_Source\PSoC5/Pump_PL.c ****                                                             
 693:.\Generated_Source\PSoC5/Pump_PL.c ****     {
 818              		.loc 1 693 0
 819              		.cfi_startproc
 820              		@ args = 0, pretend = 0, frame = 8
 821              		@ frame_needed = 1, uses_anonymous_args = 0
 822 0000 80B5     		push	{r7, lr}
 823              		.cfi_def_cfa_offset 8
 824              		.cfi_offset 7, -8
 825              		.cfi_offset 14, -4
 826 0002 82B0     		sub	sp, sp, #8
 827              		.cfi_def_cfa_offset 16
 828 0004 00AF     		add	r7, sp, #0
 829              		.cfi_def_cfa_register 7
 694:.\Generated_Source\PSoC5/Pump_PL.c ****         uint16 size;
 695:.\Generated_Source\PSoC5/Pump_PL.c **** 
 696:.\Generated_Source\PSoC5/Pump_PL.c ****         #if(Pump_PL_RXBUFFERSIZE > Pump_PL_FIFO_LENGTH)
 697:.\Generated_Source\PSoC5/Pump_PL.c **** 
 698:.\Generated_Source\PSoC5/Pump_PL.c ****             /* Disable Rx interrupt. */
 699:.\Generated_Source\PSoC5/Pump_PL.c ****             /* Protect variables that could change on interrupt. */
 700:.\Generated_Source\PSoC5/Pump_PL.c ****             #if(Pump_PL_RX_INTERRUPT_ENABLED)
 701:.\Generated_Source\PSoC5/Pump_PL.c ****                 Pump_PL_DisableRxInt();
 830              		.loc 1 701 0
 831 0006 FFF7FEFF 		bl	Pump_PL_DisableRxInt
 702:.\Generated_Source\PSoC5/Pump_PL.c ****             #endif /* Pump_PL_RX_INTERRUPT_ENABLED */
 703:.\Generated_Source\PSoC5/Pump_PL.c **** 
 704:.\Generated_Source\PSoC5/Pump_PL.c ****             if(Pump_PL_rxBufferRead == Pump_PL_rxBufferWrite)
 832              		.loc 1 704 0
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 28


 833 000a 1B4B     		ldr	r3, .L58
 834 000c 1B88     		ldrh	r3, [r3]	@ movhi
 835 000e 9AB2     		uxth	r2, r3
 836 0010 1A4B     		ldr	r3, .L58+4
 837 0012 1B88     		ldrh	r3, [r3]	@ movhi
 838 0014 9BB2     		uxth	r3, r3
 839 0016 9A42     		cmp	r2, r3
 840 0018 0BD1     		bne	.L52
 705:.\Generated_Source\PSoC5/Pump_PL.c ****             {
 706:.\Generated_Source\PSoC5/Pump_PL.c ****                 if(Pump_PL_rxBufferLoopDetect > 0u)
 841              		.loc 1 706 0
 842 001a 194B     		ldr	r3, .L58+8
 843 001c 1B78     		ldrb	r3, [r3]
 844 001e DBB2     		uxtb	r3, r3
 845 0020 002B     		cmp	r3, #0
 846 0022 03D0     		beq	.L53
 707:.\Generated_Source\PSoC5/Pump_PL.c ****                 {
 708:.\Generated_Source\PSoC5/Pump_PL.c ****                     size = Pump_PL_RXBUFFERSIZE;
 847              		.loc 1 708 0
 848 0024 4FF48073 		mov	r3, #256
 849 0028 FB80     		strh	r3, [r7, #6]	@ movhi
 850 002a 1EE0     		b	.L55
 851              	.L53:
 709:.\Generated_Source\PSoC5/Pump_PL.c ****                 }
 710:.\Generated_Source\PSoC5/Pump_PL.c ****                 else
 711:.\Generated_Source\PSoC5/Pump_PL.c ****                 {
 712:.\Generated_Source\PSoC5/Pump_PL.c ****                     size = 0u;
 852              		.loc 1 712 0
 853 002c 0023     		movs	r3, #0
 854 002e FB80     		strh	r3, [r7, #6]	@ movhi
 855 0030 1BE0     		b	.L55
 856              	.L52:
 713:.\Generated_Source\PSoC5/Pump_PL.c ****                 }
 714:.\Generated_Source\PSoC5/Pump_PL.c ****             }
 715:.\Generated_Source\PSoC5/Pump_PL.c ****             else if(Pump_PL_rxBufferRead < Pump_PL_rxBufferWrite)
 857              		.loc 1 715 0
 858 0032 114B     		ldr	r3, .L58
 859 0034 1B88     		ldrh	r3, [r3]	@ movhi
 860 0036 9AB2     		uxth	r2, r3
 861 0038 104B     		ldr	r3, .L58+4
 862 003a 1B88     		ldrh	r3, [r3]	@ movhi
 863 003c 9BB2     		uxth	r3, r3
 864 003e 9A42     		cmp	r2, r3
 865 0040 08D2     		bcs	.L56
 716:.\Generated_Source\PSoC5/Pump_PL.c ****             {
 717:.\Generated_Source\PSoC5/Pump_PL.c ****                 size = (Pump_PL_rxBufferWrite - Pump_PL_rxBufferRead);
 866              		.loc 1 717 0
 867 0042 0E4B     		ldr	r3, .L58+4
 868 0044 1B88     		ldrh	r3, [r3]	@ movhi
 869 0046 9AB2     		uxth	r2, r3
 870 0048 0B4B     		ldr	r3, .L58
 871 004a 1B88     		ldrh	r3, [r3]	@ movhi
 872 004c 9BB2     		uxth	r3, r3
 873 004e D31A     		subs	r3, r2, r3
 874 0050 FB80     		strh	r3, [r7, #6]	@ movhi
 875 0052 0AE0     		b	.L55
 876              	.L56:
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 29


 718:.\Generated_Source\PSoC5/Pump_PL.c ****             }
 719:.\Generated_Source\PSoC5/Pump_PL.c ****             else
 720:.\Generated_Source\PSoC5/Pump_PL.c ****             {
 721:.\Generated_Source\PSoC5/Pump_PL.c ****                 size = (Pump_PL_RXBUFFERSIZE - Pump_PL_rxBufferRead) + Pump_PL_rxBufferWrite;
 877              		.loc 1 721 0
 878 0054 094B     		ldr	r3, .L58+4
 879 0056 1B88     		ldrh	r3, [r3]	@ movhi
 880 0058 9AB2     		uxth	r2, r3
 881 005a 074B     		ldr	r3, .L58
 882 005c 1B88     		ldrh	r3, [r3]	@ movhi
 883 005e 9BB2     		uxth	r3, r3
 884 0060 D31A     		subs	r3, r2, r3
 885 0062 9BB2     		uxth	r3, r3
 886 0064 03F58073 		add	r3, r3, #256
 887 0068 FB80     		strh	r3, [r7, #6]	@ movhi
 888              	.L55:
 722:.\Generated_Source\PSoC5/Pump_PL.c ****             }
 723:.\Generated_Source\PSoC5/Pump_PL.c **** 
 724:.\Generated_Source\PSoC5/Pump_PL.c ****             /* Enable Rx interrupt. */
 725:.\Generated_Source\PSoC5/Pump_PL.c ****             #if(Pump_PL_RX_INTERRUPT_ENABLED)
 726:.\Generated_Source\PSoC5/Pump_PL.c ****                 Pump_PL_EnableRxInt();
 889              		.loc 1 726 0
 890 006a FFF7FEFF 		bl	Pump_PL_EnableRxInt
 727:.\Generated_Source\PSoC5/Pump_PL.c ****             #endif /* End Pump_PL_RX_INTERRUPT_ENABLED */
 728:.\Generated_Source\PSoC5/Pump_PL.c **** 
 729:.\Generated_Source\PSoC5/Pump_PL.c ****         #else /* Pump_PL_RXBUFFERSIZE > Pump_PL_FIFO_LENGTH */
 730:.\Generated_Source\PSoC5/Pump_PL.c **** 
 731:.\Generated_Source\PSoC5/Pump_PL.c ****             /* We can only know if there is data in the fifo. */
 732:.\Generated_Source\PSoC5/Pump_PL.c ****             size = ((Pump_PL_RXSTATUS_REG & Pump_PL_RX_STS_FIFO_NOTEMPTY) != 0u) ? 1u : 0u;
 733:.\Generated_Source\PSoC5/Pump_PL.c **** 
 734:.\Generated_Source\PSoC5/Pump_PL.c ****         #endif /* End Pump_PL_RXBUFFERSIZE > Pump_PL_FIFO_LENGTH */
 735:.\Generated_Source\PSoC5/Pump_PL.c **** 
 736:.\Generated_Source\PSoC5/Pump_PL.c ****         return(size);
 891              		.loc 1 736 0
 892 006e FB88     		ldrh	r3, [r7, #6]
 737:.\Generated_Source\PSoC5/Pump_PL.c ****     }
 893              		.loc 1 737 0
 894 0070 1846     		mov	r0, r3
 895 0072 0837     		adds	r7, r7, #8
 896              		.cfi_def_cfa_offset 8
 897 0074 BD46     		mov	sp, r7
 898              		.cfi_def_cfa_register 13
 899              		@ sp needed
 900 0076 80BD     		pop	{r7, pc}
 901              	.L59:
 902              		.align	2
 903              	.L58:
 904 0078 00000000 		.word	Pump_PL_rxBufferRead
 905 007c 00000000 		.word	Pump_PL_rxBufferWrite
 906 0080 00000000 		.word	Pump_PL_rxBufferLoopDetect
 907              		.cfi_endproc
 908              	.LFE13:
 909              		.size	Pump_PL_GetRxBufferSize, .-Pump_PL_GetRxBufferSize
 910              		.section	.text.Pump_PL_ClearRxBuffer,"ax",%progbits
 911              		.align	2
 912              		.global	Pump_PL_ClearRxBuffer
 913              		.thumb
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 30


 914              		.thumb_func
 915              		.type	Pump_PL_ClearRxBuffer, %function
 916              	Pump_PL_ClearRxBuffer:
 917              	.LFB14:
 738:.\Generated_Source\PSoC5/Pump_PL.c **** 
 739:.\Generated_Source\PSoC5/Pump_PL.c **** 
 740:.\Generated_Source\PSoC5/Pump_PL.c ****     /*******************************************************************************
 741:.\Generated_Source\PSoC5/Pump_PL.c ****     * Function Name: Pump_PL_ClearRxBuffer
 742:.\Generated_Source\PSoC5/Pump_PL.c ****     ********************************************************************************
 743:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 744:.\Generated_Source\PSoC5/Pump_PL.c ****     * Summary:
 745:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Clears the RX RAM buffer by setting the read and write pointers both to zero.
 746:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Clears hardware RX FIFO.
 747:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 748:.\Generated_Source\PSoC5/Pump_PL.c ****     * Parameters:
 749:.\Generated_Source\PSoC5/Pump_PL.c ****     *  None.
 750:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 751:.\Generated_Source\PSoC5/Pump_PL.c ****     * Return:
 752:.\Generated_Source\PSoC5/Pump_PL.c ****     *  None.
 753:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 754:.\Generated_Source\PSoC5/Pump_PL.c ****     * Global Variables:
 755:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_rxBufferWrite - cleared to zero.
 756:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_rxBufferRead - cleared to zero.
 757:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_rxBufferLoopDetect - cleared to zero.
 758:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_rxBufferOverflow - cleared to zero.
 759:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 760:.\Generated_Source\PSoC5/Pump_PL.c ****     * Reentrant:
 761:.\Generated_Source\PSoC5/Pump_PL.c ****     *  No.
 762:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 763:.\Generated_Source\PSoC5/Pump_PL.c ****     * Theory:
 764:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Setting the pointers to zero makes the system believe there is no data to
 765:.\Generated_Source\PSoC5/Pump_PL.c ****     *  read and writing will resume at address 0 overwriting any data that may
 766:.\Generated_Source\PSoC5/Pump_PL.c ****     *  have remained in the RAM.
 767:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 768:.\Generated_Source\PSoC5/Pump_PL.c ****     * Side Effects:
 769:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Any received data not read from the RAM or FIFO buffer will be lost.
 770:.\Generated_Source\PSoC5/Pump_PL.c ****     *******************************************************************************/
 771:.\Generated_Source\PSoC5/Pump_PL.c ****     void Pump_PL_ClearRxBuffer(void) 
 772:.\Generated_Source\PSoC5/Pump_PL.c ****     {
 918              		.loc 1 772 0
 919              		.cfi_startproc
 920              		@ args = 0, pretend = 0, frame = 8
 921              		@ frame_needed = 1, uses_anonymous_args = 0
 922 0000 80B5     		push	{r7, lr}
 923              		.cfi_def_cfa_offset 8
 924              		.cfi_offset 7, -8
 925              		.cfi_offset 14, -4
 926 0002 82B0     		sub	sp, sp, #8
 927              		.cfi_def_cfa_offset 16
 928 0004 00AF     		add	r7, sp, #0
 929              		.cfi_def_cfa_register 7
 773:.\Generated_Source\PSoC5/Pump_PL.c ****         uint8 enableInterrupts;
 774:.\Generated_Source\PSoC5/Pump_PL.c **** 
 775:.\Generated_Source\PSoC5/Pump_PL.c ****         /* clear the HW FIFO */
 776:.\Generated_Source\PSoC5/Pump_PL.c ****         /* Enter critical section */
 777:.\Generated_Source\PSoC5/Pump_PL.c ****         enableInterrupts = CyEnterCriticalSection();
 930              		.loc 1 777 0
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 31


 931 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 932 000a 0346     		mov	r3, r0
 933 000c FB71     		strb	r3, [r7, #7]
 778:.\Generated_Source\PSoC5/Pump_PL.c ****         Pump_PL_RXDATA_AUX_CTL_REG |=  Pump_PL_RX_FIFO_CLR;
 934              		.loc 1 778 0
 935 000e 134A     		ldr	r2, .L61
 936 0010 124B     		ldr	r3, .L61
 937 0012 1B78     		ldrb	r3, [r3]
 938 0014 DBB2     		uxtb	r3, r3
 939 0016 43F00103 		orr	r3, r3, #1
 940 001a DBB2     		uxtb	r3, r3
 941 001c 1370     		strb	r3, [r2]
 779:.\Generated_Source\PSoC5/Pump_PL.c ****         Pump_PL_RXDATA_AUX_CTL_REG &= (uint8)~Pump_PL_RX_FIFO_CLR;
 942              		.loc 1 779 0
 943 001e 0F4A     		ldr	r2, .L61
 944 0020 0E4B     		ldr	r3, .L61
 945 0022 1B78     		ldrb	r3, [r3]
 946 0024 DBB2     		uxtb	r3, r3
 947 0026 23F00103 		bic	r3, r3, #1
 948 002a DBB2     		uxtb	r3, r3
 949 002c 1370     		strb	r3, [r2]
 780:.\Generated_Source\PSoC5/Pump_PL.c ****         /* Exit critical section */
 781:.\Generated_Source\PSoC5/Pump_PL.c ****         CyExitCriticalSection(enableInterrupts);
 950              		.loc 1 781 0
 951 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 952 0030 1846     		mov	r0, r3
 953 0032 FFF7FEFF 		bl	CyExitCriticalSection
 782:.\Generated_Source\PSoC5/Pump_PL.c **** 
 783:.\Generated_Source\PSoC5/Pump_PL.c ****         #if(Pump_PL_RXBUFFERSIZE > Pump_PL_FIFO_LENGTH)
 784:.\Generated_Source\PSoC5/Pump_PL.c ****             /* Disable Rx interrupt. */
 785:.\Generated_Source\PSoC5/Pump_PL.c ****             /* Protect variables that could change on interrupt. */
 786:.\Generated_Source\PSoC5/Pump_PL.c ****             #if(Pump_PL_RX_INTERRUPT_ENABLED)
 787:.\Generated_Source\PSoC5/Pump_PL.c ****                 Pump_PL_DisableRxInt();
 954              		.loc 1 787 0
 955 0036 FFF7FEFF 		bl	Pump_PL_DisableRxInt
 788:.\Generated_Source\PSoC5/Pump_PL.c ****             #endif /* End Pump_PL_RX_INTERRUPT_ENABLED */
 789:.\Generated_Source\PSoC5/Pump_PL.c **** 
 790:.\Generated_Source\PSoC5/Pump_PL.c ****             Pump_PL_rxBufferRead = 0u;
 956              		.loc 1 790 0
 957 003a 094B     		ldr	r3, .L61+4
 958 003c 0022     		movs	r2, #0
 959 003e 1A80     		strh	r2, [r3]	@ movhi
 791:.\Generated_Source\PSoC5/Pump_PL.c ****             Pump_PL_rxBufferWrite = 0u;
 960              		.loc 1 791 0
 961 0040 084B     		ldr	r3, .L61+8
 962 0042 0022     		movs	r2, #0
 963 0044 1A80     		strh	r2, [r3]	@ movhi
 792:.\Generated_Source\PSoC5/Pump_PL.c ****             Pump_PL_rxBufferLoopDetect = 0u;
 964              		.loc 1 792 0
 965 0046 084B     		ldr	r3, .L61+12
 966 0048 0022     		movs	r2, #0
 967 004a 1A70     		strb	r2, [r3]
 793:.\Generated_Source\PSoC5/Pump_PL.c ****             Pump_PL_rxBufferOverflow = 0u;
 968              		.loc 1 793 0
 969 004c 074B     		ldr	r3, .L61+16
 970 004e 0022     		movs	r2, #0
 971 0050 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 32


 794:.\Generated_Source\PSoC5/Pump_PL.c **** 
 795:.\Generated_Source\PSoC5/Pump_PL.c ****             /* Enable Rx interrupt. */
 796:.\Generated_Source\PSoC5/Pump_PL.c ****             #if(Pump_PL_RX_INTERRUPT_ENABLED)
 797:.\Generated_Source\PSoC5/Pump_PL.c ****                 Pump_PL_EnableRxInt();
 972              		.loc 1 797 0
 973 0052 FFF7FEFF 		bl	Pump_PL_EnableRxInt
 798:.\Generated_Source\PSoC5/Pump_PL.c ****             #endif /* End Pump_PL_RX_INTERRUPT_ENABLED */
 799:.\Generated_Source\PSoC5/Pump_PL.c ****         #endif /* End Pump_PL_RXBUFFERSIZE > Pump_PL_FIFO_LENGTH */
 800:.\Generated_Source\PSoC5/Pump_PL.c **** 
 801:.\Generated_Source\PSoC5/Pump_PL.c ****     }
 974              		.loc 1 801 0
 975 0056 0837     		adds	r7, r7, #8
 976              		.cfi_def_cfa_offset 8
 977 0058 BD46     		mov	sp, r7
 978              		.cfi_def_cfa_register 13
 979              		@ sp needed
 980 005a 80BD     		pop	{r7, pc}
 981              	.L62:
 982              		.align	2
 983              	.L61:
 984 005c 96650040 		.word	1073767830
 985 0060 00000000 		.word	Pump_PL_rxBufferRead
 986 0064 00000000 		.word	Pump_PL_rxBufferWrite
 987 0068 00000000 		.word	Pump_PL_rxBufferLoopDetect
 988 006c 00000000 		.word	Pump_PL_rxBufferOverflow
 989              		.cfi_endproc
 990              	.LFE14:
 991              		.size	Pump_PL_ClearRxBuffer, .-Pump_PL_ClearRxBuffer
 992              		.section	.text.Pump_PL_SetRxAddressMode,"ax",%progbits
 993              		.align	2
 994              		.global	Pump_PL_SetRxAddressMode
 995              		.thumb
 996              		.thumb_func
 997              		.type	Pump_PL_SetRxAddressMode, %function
 998              	Pump_PL_SetRxAddressMode:
 999              	.LFB15:
 802:.\Generated_Source\PSoC5/Pump_PL.c **** 
 803:.\Generated_Source\PSoC5/Pump_PL.c **** 
 804:.\Generated_Source\PSoC5/Pump_PL.c ****     /*******************************************************************************
 805:.\Generated_Source\PSoC5/Pump_PL.c ****     * Function Name: Pump_PL_SetRxAddressMode
 806:.\Generated_Source\PSoC5/Pump_PL.c ****     ********************************************************************************
 807:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 808:.\Generated_Source\PSoC5/Pump_PL.c ****     * Summary:
 809:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Set the receive addressing mode
 810:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 811:.\Generated_Source\PSoC5/Pump_PL.c ****     * Parameters:
 812:.\Generated_Source\PSoC5/Pump_PL.c ****     *  addressMode: Enumerated value indicating the mode of RX addressing
 813:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL__B_UART__AM_SW_BYTE_BYTE -  Software Byte-by-Byte address
 814:.\Generated_Source\PSoC5/Pump_PL.c ****     *                                               detection
 815:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL__B_UART__AM_SW_DETECT_TO_BUFFER - Software Detect to Buffer
 816:.\Generated_Source\PSoC5/Pump_PL.c ****     *                                               address detection
 817:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL__B_UART__AM_HW_BYTE_BY_BYTE - Hardware Byte-by-Byte address
 818:.\Generated_Source\PSoC5/Pump_PL.c ****     *                                               detection
 819:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL__B_UART__AM_HW_DETECT_TO_BUFFER - Hardware Detect to Buffer
 820:.\Generated_Source\PSoC5/Pump_PL.c ****     *                                               address detection
 821:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL__B_UART__AM_NONE - No address detection
 822:.\Generated_Source\PSoC5/Pump_PL.c ****     *
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 33


 823:.\Generated_Source\PSoC5/Pump_PL.c ****     * Return:
 824:.\Generated_Source\PSoC5/Pump_PL.c ****     *  None.
 825:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 826:.\Generated_Source\PSoC5/Pump_PL.c ****     * Global Variables:
 827:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_rxAddressMode - the parameter stored in this variable for
 828:.\Generated_Source\PSoC5/Pump_PL.c ****     *   the farther usage in RX ISR.
 829:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_rxAddressDetected - set to initial state (0).
 830:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 831:.\Generated_Source\PSoC5/Pump_PL.c ****     *******************************************************************************/
 832:.\Generated_Source\PSoC5/Pump_PL.c ****     void Pump_PL_SetRxAddressMode(uint8 addressMode)
 833:.\Generated_Source\PSoC5/Pump_PL.c ****                                                         
 834:.\Generated_Source\PSoC5/Pump_PL.c ****     {
 1000              		.loc 1 834 0
 1001              		.cfi_startproc
 1002              		@ args = 0, pretend = 0, frame = 8
 1003              		@ frame_needed = 1, uses_anonymous_args = 0
 1004              		@ link register save eliminated.
 1005 0000 80B4     		push	{r7}
 1006              		.cfi_def_cfa_offset 4
 1007              		.cfi_offset 7, -4
 1008 0002 83B0     		sub	sp, sp, #12
 1009              		.cfi_def_cfa_offset 16
 1010 0004 00AF     		add	r7, sp, #0
 1011              		.cfi_def_cfa_register 7
 1012 0006 0346     		mov	r3, r0
 1013 0008 FB71     		strb	r3, [r7, #7]
 835:.\Generated_Source\PSoC5/Pump_PL.c ****         #if(Pump_PL_RXHW_ADDRESS_ENABLED)
 836:.\Generated_Source\PSoC5/Pump_PL.c ****             #if(Pump_PL_CONTROL_REG_REMOVED)
 837:.\Generated_Source\PSoC5/Pump_PL.c ****                 if(addressMode != 0u) { }     /* release compiler warning */
 838:.\Generated_Source\PSoC5/Pump_PL.c ****             #else /* Pump_PL_CONTROL_REG_REMOVED */
 839:.\Generated_Source\PSoC5/Pump_PL.c ****                 uint8 tmpCtrl;
 840:.\Generated_Source\PSoC5/Pump_PL.c ****                 tmpCtrl = Pump_PL_CONTROL_REG & (uint8)~Pump_PL_CTRL_RXADDR_MODE_MASK;
 841:.\Generated_Source\PSoC5/Pump_PL.c ****                 tmpCtrl |= (uint8)(addressMode << Pump_PL_CTRL_RXADDR_MODE0_SHIFT);
 842:.\Generated_Source\PSoC5/Pump_PL.c ****                 Pump_PL_CONTROL_REG = tmpCtrl;
 843:.\Generated_Source\PSoC5/Pump_PL.c ****                 #if(Pump_PL_RX_INTERRUPT_ENABLED && \
 844:.\Generated_Source\PSoC5/Pump_PL.c ****                    (Pump_PL_RXBUFFERSIZE > Pump_PL_FIFO_LENGTH) )
 845:.\Generated_Source\PSoC5/Pump_PL.c ****                     Pump_PL_rxAddressMode = addressMode;
 846:.\Generated_Source\PSoC5/Pump_PL.c ****                     Pump_PL_rxAddressDetected = 0u;
 847:.\Generated_Source\PSoC5/Pump_PL.c ****                 #endif /* End Pump_PL_RXBUFFERSIZE > Pump_PL_FIFO_LENGTH*/
 848:.\Generated_Source\PSoC5/Pump_PL.c ****             #endif /* End Pump_PL_CONTROL_REG_REMOVED */
 849:.\Generated_Source\PSoC5/Pump_PL.c ****         #else /* Pump_PL_RXHW_ADDRESS_ENABLED */
 850:.\Generated_Source\PSoC5/Pump_PL.c ****             if(addressMode != 0u) { }     /* release compiler warning */
 851:.\Generated_Source\PSoC5/Pump_PL.c ****         #endif /* End Pump_PL_RXHW_ADDRESS_ENABLED */
 852:.\Generated_Source\PSoC5/Pump_PL.c ****     }
 1014              		.loc 1 852 0
 1015 000a 0C37     		adds	r7, r7, #12
 1016              		.cfi_def_cfa_offset 4
 1017 000c BD46     		mov	sp, r7
 1018              		.cfi_def_cfa_register 13
 1019              		@ sp needed
 1020 000e 5DF8047B 		ldr	r7, [sp], #4
 1021              		.cfi_restore 7
 1022              		.cfi_def_cfa_offset 0
 1023 0012 7047     		bx	lr
 1024              		.cfi_endproc
 1025              	.LFE15:
 1026              		.size	Pump_PL_SetRxAddressMode, .-Pump_PL_SetRxAddressMode
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 34


 1027              		.section	.text.Pump_PL_SetRxAddress1,"ax",%progbits
 1028              		.align	2
 1029              		.global	Pump_PL_SetRxAddress1
 1030              		.thumb
 1031              		.thumb_func
 1032              		.type	Pump_PL_SetRxAddress1, %function
 1033              	Pump_PL_SetRxAddress1:
 1034              	.LFB16:
 853:.\Generated_Source\PSoC5/Pump_PL.c **** 
 854:.\Generated_Source\PSoC5/Pump_PL.c **** 
 855:.\Generated_Source\PSoC5/Pump_PL.c ****     /*******************************************************************************
 856:.\Generated_Source\PSoC5/Pump_PL.c ****     * Function Name: Pump_PL_SetRxAddress1
 857:.\Generated_Source\PSoC5/Pump_PL.c ****     ********************************************************************************
 858:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 859:.\Generated_Source\PSoC5/Pump_PL.c ****     * Summary:
 860:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Set the first hardware address compare value
 861:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 862:.\Generated_Source\PSoC5/Pump_PL.c ****     * Parameters:
 863:.\Generated_Source\PSoC5/Pump_PL.c ****     *  address
 864:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 865:.\Generated_Source\PSoC5/Pump_PL.c ****     * Return:
 866:.\Generated_Source\PSoC5/Pump_PL.c ****     *  None.
 867:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 868:.\Generated_Source\PSoC5/Pump_PL.c ****     *******************************************************************************/
 869:.\Generated_Source\PSoC5/Pump_PL.c ****     void Pump_PL_SetRxAddress1(uint8 address) 
 870:.\Generated_Source\PSoC5/Pump_PL.c **** 
 871:.\Generated_Source\PSoC5/Pump_PL.c ****     {
 1035              		.loc 1 871 0
 1036              		.cfi_startproc
 1037              		@ args = 0, pretend = 0, frame = 8
 1038              		@ frame_needed = 1, uses_anonymous_args = 0
 1039              		@ link register save eliminated.
 1040 0000 80B4     		push	{r7}
 1041              		.cfi_def_cfa_offset 4
 1042              		.cfi_offset 7, -4
 1043 0002 83B0     		sub	sp, sp, #12
 1044              		.cfi_def_cfa_offset 16
 1045 0004 00AF     		add	r7, sp, #0
 1046              		.cfi_def_cfa_register 7
 1047 0006 0346     		mov	r3, r0
 1048 0008 FB71     		strb	r3, [r7, #7]
 872:.\Generated_Source\PSoC5/Pump_PL.c ****         Pump_PL_RXADDRESS1_REG = address;
 1049              		.loc 1 872 0
 1050 000a 044A     		ldr	r2, .L65
 1051 000c FB79     		ldrb	r3, [r7, #7]
 1052 000e 1370     		strb	r3, [r2]
 873:.\Generated_Source\PSoC5/Pump_PL.c ****     }
 1053              		.loc 1 873 0
 1054 0010 0C37     		adds	r7, r7, #12
 1055              		.cfi_def_cfa_offset 4
 1056 0012 BD46     		mov	sp, r7
 1057              		.cfi_def_cfa_register 13
 1058              		@ sp needed
 1059 0014 5DF8047B 		ldr	r7, [sp], #4
 1060              		.cfi_restore 7
 1061              		.cfi_def_cfa_offset 0
 1062 0018 7047     		bx	lr
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 35


 1063              	.L66:
 1064 001a 00BF     		.align	2
 1065              	.L65:
 1066 001c 26650040 		.word	1073767718
 1067              		.cfi_endproc
 1068              	.LFE16:
 1069              		.size	Pump_PL_SetRxAddress1, .-Pump_PL_SetRxAddress1
 1070              		.section	.text.Pump_PL_SetRxAddress2,"ax",%progbits
 1071              		.align	2
 1072              		.global	Pump_PL_SetRxAddress2
 1073              		.thumb
 1074              		.thumb_func
 1075              		.type	Pump_PL_SetRxAddress2, %function
 1076              	Pump_PL_SetRxAddress2:
 1077              	.LFB17:
 874:.\Generated_Source\PSoC5/Pump_PL.c **** 
 875:.\Generated_Source\PSoC5/Pump_PL.c **** 
 876:.\Generated_Source\PSoC5/Pump_PL.c ****     /*******************************************************************************
 877:.\Generated_Source\PSoC5/Pump_PL.c ****     * Function Name: Pump_PL_SetRxAddress2
 878:.\Generated_Source\PSoC5/Pump_PL.c ****     ********************************************************************************
 879:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 880:.\Generated_Source\PSoC5/Pump_PL.c ****     * Summary:
 881:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Set the second hardware address compare value
 882:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 883:.\Generated_Source\PSoC5/Pump_PL.c ****     * Parameters:
 884:.\Generated_Source\PSoC5/Pump_PL.c ****     *  address
 885:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 886:.\Generated_Source\PSoC5/Pump_PL.c ****     * Return:
 887:.\Generated_Source\PSoC5/Pump_PL.c ****     *  None.
 888:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 889:.\Generated_Source\PSoC5/Pump_PL.c ****     *******************************************************************************/
 890:.\Generated_Source\PSoC5/Pump_PL.c ****     void Pump_PL_SetRxAddress2(uint8 address) 
 891:.\Generated_Source\PSoC5/Pump_PL.c ****     {
 1078              		.loc 1 891 0
 1079              		.cfi_startproc
 1080              		@ args = 0, pretend = 0, frame = 8
 1081              		@ frame_needed = 1, uses_anonymous_args = 0
 1082              		@ link register save eliminated.
 1083 0000 80B4     		push	{r7}
 1084              		.cfi_def_cfa_offset 4
 1085              		.cfi_offset 7, -4
 1086 0002 83B0     		sub	sp, sp, #12
 1087              		.cfi_def_cfa_offset 16
 1088 0004 00AF     		add	r7, sp, #0
 1089              		.cfi_def_cfa_register 7
 1090 0006 0346     		mov	r3, r0
 1091 0008 FB71     		strb	r3, [r7, #7]
 892:.\Generated_Source\PSoC5/Pump_PL.c ****         Pump_PL_RXADDRESS2_REG = address;
 1092              		.loc 1 892 0
 1093 000a 044A     		ldr	r2, .L68
 1094 000c FB79     		ldrb	r3, [r7, #7]
 1095 000e 1370     		strb	r3, [r2]
 893:.\Generated_Source\PSoC5/Pump_PL.c ****     }
 1096              		.loc 1 893 0
 1097 0010 0C37     		adds	r7, r7, #12
 1098              		.cfi_def_cfa_offset 4
 1099 0012 BD46     		mov	sp, r7
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 36


 1100              		.cfi_def_cfa_register 13
 1101              		@ sp needed
 1102 0014 5DF8047B 		ldr	r7, [sp], #4
 1103              		.cfi_restore 7
 1104              		.cfi_def_cfa_offset 0
 1105 0018 7047     		bx	lr
 1106              	.L69:
 1107 001a 00BF     		.align	2
 1108              	.L68:
 1109 001c 36650040 		.word	1073767734
 1110              		.cfi_endproc
 1111              	.LFE17:
 1112              		.size	Pump_PL_SetRxAddress2, .-Pump_PL_SetRxAddress2
 1113              		.section	.text.Pump_PL_SetTxInterruptMode,"ax",%progbits
 1114              		.align	2
 1115              		.global	Pump_PL_SetTxInterruptMode
 1116              		.thumb
 1117              		.thumb_func
 1118              		.type	Pump_PL_SetTxInterruptMode, %function
 1119              	Pump_PL_SetTxInterruptMode:
 1120              	.LFB18:
 894:.\Generated_Source\PSoC5/Pump_PL.c **** 
 895:.\Generated_Source\PSoC5/Pump_PL.c **** #endif  /* Pump_PL_RX_ENABLED || Pump_PL_HD_ENABLED*/
 896:.\Generated_Source\PSoC5/Pump_PL.c **** 
 897:.\Generated_Source\PSoC5/Pump_PL.c **** 
 898:.\Generated_Source\PSoC5/Pump_PL.c **** #if( (Pump_PL_TX_ENABLED) || (Pump_PL_HD_ENABLED) )
 899:.\Generated_Source\PSoC5/Pump_PL.c **** 
 900:.\Generated_Source\PSoC5/Pump_PL.c ****     #if(Pump_PL_TX_INTERRUPT_ENABLED)
 901:.\Generated_Source\PSoC5/Pump_PL.c **** 
 902:.\Generated_Source\PSoC5/Pump_PL.c ****         /*******************************************************************************
 903:.\Generated_Source\PSoC5/Pump_PL.c ****         * Function Name: Pump_PL_EnableTxInt
 904:.\Generated_Source\PSoC5/Pump_PL.c ****         ********************************************************************************
 905:.\Generated_Source\PSoC5/Pump_PL.c ****         *
 906:.\Generated_Source\PSoC5/Pump_PL.c ****         * Summary:
 907:.\Generated_Source\PSoC5/Pump_PL.c ****         *  Enable TX interrupt generation
 908:.\Generated_Source\PSoC5/Pump_PL.c ****         *
 909:.\Generated_Source\PSoC5/Pump_PL.c ****         * Parameters:
 910:.\Generated_Source\PSoC5/Pump_PL.c ****         *  None.
 911:.\Generated_Source\PSoC5/Pump_PL.c ****         *
 912:.\Generated_Source\PSoC5/Pump_PL.c ****         * Return:
 913:.\Generated_Source\PSoC5/Pump_PL.c ****         *  None.
 914:.\Generated_Source\PSoC5/Pump_PL.c ****         *
 915:.\Generated_Source\PSoC5/Pump_PL.c ****         * Theory:
 916:.\Generated_Source\PSoC5/Pump_PL.c ****         *  Enable the interrupt output -or- the interrupt component itself
 917:.\Generated_Source\PSoC5/Pump_PL.c ****         *
 918:.\Generated_Source\PSoC5/Pump_PL.c ****         *******************************************************************************/
 919:.\Generated_Source\PSoC5/Pump_PL.c ****         void Pump_PL_EnableTxInt(void) 
 920:.\Generated_Source\PSoC5/Pump_PL.c ****         {
 921:.\Generated_Source\PSoC5/Pump_PL.c ****             CyIntEnable(Pump_PL_TX_VECT_NUM);
 922:.\Generated_Source\PSoC5/Pump_PL.c ****         }
 923:.\Generated_Source\PSoC5/Pump_PL.c **** 
 924:.\Generated_Source\PSoC5/Pump_PL.c **** 
 925:.\Generated_Source\PSoC5/Pump_PL.c ****         /*******************************************************************************
 926:.\Generated_Source\PSoC5/Pump_PL.c ****         * Function Name: Pump_PL_DisableTxInt
 927:.\Generated_Source\PSoC5/Pump_PL.c ****         ********************************************************************************
 928:.\Generated_Source\PSoC5/Pump_PL.c ****         *
 929:.\Generated_Source\PSoC5/Pump_PL.c ****         * Summary:
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 37


 930:.\Generated_Source\PSoC5/Pump_PL.c ****         *  Disable TX interrupt generation
 931:.\Generated_Source\PSoC5/Pump_PL.c ****         *
 932:.\Generated_Source\PSoC5/Pump_PL.c ****         * Parameters:
 933:.\Generated_Source\PSoC5/Pump_PL.c ****         *  None.
 934:.\Generated_Source\PSoC5/Pump_PL.c ****         *
 935:.\Generated_Source\PSoC5/Pump_PL.c ****         * Return:
 936:.\Generated_Source\PSoC5/Pump_PL.c ****         *  None.
 937:.\Generated_Source\PSoC5/Pump_PL.c ****         *
 938:.\Generated_Source\PSoC5/Pump_PL.c ****         * Theory:
 939:.\Generated_Source\PSoC5/Pump_PL.c ****         *  Disable the interrupt output -or- the interrupt component itself
 940:.\Generated_Source\PSoC5/Pump_PL.c ****         *
 941:.\Generated_Source\PSoC5/Pump_PL.c ****         *******************************************************************************/
 942:.\Generated_Source\PSoC5/Pump_PL.c ****         void Pump_PL_DisableTxInt(void) 
 943:.\Generated_Source\PSoC5/Pump_PL.c ****         {
 944:.\Generated_Source\PSoC5/Pump_PL.c ****             CyIntDisable(Pump_PL_TX_VECT_NUM);
 945:.\Generated_Source\PSoC5/Pump_PL.c ****         }
 946:.\Generated_Source\PSoC5/Pump_PL.c **** 
 947:.\Generated_Source\PSoC5/Pump_PL.c ****     #endif /* Pump_PL_TX_INTERRUPT_ENABLED */
 948:.\Generated_Source\PSoC5/Pump_PL.c **** 
 949:.\Generated_Source\PSoC5/Pump_PL.c **** 
 950:.\Generated_Source\PSoC5/Pump_PL.c ****     /*******************************************************************************
 951:.\Generated_Source\PSoC5/Pump_PL.c ****     * Function Name: Pump_PL_SetTxInterruptMode
 952:.\Generated_Source\PSoC5/Pump_PL.c ****     ********************************************************************************
 953:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 954:.\Generated_Source\PSoC5/Pump_PL.c ****     * Summary:
 955:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Configure which status bits trigger an interrupt event
 956:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 957:.\Generated_Source\PSoC5/Pump_PL.c ****     * Parameters:
 958:.\Generated_Source\PSoC5/Pump_PL.c ****     *  intSrc: An or'd combination of the desired status bit masks (defined in
 959:.\Generated_Source\PSoC5/Pump_PL.c ****     *          the header file)
 960:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 961:.\Generated_Source\PSoC5/Pump_PL.c ****     * Return:
 962:.\Generated_Source\PSoC5/Pump_PL.c ****     *  None.
 963:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 964:.\Generated_Source\PSoC5/Pump_PL.c ****     * Theory:
 965:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Enables the output of specific status bits to the interrupt controller
 966:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 967:.\Generated_Source\PSoC5/Pump_PL.c ****     *******************************************************************************/
 968:.\Generated_Source\PSoC5/Pump_PL.c ****     void Pump_PL_SetTxInterruptMode(uint8 intSrc) 
 969:.\Generated_Source\PSoC5/Pump_PL.c ****     {
 1121              		.loc 1 969 0
 1122              		.cfi_startproc
 1123              		@ args = 0, pretend = 0, frame = 8
 1124              		@ frame_needed = 1, uses_anonymous_args = 0
 1125              		@ link register save eliminated.
 1126 0000 80B4     		push	{r7}
 1127              		.cfi_def_cfa_offset 4
 1128              		.cfi_offset 7, -4
 1129 0002 83B0     		sub	sp, sp, #12
 1130              		.cfi_def_cfa_offset 16
 1131 0004 00AF     		add	r7, sp, #0
 1132              		.cfi_def_cfa_register 7
 1133 0006 0346     		mov	r3, r0
 1134 0008 FB71     		strb	r3, [r7, #7]
 970:.\Generated_Source\PSoC5/Pump_PL.c ****         Pump_PL_TXSTATUS_MASK_REG = intSrc;
 1135              		.loc 1 970 0
 1136 000a 044A     		ldr	r2, .L71
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 38


 1137 000c FB79     		ldrb	r3, [r7, #7]
 1138 000e 1370     		strb	r3, [r2]
 971:.\Generated_Source\PSoC5/Pump_PL.c ****     }
 1139              		.loc 1 971 0
 1140 0010 0C37     		adds	r7, r7, #12
 1141              		.cfi_def_cfa_offset 4
 1142 0012 BD46     		mov	sp, r7
 1143              		.cfi_def_cfa_register 13
 1144              		@ sp needed
 1145 0014 5DF8047B 		ldr	r7, [sp], #4
 1146              		.cfi_restore 7
 1147              		.cfi_def_cfa_offset 0
 1148 0018 7047     		bx	lr
 1149              	.L72:
 1150 001a 00BF     		.align	2
 1151              	.L71:
 1152 001c 8C640040 		.word	1073767564
 1153              		.cfi_endproc
 1154              	.LFE18:
 1155              		.size	Pump_PL_SetTxInterruptMode, .-Pump_PL_SetTxInterruptMode
 1156              		.section	.text.Pump_PL_WriteTxData,"ax",%progbits
 1157              		.align	2
 1158              		.global	Pump_PL_WriteTxData
 1159              		.thumb
 1160              		.thumb_func
 1161              		.type	Pump_PL_WriteTxData, %function
 1162              	Pump_PL_WriteTxData:
 1163              	.LFB19:
 972:.\Generated_Source\PSoC5/Pump_PL.c **** 
 973:.\Generated_Source\PSoC5/Pump_PL.c **** 
 974:.\Generated_Source\PSoC5/Pump_PL.c ****     /*******************************************************************************
 975:.\Generated_Source\PSoC5/Pump_PL.c ****     * Function Name: Pump_PL_WriteTxData
 976:.\Generated_Source\PSoC5/Pump_PL.c ****     ********************************************************************************
 977:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 978:.\Generated_Source\PSoC5/Pump_PL.c ****     * Summary:
 979:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Write a byte of data to the Transmit FIFO or TX buffer to be sent when the
 980:.\Generated_Source\PSoC5/Pump_PL.c ****     *  bus is available. WriteTxData sends a byte without checking for buffer room
 981:.\Generated_Source\PSoC5/Pump_PL.c ****     *  or status. It is up to the user to separately check status.
 982:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 983:.\Generated_Source\PSoC5/Pump_PL.c ****     * Parameters:
 984:.\Generated_Source\PSoC5/Pump_PL.c ****     *  TXDataByte: byte of data to place in the transmit FIFO
 985:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 986:.\Generated_Source\PSoC5/Pump_PL.c ****     * Return:
 987:.\Generated_Source\PSoC5/Pump_PL.c ****     * void
 988:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 989:.\Generated_Source\PSoC5/Pump_PL.c ****     * Global Variables:
 990:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_txBuffer - RAM buffer pointer for save data for transmission
 991:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_txBufferWrite - cyclic index for write to txBuffer,
 992:.\Generated_Source\PSoC5/Pump_PL.c ****     *    incremented after each byte saved to buffer.
 993:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_txBufferRead - cyclic index for read from txBuffer,
 994:.\Generated_Source\PSoC5/Pump_PL.c ****     *    checked to identify the condition to write to FIFO directly or to TX buffer
 995:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_initVar - checked to identify that the component has been
 996:.\Generated_Source\PSoC5/Pump_PL.c ****     *    initialized.
 997:.\Generated_Source\PSoC5/Pump_PL.c ****     *
 998:.\Generated_Source\PSoC5/Pump_PL.c ****     * Reentrant:
 999:.\Generated_Source\PSoC5/Pump_PL.c ****     *  No.
1000:.\Generated_Source\PSoC5/Pump_PL.c ****     *
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 39


1001:.\Generated_Source\PSoC5/Pump_PL.c ****     *******************************************************************************/
1002:.\Generated_Source\PSoC5/Pump_PL.c ****     void Pump_PL_WriteTxData(uint8 txDataByte) 
1003:.\Generated_Source\PSoC5/Pump_PL.c ****     {
 1164              		.loc 1 1003 0
 1165              		.cfi_startproc
 1166              		@ args = 0, pretend = 0, frame = 8
 1167              		@ frame_needed = 1, uses_anonymous_args = 0
 1168              		@ link register save eliminated.
 1169 0000 80B4     		push	{r7}
 1170              		.cfi_def_cfa_offset 4
 1171              		.cfi_offset 7, -4
 1172 0002 83B0     		sub	sp, sp, #12
 1173              		.cfi_def_cfa_offset 16
 1174 0004 00AF     		add	r7, sp, #0
 1175              		.cfi_def_cfa_register 7
 1176 0006 0346     		mov	r3, r0
 1177 0008 FB71     		strb	r3, [r7, #7]
1004:.\Generated_Source\PSoC5/Pump_PL.c ****         /* If not Initialized then skip this function*/
1005:.\Generated_Source\PSoC5/Pump_PL.c ****         if(Pump_PL_initVar != 0u)
 1178              		.loc 1 1005 0
 1179 000a 064B     		ldr	r3, .L75
 1180 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1181 000e 002B     		cmp	r3, #0
 1182 0010 02D0     		beq	.L73
1006:.\Generated_Source\PSoC5/Pump_PL.c ****         {
1007:.\Generated_Source\PSoC5/Pump_PL.c ****             #if(Pump_PL_TXBUFFERSIZE > Pump_PL_FIFO_LENGTH)
1008:.\Generated_Source\PSoC5/Pump_PL.c **** 
1009:.\Generated_Source\PSoC5/Pump_PL.c ****                 /* Disable Tx interrupt. */
1010:.\Generated_Source\PSoC5/Pump_PL.c ****                 /* Protect variables that could change on interrupt. */
1011:.\Generated_Source\PSoC5/Pump_PL.c ****                 #if(Pump_PL_TX_INTERRUPT_ENABLED)
1012:.\Generated_Source\PSoC5/Pump_PL.c ****                     Pump_PL_DisableTxInt();
1013:.\Generated_Source\PSoC5/Pump_PL.c ****                 #endif /* End Pump_PL_TX_INTERRUPT_ENABLED */
1014:.\Generated_Source\PSoC5/Pump_PL.c **** 
1015:.\Generated_Source\PSoC5/Pump_PL.c ****                 if( (Pump_PL_txBufferRead == Pump_PL_txBufferWrite) &&
1016:.\Generated_Source\PSoC5/Pump_PL.c ****                     ((Pump_PL_TXSTATUS_REG & Pump_PL_TX_STS_FIFO_FULL) == 0u) )
1017:.\Generated_Source\PSoC5/Pump_PL.c ****                 {
1018:.\Generated_Source\PSoC5/Pump_PL.c ****                     /* Add directly to the FIFO. */
1019:.\Generated_Source\PSoC5/Pump_PL.c ****                     Pump_PL_TXDATA_REG = txDataByte;
1020:.\Generated_Source\PSoC5/Pump_PL.c ****                 }
1021:.\Generated_Source\PSoC5/Pump_PL.c ****                 else
1022:.\Generated_Source\PSoC5/Pump_PL.c ****                 {
1023:.\Generated_Source\PSoC5/Pump_PL.c ****                     if(Pump_PL_txBufferWrite >= Pump_PL_TXBUFFERSIZE)
1024:.\Generated_Source\PSoC5/Pump_PL.c ****                     {
1025:.\Generated_Source\PSoC5/Pump_PL.c ****                         Pump_PL_txBufferWrite = 0u;
1026:.\Generated_Source\PSoC5/Pump_PL.c ****                     }
1027:.\Generated_Source\PSoC5/Pump_PL.c **** 
1028:.\Generated_Source\PSoC5/Pump_PL.c ****                     Pump_PL_txBuffer[Pump_PL_txBufferWrite] = txDataByte;
1029:.\Generated_Source\PSoC5/Pump_PL.c **** 
1030:.\Generated_Source\PSoC5/Pump_PL.c ****                     /* Add to the software buffer. */
1031:.\Generated_Source\PSoC5/Pump_PL.c ****                     Pump_PL_txBufferWrite++;
1032:.\Generated_Source\PSoC5/Pump_PL.c **** 
1033:.\Generated_Source\PSoC5/Pump_PL.c ****                 }
1034:.\Generated_Source\PSoC5/Pump_PL.c **** 
1035:.\Generated_Source\PSoC5/Pump_PL.c ****                 /* Enable Tx interrupt. */
1036:.\Generated_Source\PSoC5/Pump_PL.c ****                 #if(Pump_PL_TX_INTERRUPT_ENABLED)
1037:.\Generated_Source\PSoC5/Pump_PL.c ****                     Pump_PL_EnableTxInt();
1038:.\Generated_Source\PSoC5/Pump_PL.c ****                 #endif /* End Pump_PL_TX_INTERRUPT_ENABLED */
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 40


1039:.\Generated_Source\PSoC5/Pump_PL.c **** 
1040:.\Generated_Source\PSoC5/Pump_PL.c ****             #else /* Pump_PL_TXBUFFERSIZE > Pump_PL_FIFO_LENGTH */
1041:.\Generated_Source\PSoC5/Pump_PL.c **** 
1042:.\Generated_Source\PSoC5/Pump_PL.c ****                 /* Add directly to the FIFO. */
1043:.\Generated_Source\PSoC5/Pump_PL.c ****                 Pump_PL_TXDATA_REG = txDataByte;
 1183              		.loc 1 1043 0
 1184 0012 054A     		ldr	r2, .L75+4
 1185 0014 FB79     		ldrb	r3, [r7, #7]
 1186 0016 1370     		strb	r3, [r2]
 1187              	.L73:
1044:.\Generated_Source\PSoC5/Pump_PL.c **** 
1045:.\Generated_Source\PSoC5/Pump_PL.c ****             #endif /* End Pump_PL_TXBUFFERSIZE > Pump_PL_FIFO_LENGTH */
1046:.\Generated_Source\PSoC5/Pump_PL.c ****         }
1047:.\Generated_Source\PSoC5/Pump_PL.c ****     }
 1188              		.loc 1 1047 0
 1189 0018 0C37     		adds	r7, r7, #12
 1190              		.cfi_def_cfa_offset 4
 1191 001a BD46     		mov	sp, r7
 1192              		.cfi_def_cfa_register 13
 1193              		@ sp needed
 1194 001c 5DF8047B 		ldr	r7, [sp], #4
 1195              		.cfi_restore 7
 1196              		.cfi_def_cfa_offset 0
 1197 0020 7047     		bx	lr
 1198              	.L76:
 1199 0022 00BF     		.align	2
 1200              	.L75:
 1201 0024 00000000 		.word	Pump_PL_initVar
 1202 0028 48650040 		.word	1073767752
 1203              		.cfi_endproc
 1204              	.LFE19:
 1205              		.size	Pump_PL_WriteTxData, .-Pump_PL_WriteTxData
 1206              		.section	.text.Pump_PL_ReadTxStatus,"ax",%progbits
 1207              		.align	2
 1208              		.global	Pump_PL_ReadTxStatus
 1209              		.thumb
 1210              		.thumb_func
 1211              		.type	Pump_PL_ReadTxStatus, %function
 1212              	Pump_PL_ReadTxStatus:
 1213              	.LFB20:
1048:.\Generated_Source\PSoC5/Pump_PL.c **** 
1049:.\Generated_Source\PSoC5/Pump_PL.c **** 
1050:.\Generated_Source\PSoC5/Pump_PL.c ****     /*******************************************************************************
1051:.\Generated_Source\PSoC5/Pump_PL.c ****     * Function Name: Pump_PL_ReadTxStatus
1052:.\Generated_Source\PSoC5/Pump_PL.c ****     ********************************************************************************
1053:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1054:.\Generated_Source\PSoC5/Pump_PL.c ****     * Summary:
1055:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Read the status register for the component
1056:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1057:.\Generated_Source\PSoC5/Pump_PL.c ****     * Parameters:
1058:.\Generated_Source\PSoC5/Pump_PL.c ****     *  None.
1059:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1060:.\Generated_Source\PSoC5/Pump_PL.c ****     * Return:
1061:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Contents of the status register
1062:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1063:.\Generated_Source\PSoC5/Pump_PL.c ****     * Theory:
1064:.\Generated_Source\PSoC5/Pump_PL.c ****     *  This function reads the status register which is clear on read. It is up to
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 41


1065:.\Generated_Source\PSoC5/Pump_PL.c ****     *  the user to handle all bits in this return value accordingly, even if the bit
1066:.\Generated_Source\PSoC5/Pump_PL.c ****     *  was not enabled as an interrupt source the event happened and must be handled
1067:.\Generated_Source\PSoC5/Pump_PL.c ****     *  accordingly.
1068:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1069:.\Generated_Source\PSoC5/Pump_PL.c ****     *******************************************************************************/
1070:.\Generated_Source\PSoC5/Pump_PL.c ****     uint8 Pump_PL_ReadTxStatus(void) 
1071:.\Generated_Source\PSoC5/Pump_PL.c ****     {
 1214              		.loc 1 1071 0
 1215              		.cfi_startproc
 1216              		@ args = 0, pretend = 0, frame = 0
 1217              		@ frame_needed = 1, uses_anonymous_args = 0
 1218              		@ link register save eliminated.
 1219 0000 80B4     		push	{r7}
 1220              		.cfi_def_cfa_offset 4
 1221              		.cfi_offset 7, -4
 1222 0002 00AF     		add	r7, sp, #0
 1223              		.cfi_def_cfa_register 7
1072:.\Generated_Source\PSoC5/Pump_PL.c ****         return(Pump_PL_TXSTATUS_REG);
 1224              		.loc 1 1072 0
 1225 0004 034B     		ldr	r3, .L79
 1226 0006 1B78     		ldrb	r3, [r3]
 1227 0008 DBB2     		uxtb	r3, r3
1073:.\Generated_Source\PSoC5/Pump_PL.c ****     }
 1228              		.loc 1 1073 0
 1229 000a 1846     		mov	r0, r3
 1230 000c BD46     		mov	sp, r7
 1231              		.cfi_def_cfa_register 13
 1232              		@ sp needed
 1233 000e 5DF8047B 		ldr	r7, [sp], #4
 1234              		.cfi_restore 7
 1235              		.cfi_def_cfa_offset 0
 1236 0012 7047     		bx	lr
 1237              	.L80:
 1238              		.align	2
 1239              	.L79:
 1240 0014 6C640040 		.word	1073767532
 1241              		.cfi_endproc
 1242              	.LFE20:
 1243              		.size	Pump_PL_ReadTxStatus, .-Pump_PL_ReadTxStatus
 1244              		.section	.text.Pump_PL_PutChar,"ax",%progbits
 1245              		.align	2
 1246              		.global	Pump_PL_PutChar
 1247              		.thumb
 1248              		.thumb_func
 1249              		.type	Pump_PL_PutChar, %function
 1250              	Pump_PL_PutChar:
 1251              	.LFB21:
1074:.\Generated_Source\PSoC5/Pump_PL.c **** 
1075:.\Generated_Source\PSoC5/Pump_PL.c **** 
1076:.\Generated_Source\PSoC5/Pump_PL.c ****     /*******************************************************************************
1077:.\Generated_Source\PSoC5/Pump_PL.c ****     * Function Name: Pump_PL_PutChar
1078:.\Generated_Source\PSoC5/Pump_PL.c ****     ********************************************************************************
1079:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1080:.\Generated_Source\PSoC5/Pump_PL.c ****     * Summary:
1081:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Wait to send byte until TX register or buffer has room.
1082:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1083:.\Generated_Source\PSoC5/Pump_PL.c ****     * Parameters:
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 42


1084:.\Generated_Source\PSoC5/Pump_PL.c ****     *  txDataByte: The 8-bit data value to send across the UART.
1085:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1086:.\Generated_Source\PSoC5/Pump_PL.c ****     * Return:
1087:.\Generated_Source\PSoC5/Pump_PL.c ****     *  None.
1088:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1089:.\Generated_Source\PSoC5/Pump_PL.c ****     * Global Variables:
1090:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_txBuffer - RAM buffer pointer for save data for transmission
1091:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_txBufferWrite - cyclic index for write to txBuffer,
1092:.\Generated_Source\PSoC5/Pump_PL.c ****     *     checked to identify free space in txBuffer and incremented after each byte
1093:.\Generated_Source\PSoC5/Pump_PL.c ****     *     saved to buffer.
1094:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_txBufferRead - cyclic index for read from txBuffer,
1095:.\Generated_Source\PSoC5/Pump_PL.c ****     *     checked to identify free space in txBuffer.
1096:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_initVar - checked to identify that the component has been
1097:.\Generated_Source\PSoC5/Pump_PL.c ****     *     initialized.
1098:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1099:.\Generated_Source\PSoC5/Pump_PL.c ****     * Reentrant:
1100:.\Generated_Source\PSoC5/Pump_PL.c ****     *  No.
1101:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1102:.\Generated_Source\PSoC5/Pump_PL.c ****     * Theory:
1103:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Allows the user to transmit any byte of data in a single transfer
1104:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1105:.\Generated_Source\PSoC5/Pump_PL.c ****     *******************************************************************************/
1106:.\Generated_Source\PSoC5/Pump_PL.c ****     void Pump_PL_PutChar(uint8 txDataByte) 
1107:.\Generated_Source\PSoC5/Pump_PL.c ****     {
 1252              		.loc 1 1107 0
 1253              		.cfi_startproc
 1254              		@ args = 0, pretend = 0, frame = 8
 1255              		@ frame_needed = 1, uses_anonymous_args = 0
 1256              		@ link register save eliminated.
 1257 0000 80B4     		push	{r7}
 1258              		.cfi_def_cfa_offset 4
 1259              		.cfi_offset 7, -4
 1260 0002 83B0     		sub	sp, sp, #12
 1261              		.cfi_def_cfa_offset 16
 1262 0004 00AF     		add	r7, sp, #0
 1263              		.cfi_def_cfa_register 7
 1264 0006 0346     		mov	r3, r0
 1265 0008 FB71     		strb	r3, [r7, #7]
1108:.\Generated_Source\PSoC5/Pump_PL.c ****             #if(Pump_PL_TXBUFFERSIZE > Pump_PL_FIFO_LENGTH)
1109:.\Generated_Source\PSoC5/Pump_PL.c ****                 /* The temporary output pointer is used since it takes two instructions
1110:.\Generated_Source\PSoC5/Pump_PL.c ****                 *  to increment with a wrap, and we can't risk doing that with the real
1111:.\Generated_Source\PSoC5/Pump_PL.c ****                 *  pointer and getting an interrupt in between instructions.
1112:.\Generated_Source\PSoC5/Pump_PL.c ****                 */
1113:.\Generated_Source\PSoC5/Pump_PL.c ****                 uint8 loc_txBufferWrite;
1114:.\Generated_Source\PSoC5/Pump_PL.c ****                 uint8 loc_txBufferRead;
1115:.\Generated_Source\PSoC5/Pump_PL.c **** 
1116:.\Generated_Source\PSoC5/Pump_PL.c ****                 do{
1117:.\Generated_Source\PSoC5/Pump_PL.c ****                     /* Block if software buffer is full, so we don't overwrite. */
1118:.\Generated_Source\PSoC5/Pump_PL.c ****                     #if ((Pump_PL_TXBUFFERSIZE > Pump_PL_MAX_BYTE_VALUE) && (CY_PSOC3))
1119:.\Generated_Source\PSoC5/Pump_PL.c ****                         /* Disable TX interrupt to protect variables that could change on interrupt
1120:.\Generated_Source\PSoC5/Pump_PL.c ****                         CyIntDisable(Pump_PL_TX_VECT_NUM);
1121:.\Generated_Source\PSoC5/Pump_PL.c ****                     #endif /* End TXBUFFERSIZE > 255 */
1122:.\Generated_Source\PSoC5/Pump_PL.c ****                     loc_txBufferWrite = Pump_PL_txBufferWrite;
1123:.\Generated_Source\PSoC5/Pump_PL.c ****                     loc_txBufferRead = Pump_PL_txBufferRead;
1124:.\Generated_Source\PSoC5/Pump_PL.c ****                     #if ((Pump_PL_TXBUFFERSIZE > Pump_PL_MAX_BYTE_VALUE) && (CY_PSOC3))
1125:.\Generated_Source\PSoC5/Pump_PL.c ****                         /* Enable interrupt to continue transmission */
1126:.\Generated_Source\PSoC5/Pump_PL.c ****                         CyIntEnable(Pump_PL_TX_VECT_NUM);
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 43


1127:.\Generated_Source\PSoC5/Pump_PL.c ****                     #endif /* End TXBUFFERSIZE > 255 */
1128:.\Generated_Source\PSoC5/Pump_PL.c ****                 }while( (loc_txBufferWrite < loc_txBufferRead) ? (loc_txBufferWrite == (loc_txBuffe
1129:.\Generated_Source\PSoC5/Pump_PL.c ****                                         ((loc_txBufferWrite - loc_txBufferRead) ==
1130:.\Generated_Source\PSoC5/Pump_PL.c ****                                         (uint8)(Pump_PL_TXBUFFERSIZE - 1u)) );
1131:.\Generated_Source\PSoC5/Pump_PL.c **** 
1132:.\Generated_Source\PSoC5/Pump_PL.c ****                 if( (loc_txBufferRead == loc_txBufferWrite) &&
1133:.\Generated_Source\PSoC5/Pump_PL.c ****                     ((Pump_PL_TXSTATUS_REG & Pump_PL_TX_STS_FIFO_FULL) == 0u) )
1134:.\Generated_Source\PSoC5/Pump_PL.c ****                 {
1135:.\Generated_Source\PSoC5/Pump_PL.c ****                     /* Add directly to the FIFO. */
1136:.\Generated_Source\PSoC5/Pump_PL.c ****                     Pump_PL_TXDATA_REG = txDataByte;
1137:.\Generated_Source\PSoC5/Pump_PL.c ****                 }
1138:.\Generated_Source\PSoC5/Pump_PL.c ****                 else
1139:.\Generated_Source\PSoC5/Pump_PL.c ****                 {
1140:.\Generated_Source\PSoC5/Pump_PL.c ****                     if(loc_txBufferWrite >= Pump_PL_TXBUFFERSIZE)
1141:.\Generated_Source\PSoC5/Pump_PL.c ****                     {
1142:.\Generated_Source\PSoC5/Pump_PL.c ****                         loc_txBufferWrite = 0u;
1143:.\Generated_Source\PSoC5/Pump_PL.c ****                     }
1144:.\Generated_Source\PSoC5/Pump_PL.c ****                     /* Add to the software buffer. */
1145:.\Generated_Source\PSoC5/Pump_PL.c ****                     Pump_PL_txBuffer[loc_txBufferWrite] = txDataByte;
1146:.\Generated_Source\PSoC5/Pump_PL.c ****                     loc_txBufferWrite++;
1147:.\Generated_Source\PSoC5/Pump_PL.c **** 
1148:.\Generated_Source\PSoC5/Pump_PL.c ****                     /* Finally, update the real output pointer */
1149:.\Generated_Source\PSoC5/Pump_PL.c ****                     #if ((Pump_PL_TXBUFFERSIZE > Pump_PL_MAX_BYTE_VALUE) && (CY_PSOC3))
1150:.\Generated_Source\PSoC5/Pump_PL.c ****                         CyIntDisable(Pump_PL_TX_VECT_NUM);
1151:.\Generated_Source\PSoC5/Pump_PL.c ****                     #endif /* End TXBUFFERSIZE > 255 */
1152:.\Generated_Source\PSoC5/Pump_PL.c ****                     Pump_PL_txBufferWrite = loc_txBufferWrite;
1153:.\Generated_Source\PSoC5/Pump_PL.c ****                     #if ((Pump_PL_TXBUFFERSIZE > Pump_PL_MAX_BYTE_VALUE) && (CY_PSOC3))
1154:.\Generated_Source\PSoC5/Pump_PL.c ****                         CyIntEnable(Pump_PL_TX_VECT_NUM);
1155:.\Generated_Source\PSoC5/Pump_PL.c ****                     #endif /* End TXBUFFERSIZE > 255 */
1156:.\Generated_Source\PSoC5/Pump_PL.c ****                 }
1157:.\Generated_Source\PSoC5/Pump_PL.c **** 
1158:.\Generated_Source\PSoC5/Pump_PL.c ****             #else /* Pump_PL_TXBUFFERSIZE > Pump_PL_FIFO_LENGTH */
1159:.\Generated_Source\PSoC5/Pump_PL.c **** 
1160:.\Generated_Source\PSoC5/Pump_PL.c ****                 while((Pump_PL_TXSTATUS_REG & Pump_PL_TX_STS_FIFO_FULL) != 0u)
 1266              		.loc 1 1160 0
 1267 000a 00BF     		nop
 1268              	.L82:
 1269              		.loc 1 1160 0 is_stmt 0 discriminator 1
 1270 000c 074B     		ldr	r3, .L83
 1271 000e 1B78     		ldrb	r3, [r3]
 1272 0010 DBB2     		uxtb	r3, r3
 1273 0012 03F00403 		and	r3, r3, #4
 1274 0016 002B     		cmp	r3, #0
 1275 0018 F8D1     		bne	.L82
1161:.\Generated_Source\PSoC5/Pump_PL.c ****                 {
1162:.\Generated_Source\PSoC5/Pump_PL.c ****                     ; /* Wait for room in the FIFO. */
1163:.\Generated_Source\PSoC5/Pump_PL.c ****                 }
1164:.\Generated_Source\PSoC5/Pump_PL.c **** 
1165:.\Generated_Source\PSoC5/Pump_PL.c ****                 /* Add directly to the FIFO. */
1166:.\Generated_Source\PSoC5/Pump_PL.c ****                 Pump_PL_TXDATA_REG = txDataByte;
 1276              		.loc 1 1166 0 is_stmt 1
 1277 001a 054A     		ldr	r2, .L83+4
 1278 001c FB79     		ldrb	r3, [r7, #7]
 1279 001e 1370     		strb	r3, [r2]
1167:.\Generated_Source\PSoC5/Pump_PL.c **** 
1168:.\Generated_Source\PSoC5/Pump_PL.c ****             #endif /* End Pump_PL_TXBUFFERSIZE > Pump_PL_FIFO_LENGTH */
1169:.\Generated_Source\PSoC5/Pump_PL.c ****     }
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 44


 1280              		.loc 1 1169 0
 1281 0020 0C37     		adds	r7, r7, #12
 1282              		.cfi_def_cfa_offset 4
 1283 0022 BD46     		mov	sp, r7
 1284              		.cfi_def_cfa_register 13
 1285              		@ sp needed
 1286 0024 5DF8047B 		ldr	r7, [sp], #4
 1287              		.cfi_restore 7
 1288              		.cfi_def_cfa_offset 0
 1289 0028 7047     		bx	lr
 1290              	.L84:
 1291 002a 00BF     		.align	2
 1292              	.L83:
 1293 002c 6C640040 		.word	1073767532
 1294 0030 48650040 		.word	1073767752
 1295              		.cfi_endproc
 1296              	.LFE21:
 1297              		.size	Pump_PL_PutChar, .-Pump_PL_PutChar
 1298              		.section	.text.Pump_PL_PutString,"ax",%progbits
 1299              		.align	2
 1300              		.global	Pump_PL_PutString
 1301              		.thumb
 1302              		.thumb_func
 1303              		.type	Pump_PL_PutString, %function
 1304              	Pump_PL_PutString:
 1305              	.LFB22:
1170:.\Generated_Source\PSoC5/Pump_PL.c **** 
1171:.\Generated_Source\PSoC5/Pump_PL.c **** 
1172:.\Generated_Source\PSoC5/Pump_PL.c ****     /*******************************************************************************
1173:.\Generated_Source\PSoC5/Pump_PL.c ****     * Function Name: Pump_PL_PutString
1174:.\Generated_Source\PSoC5/Pump_PL.c ****     ********************************************************************************
1175:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1176:.\Generated_Source\PSoC5/Pump_PL.c ****     * Summary:
1177:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Write a Sequence of bytes on the Transmit line. Data comes from RAM or ROM.
1178:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1179:.\Generated_Source\PSoC5/Pump_PL.c ****     * Parameters:
1180:.\Generated_Source\PSoC5/Pump_PL.c ****     *  string: char pointer to character string of Data to Send.
1181:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1182:.\Generated_Source\PSoC5/Pump_PL.c ****     * Return:
1183:.\Generated_Source\PSoC5/Pump_PL.c ****     *  None.
1184:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1185:.\Generated_Source\PSoC5/Pump_PL.c ****     * Global Variables:
1186:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_initVar - checked to identify that the component has been
1187:.\Generated_Source\PSoC5/Pump_PL.c ****     *     initialized.
1188:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1189:.\Generated_Source\PSoC5/Pump_PL.c ****     * Reentrant:
1190:.\Generated_Source\PSoC5/Pump_PL.c ****     *  No.
1191:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1192:.\Generated_Source\PSoC5/Pump_PL.c ****     * Theory:
1193:.\Generated_Source\PSoC5/Pump_PL.c ****     *  This function will block if there is not enough memory to place the whole
1194:.\Generated_Source\PSoC5/Pump_PL.c ****     *  string, it will block until the entire string has been written to the
1195:.\Generated_Source\PSoC5/Pump_PL.c ****     *  transmit buffer.
1196:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1197:.\Generated_Source\PSoC5/Pump_PL.c ****     *******************************************************************************/
1198:.\Generated_Source\PSoC5/Pump_PL.c ****     void Pump_PL_PutString(const char8 string[]) 
1199:.\Generated_Source\PSoC5/Pump_PL.c ****     {
 1306              		.loc 1 1199 0
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 45


 1307              		.cfi_startproc
 1308              		@ args = 0, pretend = 0, frame = 16
 1309              		@ frame_needed = 1, uses_anonymous_args = 0
 1310 0000 80B5     		push	{r7, lr}
 1311              		.cfi_def_cfa_offset 8
 1312              		.cfi_offset 7, -8
 1313              		.cfi_offset 14, -4
 1314 0002 84B0     		sub	sp, sp, #16
 1315              		.cfi_def_cfa_offset 24
 1316 0004 00AF     		add	r7, sp, #0
 1317              		.cfi_def_cfa_register 7
 1318 0006 7860     		str	r0, [r7, #4]
1200:.\Generated_Source\PSoC5/Pump_PL.c ****         uint16 buf_index = 0u;
 1319              		.loc 1 1200 0
 1320 0008 0023     		movs	r3, #0
 1321 000a FB81     		strh	r3, [r7, #14]	@ movhi
1201:.\Generated_Source\PSoC5/Pump_PL.c ****         /* If not Initialized then skip this function*/
1202:.\Generated_Source\PSoC5/Pump_PL.c ****         if(Pump_PL_initVar != 0u)
 1322              		.loc 1 1202 0
 1323 000c 0B4B     		ldr	r3, .L89
 1324 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1325 0010 002B     		cmp	r3, #0
 1326 0012 10D0     		beq	.L85
1203:.\Generated_Source\PSoC5/Pump_PL.c ****         {
1204:.\Generated_Source\PSoC5/Pump_PL.c ****             /* This is a blocking function, it will not exit until all data is sent*/
1205:.\Generated_Source\PSoC5/Pump_PL.c ****             while(string[buf_index] != (char8)0)
 1327              		.loc 1 1205 0
 1328 0014 09E0     		b	.L87
 1329              	.L88:
1206:.\Generated_Source\PSoC5/Pump_PL.c ****             {
1207:.\Generated_Source\PSoC5/Pump_PL.c ****                 Pump_PL_PutChar((uint8)string[buf_index]);
 1330              		.loc 1 1207 0
 1331 0016 FB89     		ldrh	r3, [r7, #14]
 1332 0018 7A68     		ldr	r2, [r7, #4]
 1333 001a 1344     		add	r3, r3, r2
 1334 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1335 001e 1846     		mov	r0, r3
 1336 0020 FFF7FEFF 		bl	Pump_PL_PutChar
1208:.\Generated_Source\PSoC5/Pump_PL.c ****                 buf_index++;
 1337              		.loc 1 1208 0
 1338 0024 FB89     		ldrh	r3, [r7, #14]
 1339 0026 0133     		adds	r3, r3, #1
 1340 0028 FB81     		strh	r3, [r7, #14]	@ movhi
 1341              	.L87:
1205:.\Generated_Source\PSoC5/Pump_PL.c ****             {
 1342              		.loc 1 1205 0
 1343 002a FB89     		ldrh	r3, [r7, #14]
 1344 002c 7A68     		ldr	r2, [r7, #4]
 1345 002e 1344     		add	r3, r3, r2
 1346 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1347 0032 002B     		cmp	r3, #0
 1348 0034 EFD1     		bne	.L88
 1349              	.L85:
1209:.\Generated_Source\PSoC5/Pump_PL.c ****             }
1210:.\Generated_Source\PSoC5/Pump_PL.c ****         }
1211:.\Generated_Source\PSoC5/Pump_PL.c ****     }
 1350              		.loc 1 1211 0
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 46


 1351 0036 1037     		adds	r7, r7, #16
 1352              		.cfi_def_cfa_offset 8
 1353 0038 BD46     		mov	sp, r7
 1354              		.cfi_def_cfa_register 13
 1355              		@ sp needed
 1356 003a 80BD     		pop	{r7, pc}
 1357              	.L90:
 1358              		.align	2
 1359              	.L89:
 1360 003c 00000000 		.word	Pump_PL_initVar
 1361              		.cfi_endproc
 1362              	.LFE22:
 1363              		.size	Pump_PL_PutString, .-Pump_PL_PutString
 1364              		.section	.text.Pump_PL_PutArray,"ax",%progbits
 1365              		.align	2
 1366              		.global	Pump_PL_PutArray
 1367              		.thumb
 1368              		.thumb_func
 1369              		.type	Pump_PL_PutArray, %function
 1370              	Pump_PL_PutArray:
 1371              	.LFB23:
1212:.\Generated_Source\PSoC5/Pump_PL.c **** 
1213:.\Generated_Source\PSoC5/Pump_PL.c **** 
1214:.\Generated_Source\PSoC5/Pump_PL.c ****     /*******************************************************************************
1215:.\Generated_Source\PSoC5/Pump_PL.c ****     * Function Name: Pump_PL_PutArray
1216:.\Generated_Source\PSoC5/Pump_PL.c ****     ********************************************************************************
1217:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1218:.\Generated_Source\PSoC5/Pump_PL.c ****     * Summary:
1219:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Write a Sequence of bytes on the Transmit line. Data comes from RAM or ROM.
1220:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1221:.\Generated_Source\PSoC5/Pump_PL.c ****     * Parameters:
1222:.\Generated_Source\PSoC5/Pump_PL.c ****     *  string: Address of the memory array residing in RAM or ROM.
1223:.\Generated_Source\PSoC5/Pump_PL.c ****     *  byteCount: Number of Bytes to be transmitted.
1224:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1225:.\Generated_Source\PSoC5/Pump_PL.c ****     * Return:
1226:.\Generated_Source\PSoC5/Pump_PL.c ****     *  None.
1227:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1228:.\Generated_Source\PSoC5/Pump_PL.c ****     * Global Variables:
1229:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_initVar - checked to identify that the component has been
1230:.\Generated_Source\PSoC5/Pump_PL.c ****     *     initialized.
1231:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1232:.\Generated_Source\PSoC5/Pump_PL.c ****     * Reentrant:
1233:.\Generated_Source\PSoC5/Pump_PL.c ****     *  No.
1234:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1235:.\Generated_Source\PSoC5/Pump_PL.c ****     *******************************************************************************/
1236:.\Generated_Source\PSoC5/Pump_PL.c ****     void Pump_PL_PutArray(const uint8 string[], uint8 byteCount)
1237:.\Generated_Source\PSoC5/Pump_PL.c ****                                                                     
1238:.\Generated_Source\PSoC5/Pump_PL.c ****     {
 1372              		.loc 1 1238 0
 1373              		.cfi_startproc
 1374              		@ args = 0, pretend = 0, frame = 16
 1375              		@ frame_needed = 1, uses_anonymous_args = 0
 1376 0000 80B5     		push	{r7, lr}
 1377              		.cfi_def_cfa_offset 8
 1378              		.cfi_offset 7, -8
 1379              		.cfi_offset 14, -4
 1380 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 47


 1381              		.cfi_def_cfa_offset 24
 1382 0004 00AF     		add	r7, sp, #0
 1383              		.cfi_def_cfa_register 7
 1384 0006 7860     		str	r0, [r7, #4]
 1385 0008 0B46     		mov	r3, r1
 1386 000a FB70     		strb	r3, [r7, #3]
1239:.\Generated_Source\PSoC5/Pump_PL.c ****         uint8 buf_index = 0u;
 1387              		.loc 1 1239 0
 1388 000c 0023     		movs	r3, #0
 1389 000e FB73     		strb	r3, [r7, #15]
1240:.\Generated_Source\PSoC5/Pump_PL.c ****         /* If not Initialized then skip this function*/
1241:.\Generated_Source\PSoC5/Pump_PL.c ****         if(Pump_PL_initVar != 0u)
 1390              		.loc 1 1241 0
 1391 0010 0A4B     		ldr	r3, .L94
 1392 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1393 0014 002B     		cmp	r3, #0
 1394 0016 0DD0     		beq	.L91
 1395              	.L93:
1242:.\Generated_Source\PSoC5/Pump_PL.c ****         {
1243:.\Generated_Source\PSoC5/Pump_PL.c ****             do
1244:.\Generated_Source\PSoC5/Pump_PL.c ****             {
1245:.\Generated_Source\PSoC5/Pump_PL.c ****                 Pump_PL_PutChar(string[buf_index]);
 1396              		.loc 1 1245 0 discriminator 1
 1397 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1398 001a 7A68     		ldr	r2, [r7, #4]
 1399 001c 1344     		add	r3, r3, r2
 1400 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1401 0020 1846     		mov	r0, r3
 1402 0022 FFF7FEFF 		bl	Pump_PL_PutChar
1246:.\Generated_Source\PSoC5/Pump_PL.c ****                 buf_index++;
 1403              		.loc 1 1246 0 discriminator 1
 1404 0026 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1405 0028 0133     		adds	r3, r3, #1
 1406 002a FB73     		strb	r3, [r7, #15]
1247:.\Generated_Source\PSoC5/Pump_PL.c ****             }while(buf_index < byteCount);
 1407              		.loc 1 1247 0 discriminator 1
 1408 002c FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1409 002e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1410 0030 9A42     		cmp	r2, r3
 1411 0032 F1D3     		bcc	.L93
 1412              	.L91:
1248:.\Generated_Source\PSoC5/Pump_PL.c ****         }
1249:.\Generated_Source\PSoC5/Pump_PL.c ****     }
 1413              		.loc 1 1249 0
 1414 0034 1037     		adds	r7, r7, #16
 1415              		.cfi_def_cfa_offset 8
 1416 0036 BD46     		mov	sp, r7
 1417              		.cfi_def_cfa_register 13
 1418              		@ sp needed
 1419 0038 80BD     		pop	{r7, pc}
 1420              	.L95:
 1421 003a 00BF     		.align	2
 1422              	.L94:
 1423 003c 00000000 		.word	Pump_PL_initVar
 1424              		.cfi_endproc
 1425              	.LFE23:
 1426              		.size	Pump_PL_PutArray, .-Pump_PL_PutArray
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 48


 1427              		.section	.text.Pump_PL_PutCRLF,"ax",%progbits
 1428              		.align	2
 1429              		.global	Pump_PL_PutCRLF
 1430              		.thumb
 1431              		.thumb_func
 1432              		.type	Pump_PL_PutCRLF, %function
 1433              	Pump_PL_PutCRLF:
 1434              	.LFB24:
1250:.\Generated_Source\PSoC5/Pump_PL.c **** 
1251:.\Generated_Source\PSoC5/Pump_PL.c **** 
1252:.\Generated_Source\PSoC5/Pump_PL.c ****     /*******************************************************************************
1253:.\Generated_Source\PSoC5/Pump_PL.c ****     * Function Name: Pump_PL_PutCRLF
1254:.\Generated_Source\PSoC5/Pump_PL.c ****     ********************************************************************************
1255:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1256:.\Generated_Source\PSoC5/Pump_PL.c ****     * Summary:
1257:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Write a character and then carriage return and line feed.
1258:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1259:.\Generated_Source\PSoC5/Pump_PL.c ****     * Parameters:
1260:.\Generated_Source\PSoC5/Pump_PL.c ****     *  txDataByte: uint8 Character to send.
1261:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1262:.\Generated_Source\PSoC5/Pump_PL.c ****     * Return:
1263:.\Generated_Source\PSoC5/Pump_PL.c ****     *  None.
1264:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1265:.\Generated_Source\PSoC5/Pump_PL.c ****     * Global Variables:
1266:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_initVar - checked to identify that the component has been
1267:.\Generated_Source\PSoC5/Pump_PL.c ****     *     initialized.
1268:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1269:.\Generated_Source\PSoC5/Pump_PL.c ****     * Reentrant:
1270:.\Generated_Source\PSoC5/Pump_PL.c ****     *  No.
1271:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1272:.\Generated_Source\PSoC5/Pump_PL.c ****     *******************************************************************************/
1273:.\Generated_Source\PSoC5/Pump_PL.c ****     void Pump_PL_PutCRLF(uint8 txDataByte) 
1274:.\Generated_Source\PSoC5/Pump_PL.c ****     {
 1435              		.loc 1 1274 0
 1436              		.cfi_startproc
 1437              		@ args = 0, pretend = 0, frame = 8
 1438              		@ frame_needed = 1, uses_anonymous_args = 0
 1439 0000 80B5     		push	{r7, lr}
 1440              		.cfi_def_cfa_offset 8
 1441              		.cfi_offset 7, -8
 1442              		.cfi_offset 14, -4
 1443 0002 82B0     		sub	sp, sp, #8
 1444              		.cfi_def_cfa_offset 16
 1445 0004 00AF     		add	r7, sp, #0
 1446              		.cfi_def_cfa_register 7
 1447 0006 0346     		mov	r3, r0
 1448 0008 FB71     		strb	r3, [r7, #7]
1275:.\Generated_Source\PSoC5/Pump_PL.c ****         /* If not Initialized then skip this function*/
1276:.\Generated_Source\PSoC5/Pump_PL.c ****         if(Pump_PL_initVar != 0u)
 1449              		.loc 1 1276 0
 1450 000a 084B     		ldr	r3, .L98
 1451 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1452 000e 002B     		cmp	r3, #0
 1453 0010 09D0     		beq	.L96
1277:.\Generated_Source\PSoC5/Pump_PL.c ****         {
1278:.\Generated_Source\PSoC5/Pump_PL.c ****             Pump_PL_PutChar(txDataByte);
 1454              		.loc 1 1278 0
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 49


 1455 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1456 0014 1846     		mov	r0, r3
 1457 0016 FFF7FEFF 		bl	Pump_PL_PutChar
1279:.\Generated_Source\PSoC5/Pump_PL.c ****             Pump_PL_PutChar(0x0Du);
 1458              		.loc 1 1279 0
 1459 001a 0D20     		movs	r0, #13
 1460 001c FFF7FEFF 		bl	Pump_PL_PutChar
1280:.\Generated_Source\PSoC5/Pump_PL.c ****             Pump_PL_PutChar(0x0Au);
 1461              		.loc 1 1280 0
 1462 0020 0A20     		movs	r0, #10
 1463 0022 FFF7FEFF 		bl	Pump_PL_PutChar
 1464              	.L96:
1281:.\Generated_Source\PSoC5/Pump_PL.c ****         }
1282:.\Generated_Source\PSoC5/Pump_PL.c ****     }
 1465              		.loc 1 1282 0
 1466 0026 0837     		adds	r7, r7, #8
 1467              		.cfi_def_cfa_offset 8
 1468 0028 BD46     		mov	sp, r7
 1469              		.cfi_def_cfa_register 13
 1470              		@ sp needed
 1471 002a 80BD     		pop	{r7, pc}
 1472              	.L99:
 1473              		.align	2
 1474              	.L98:
 1475 002c 00000000 		.word	Pump_PL_initVar
 1476              		.cfi_endproc
 1477              	.LFE24:
 1478              		.size	Pump_PL_PutCRLF, .-Pump_PL_PutCRLF
 1479              		.section	.text.Pump_PL_GetTxBufferSize,"ax",%progbits
 1480              		.align	2
 1481              		.global	Pump_PL_GetTxBufferSize
 1482              		.thumb
 1483              		.thumb_func
 1484              		.type	Pump_PL_GetTxBufferSize, %function
 1485              	Pump_PL_GetTxBufferSize:
 1486              	.LFB25:
1283:.\Generated_Source\PSoC5/Pump_PL.c **** 
1284:.\Generated_Source\PSoC5/Pump_PL.c **** 
1285:.\Generated_Source\PSoC5/Pump_PL.c ****     /*******************************************************************************
1286:.\Generated_Source\PSoC5/Pump_PL.c ****     * Function Name: Pump_PL_GetTxBufferSize
1287:.\Generated_Source\PSoC5/Pump_PL.c ****     ********************************************************************************
1288:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1289:.\Generated_Source\PSoC5/Pump_PL.c ****     * Summary:
1290:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Determine the amount of space left in the TX buffer and return the count in
1291:.\Generated_Source\PSoC5/Pump_PL.c ****     *  bytes
1292:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1293:.\Generated_Source\PSoC5/Pump_PL.c ****     * Parameters:
1294:.\Generated_Source\PSoC5/Pump_PL.c ****     *  None.
1295:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1296:.\Generated_Source\PSoC5/Pump_PL.c ****     * Return:
1297:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Integer count of the number of bytes left in the TX buffer
1298:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1299:.\Generated_Source\PSoC5/Pump_PL.c ****     * Global Variables:
1300:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_txBufferWrite - used to calculate left space.
1301:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_txBufferRead - used to calculate left space.
1302:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1303:.\Generated_Source\PSoC5/Pump_PL.c ****     * Reentrant:
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 50


1304:.\Generated_Source\PSoC5/Pump_PL.c ****     *  No.
1305:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1306:.\Generated_Source\PSoC5/Pump_PL.c ****     * Theory:
1307:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Allows the user to find out how full the TX Buffer is.
1308:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1309:.\Generated_Source\PSoC5/Pump_PL.c ****     *******************************************************************************/
1310:.\Generated_Source\PSoC5/Pump_PL.c ****     uint8 Pump_PL_GetTxBufferSize(void)
1311:.\Generated_Source\PSoC5/Pump_PL.c ****                                                             
1312:.\Generated_Source\PSoC5/Pump_PL.c ****     {
 1487              		.loc 1 1312 0
 1488              		.cfi_startproc
 1489              		@ args = 0, pretend = 0, frame = 8
 1490              		@ frame_needed = 1, uses_anonymous_args = 0
 1491              		@ link register save eliminated.
 1492 0000 80B4     		push	{r7}
 1493              		.cfi_def_cfa_offset 4
 1494              		.cfi_offset 7, -4
 1495 0002 83B0     		sub	sp, sp, #12
 1496              		.cfi_def_cfa_offset 16
 1497 0004 00AF     		add	r7, sp, #0
 1498              		.cfi_def_cfa_register 7
1313:.\Generated_Source\PSoC5/Pump_PL.c ****         uint8 size;
1314:.\Generated_Source\PSoC5/Pump_PL.c **** 
1315:.\Generated_Source\PSoC5/Pump_PL.c ****         #if(Pump_PL_TXBUFFERSIZE > Pump_PL_FIFO_LENGTH)
1316:.\Generated_Source\PSoC5/Pump_PL.c **** 
1317:.\Generated_Source\PSoC5/Pump_PL.c ****             /* Disable Tx interrupt. */
1318:.\Generated_Source\PSoC5/Pump_PL.c ****             /* Protect variables that could change on interrupt. */
1319:.\Generated_Source\PSoC5/Pump_PL.c ****             #if(Pump_PL_TX_INTERRUPT_ENABLED)
1320:.\Generated_Source\PSoC5/Pump_PL.c ****                 Pump_PL_DisableTxInt();
1321:.\Generated_Source\PSoC5/Pump_PL.c ****             #endif /* End Pump_PL_TX_INTERRUPT_ENABLED */
1322:.\Generated_Source\PSoC5/Pump_PL.c **** 
1323:.\Generated_Source\PSoC5/Pump_PL.c ****             if(Pump_PL_txBufferRead == Pump_PL_txBufferWrite)
1324:.\Generated_Source\PSoC5/Pump_PL.c ****             {
1325:.\Generated_Source\PSoC5/Pump_PL.c ****                 size = 0u;
1326:.\Generated_Source\PSoC5/Pump_PL.c ****             }
1327:.\Generated_Source\PSoC5/Pump_PL.c ****             else if(Pump_PL_txBufferRead < Pump_PL_txBufferWrite)
1328:.\Generated_Source\PSoC5/Pump_PL.c ****             {
1329:.\Generated_Source\PSoC5/Pump_PL.c ****                 size = (Pump_PL_txBufferWrite - Pump_PL_txBufferRead);
1330:.\Generated_Source\PSoC5/Pump_PL.c ****             }
1331:.\Generated_Source\PSoC5/Pump_PL.c ****             else
1332:.\Generated_Source\PSoC5/Pump_PL.c ****             {
1333:.\Generated_Source\PSoC5/Pump_PL.c ****                 size = (Pump_PL_TXBUFFERSIZE - Pump_PL_txBufferRead) + Pump_PL_txBufferWrite;
1334:.\Generated_Source\PSoC5/Pump_PL.c ****             }
1335:.\Generated_Source\PSoC5/Pump_PL.c **** 
1336:.\Generated_Source\PSoC5/Pump_PL.c ****             /* Enable Tx interrupt. */
1337:.\Generated_Source\PSoC5/Pump_PL.c ****             #if(Pump_PL_TX_INTERRUPT_ENABLED)
1338:.\Generated_Source\PSoC5/Pump_PL.c ****                 Pump_PL_EnableTxInt();
1339:.\Generated_Source\PSoC5/Pump_PL.c ****             #endif /* End Pump_PL_TX_INTERRUPT_ENABLED */
1340:.\Generated_Source\PSoC5/Pump_PL.c **** 
1341:.\Generated_Source\PSoC5/Pump_PL.c ****         #else /* Pump_PL_TXBUFFERSIZE > Pump_PL_FIFO_LENGTH */
1342:.\Generated_Source\PSoC5/Pump_PL.c **** 
1343:.\Generated_Source\PSoC5/Pump_PL.c ****             size = Pump_PL_TXSTATUS_REG;
 1499              		.loc 1 1343 0
 1500 0006 0E4B     		ldr	r3, .L105
 1501 0008 1B78     		ldrb	r3, [r3]
 1502 000a FB71     		strb	r3, [r7, #7]
1344:.\Generated_Source\PSoC5/Pump_PL.c **** 
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 51


1345:.\Generated_Source\PSoC5/Pump_PL.c ****             /* Is the fifo is full. */
1346:.\Generated_Source\PSoC5/Pump_PL.c ****             if((size & Pump_PL_TX_STS_FIFO_FULL) != 0u)
 1503              		.loc 1 1346 0
 1504 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1505 000e 03F00403 		and	r3, r3, #4
 1506 0012 002B     		cmp	r3, #0
 1507 0014 02D0     		beq	.L101
1347:.\Generated_Source\PSoC5/Pump_PL.c ****             {
1348:.\Generated_Source\PSoC5/Pump_PL.c ****                 size = Pump_PL_FIFO_LENGTH;
 1508              		.loc 1 1348 0
 1509 0016 0423     		movs	r3, #4
 1510 0018 FB71     		strb	r3, [r7, #7]
 1511 001a 09E0     		b	.L102
 1512              	.L101:
1349:.\Generated_Source\PSoC5/Pump_PL.c ****             }
1350:.\Generated_Source\PSoC5/Pump_PL.c ****             else if((size & Pump_PL_TX_STS_FIFO_EMPTY) != 0u)
 1513              		.loc 1 1350 0
 1514 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1515 001e 03F00203 		and	r3, r3, #2
 1516 0022 002B     		cmp	r3, #0
 1517 0024 02D0     		beq	.L103
1351:.\Generated_Source\PSoC5/Pump_PL.c ****             {
1352:.\Generated_Source\PSoC5/Pump_PL.c ****                 size = 0u;
 1518              		.loc 1 1352 0
 1519 0026 0023     		movs	r3, #0
 1520 0028 FB71     		strb	r3, [r7, #7]
 1521 002a 01E0     		b	.L102
 1522              	.L103:
1353:.\Generated_Source\PSoC5/Pump_PL.c ****             }
1354:.\Generated_Source\PSoC5/Pump_PL.c ****             else
1355:.\Generated_Source\PSoC5/Pump_PL.c ****             {
1356:.\Generated_Source\PSoC5/Pump_PL.c ****                 /* We only know there is data in the fifo. */
1357:.\Generated_Source\PSoC5/Pump_PL.c ****                 size = 1u;
 1523              		.loc 1 1357 0
 1524 002c 0123     		movs	r3, #1
 1525 002e FB71     		strb	r3, [r7, #7]
 1526              	.L102:
1358:.\Generated_Source\PSoC5/Pump_PL.c ****             }
1359:.\Generated_Source\PSoC5/Pump_PL.c **** 
1360:.\Generated_Source\PSoC5/Pump_PL.c ****         #endif /* End Pump_PL_TXBUFFERSIZE > Pump_PL_FIFO_LENGTH */
1361:.\Generated_Source\PSoC5/Pump_PL.c **** 
1362:.\Generated_Source\PSoC5/Pump_PL.c ****         return(size);
 1527              		.loc 1 1362 0
 1528 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1363:.\Generated_Source\PSoC5/Pump_PL.c ****     }
 1529              		.loc 1 1363 0
 1530 0032 1846     		mov	r0, r3
 1531 0034 0C37     		adds	r7, r7, #12
 1532              		.cfi_def_cfa_offset 4
 1533 0036 BD46     		mov	sp, r7
 1534              		.cfi_def_cfa_register 13
 1535              		@ sp needed
 1536 0038 5DF8047B 		ldr	r7, [sp], #4
 1537              		.cfi_restore 7
 1538              		.cfi_def_cfa_offset 0
 1539 003c 7047     		bx	lr
 1540              	.L106:
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 52


 1541 003e 00BF     		.align	2
 1542              	.L105:
 1543 0040 6C640040 		.word	1073767532
 1544              		.cfi_endproc
 1545              	.LFE25:
 1546              		.size	Pump_PL_GetTxBufferSize, .-Pump_PL_GetTxBufferSize
 1547              		.section	.text.Pump_PL_ClearTxBuffer,"ax",%progbits
 1548              		.align	2
 1549              		.global	Pump_PL_ClearTxBuffer
 1550              		.thumb
 1551              		.thumb_func
 1552              		.type	Pump_PL_ClearTxBuffer, %function
 1553              	Pump_PL_ClearTxBuffer:
 1554              	.LFB26:
1364:.\Generated_Source\PSoC5/Pump_PL.c **** 
1365:.\Generated_Source\PSoC5/Pump_PL.c **** 
1366:.\Generated_Source\PSoC5/Pump_PL.c ****     /*******************************************************************************
1367:.\Generated_Source\PSoC5/Pump_PL.c ****     * Function Name: Pump_PL_ClearTxBuffer
1368:.\Generated_Source\PSoC5/Pump_PL.c ****     ********************************************************************************
1369:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1370:.\Generated_Source\PSoC5/Pump_PL.c ****     * Summary:
1371:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Clears the TX RAM buffer by setting the read and write pointers both to zero.
1372:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Clears the hardware TX FIFO.  Any data present in the FIFO will not be sent.
1373:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1374:.\Generated_Source\PSoC5/Pump_PL.c ****     * Parameters:
1375:.\Generated_Source\PSoC5/Pump_PL.c ****     *  None.
1376:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1377:.\Generated_Source\PSoC5/Pump_PL.c ****     * Return:
1378:.\Generated_Source\PSoC5/Pump_PL.c ****     *  None.
1379:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1380:.\Generated_Source\PSoC5/Pump_PL.c ****     * Global Variables:
1381:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_txBufferWrite - cleared to zero.
1382:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_txBufferRead - cleared to zero.
1383:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1384:.\Generated_Source\PSoC5/Pump_PL.c ****     * Reentrant:
1385:.\Generated_Source\PSoC5/Pump_PL.c ****     *  No.
1386:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1387:.\Generated_Source\PSoC5/Pump_PL.c ****     * Theory:
1388:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Setting the pointers to zero makes the system believe there is no data to
1389:.\Generated_Source\PSoC5/Pump_PL.c ****     *  read and writing will resume at address 0 overwriting any data that may have
1390:.\Generated_Source\PSoC5/Pump_PL.c ****     *  remained in the RAM.
1391:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1392:.\Generated_Source\PSoC5/Pump_PL.c ****     * Side Effects:
1393:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Any received data not read from the RAM buffer will be lost when overwritten.
1394:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1395:.\Generated_Source\PSoC5/Pump_PL.c ****     *******************************************************************************/
1396:.\Generated_Source\PSoC5/Pump_PL.c ****     void Pump_PL_ClearTxBuffer(void) 
1397:.\Generated_Source\PSoC5/Pump_PL.c ****     {
 1555              		.loc 1 1397 0
 1556              		.cfi_startproc
 1557              		@ args = 0, pretend = 0, frame = 8
 1558              		@ frame_needed = 1, uses_anonymous_args = 0
 1559 0000 80B5     		push	{r7, lr}
 1560              		.cfi_def_cfa_offset 8
 1561              		.cfi_offset 7, -8
 1562              		.cfi_offset 14, -4
 1563 0002 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 53


 1564              		.cfi_def_cfa_offset 16
 1565 0004 00AF     		add	r7, sp, #0
 1566              		.cfi_def_cfa_register 7
1398:.\Generated_Source\PSoC5/Pump_PL.c ****         uint8 enableInterrupts;
1399:.\Generated_Source\PSoC5/Pump_PL.c **** 
1400:.\Generated_Source\PSoC5/Pump_PL.c ****         /* Enter critical section */
1401:.\Generated_Source\PSoC5/Pump_PL.c ****         enableInterrupts = CyEnterCriticalSection();
 1567              		.loc 1 1401 0
 1568 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 1569 000a 0346     		mov	r3, r0
 1570 000c FB71     		strb	r3, [r7, #7]
1402:.\Generated_Source\PSoC5/Pump_PL.c ****         /* clear the HW FIFO */
1403:.\Generated_Source\PSoC5/Pump_PL.c ****         Pump_PL_TXDATA_AUX_CTL_REG |=  Pump_PL_TX_FIFO_CLR;
 1571              		.loc 1 1403 0
 1572 000e 0B4A     		ldr	r2, .L108
 1573 0010 0A4B     		ldr	r3, .L108
 1574 0012 1B78     		ldrb	r3, [r3]
 1575 0014 DBB2     		uxtb	r3, r3
 1576 0016 43F00103 		orr	r3, r3, #1
 1577 001a DBB2     		uxtb	r3, r3
 1578 001c 1370     		strb	r3, [r2]
1404:.\Generated_Source\PSoC5/Pump_PL.c ****         Pump_PL_TXDATA_AUX_CTL_REG &= (uint8)~Pump_PL_TX_FIFO_CLR;
 1579              		.loc 1 1404 0
 1580 001e 074A     		ldr	r2, .L108
 1581 0020 064B     		ldr	r3, .L108
 1582 0022 1B78     		ldrb	r3, [r3]
 1583 0024 DBB2     		uxtb	r3, r3
 1584 0026 23F00103 		bic	r3, r3, #1
 1585 002a DBB2     		uxtb	r3, r3
 1586 002c 1370     		strb	r3, [r2]
1405:.\Generated_Source\PSoC5/Pump_PL.c ****         /* Exit critical section */
1406:.\Generated_Source\PSoC5/Pump_PL.c ****         CyExitCriticalSection(enableInterrupts);
 1587              		.loc 1 1406 0
 1588 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1589 0030 1846     		mov	r0, r3
 1590 0032 FFF7FEFF 		bl	CyExitCriticalSection
1407:.\Generated_Source\PSoC5/Pump_PL.c **** 
1408:.\Generated_Source\PSoC5/Pump_PL.c ****         #if(Pump_PL_TXBUFFERSIZE > Pump_PL_FIFO_LENGTH)
1409:.\Generated_Source\PSoC5/Pump_PL.c **** 
1410:.\Generated_Source\PSoC5/Pump_PL.c ****             /* Disable Tx interrupt. */
1411:.\Generated_Source\PSoC5/Pump_PL.c ****             /* Protect variables that could change on interrupt. */
1412:.\Generated_Source\PSoC5/Pump_PL.c ****             #if(Pump_PL_TX_INTERRUPT_ENABLED)
1413:.\Generated_Source\PSoC5/Pump_PL.c ****                 Pump_PL_DisableTxInt();
1414:.\Generated_Source\PSoC5/Pump_PL.c ****             #endif /* End Pump_PL_TX_INTERRUPT_ENABLED */
1415:.\Generated_Source\PSoC5/Pump_PL.c **** 
1416:.\Generated_Source\PSoC5/Pump_PL.c ****             Pump_PL_txBufferRead = 0u;
1417:.\Generated_Source\PSoC5/Pump_PL.c ****             Pump_PL_txBufferWrite = 0u;
1418:.\Generated_Source\PSoC5/Pump_PL.c **** 
1419:.\Generated_Source\PSoC5/Pump_PL.c ****             /* Enable Tx interrupt. */
1420:.\Generated_Source\PSoC5/Pump_PL.c ****             #if(Pump_PL_TX_INTERRUPT_ENABLED)
1421:.\Generated_Source\PSoC5/Pump_PL.c ****                 Pump_PL_EnableTxInt();
1422:.\Generated_Source\PSoC5/Pump_PL.c ****             #endif /* End Pump_PL_TX_INTERRUPT_ENABLED */
1423:.\Generated_Source\PSoC5/Pump_PL.c **** 
1424:.\Generated_Source\PSoC5/Pump_PL.c ****         #endif /* End Pump_PL_TXBUFFERSIZE > Pump_PL_FIFO_LENGTH */
1425:.\Generated_Source\PSoC5/Pump_PL.c ****     }
 1591              		.loc 1 1425 0
 1592 0036 0837     		adds	r7, r7, #8
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 54


 1593              		.cfi_def_cfa_offset 8
 1594 0038 BD46     		mov	sp, r7
 1595              		.cfi_def_cfa_register 13
 1596              		@ sp needed
 1597 003a 80BD     		pop	{r7, pc}
 1598              	.L109:
 1599              		.align	2
 1600              	.L108:
 1601 003c 98650040 		.word	1073767832
 1602              		.cfi_endproc
 1603              	.LFE26:
 1604              		.size	Pump_PL_ClearTxBuffer, .-Pump_PL_ClearTxBuffer
 1605              		.section	.text.Pump_PL_SendBreak,"ax",%progbits
 1606              		.align	2
 1607              		.global	Pump_PL_SendBreak
 1608              		.thumb
 1609              		.thumb_func
 1610              		.type	Pump_PL_SendBreak, %function
 1611              	Pump_PL_SendBreak:
 1612              	.LFB27:
1426:.\Generated_Source\PSoC5/Pump_PL.c **** 
1427:.\Generated_Source\PSoC5/Pump_PL.c **** 
1428:.\Generated_Source\PSoC5/Pump_PL.c ****     /*******************************************************************************
1429:.\Generated_Source\PSoC5/Pump_PL.c ****     * Function Name: Pump_PL_SendBreak
1430:.\Generated_Source\PSoC5/Pump_PL.c ****     ********************************************************************************
1431:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1432:.\Generated_Source\PSoC5/Pump_PL.c ****     * Summary:
1433:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Write a Break command to the UART
1434:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1435:.\Generated_Source\PSoC5/Pump_PL.c ****     * Parameters:
1436:.\Generated_Source\PSoC5/Pump_PL.c ****     *  uint8 retMode:  Wait mode,
1437:.\Generated_Source\PSoC5/Pump_PL.c ****     *   0 - Initialize registers for Break, sends the Break signal and return
1438:.\Generated_Source\PSoC5/Pump_PL.c ****     *       imediately.
1439:.\Generated_Source\PSoC5/Pump_PL.c ****     *   1 - Wait until Break sending is complete, reinitialize registers to normal
1440:.\Generated_Source\PSoC5/Pump_PL.c ****     *       transmission mode then return.
1441:.\Generated_Source\PSoC5/Pump_PL.c ****     *   2 - Reinitialize registers to normal transmission mode then return.
1442:.\Generated_Source\PSoC5/Pump_PL.c ****     *   3 - both steps: 0 and 1
1443:.\Generated_Source\PSoC5/Pump_PL.c ****     *       init registers for Break, send Break signal
1444:.\Generated_Source\PSoC5/Pump_PL.c ****     *       wait until Break sending is complete, reinit registers to normal
1445:.\Generated_Source\PSoC5/Pump_PL.c ****     *       transmission mode then return.
1446:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1447:.\Generated_Source\PSoC5/Pump_PL.c ****     * Return:
1448:.\Generated_Source\PSoC5/Pump_PL.c ****     *  None.
1449:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1450:.\Generated_Source\PSoC5/Pump_PL.c ****     * Global Variables:
1451:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Pump_PL_initVar - checked to identify that the component has been
1452:.\Generated_Source\PSoC5/Pump_PL.c ****     *     initialized.
1453:.\Generated_Source\PSoC5/Pump_PL.c ****     *  tx_period - static variable, used for keeping TX period configuration.
1454:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1455:.\Generated_Source\PSoC5/Pump_PL.c ****     * Reentrant:
1456:.\Generated_Source\PSoC5/Pump_PL.c ****     *  No.
1457:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1458:.\Generated_Source\PSoC5/Pump_PL.c ****     * Theory:
1459:.\Generated_Source\PSoC5/Pump_PL.c ****     *  SendBreak function initializes registers to send 13-bit break signal. It is
1460:.\Generated_Source\PSoC5/Pump_PL.c ****     *  important to return the registers configuration to normal for continue 8-bit
1461:.\Generated_Source\PSoC5/Pump_PL.c ****     *  operation.
1462:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Trere are 3 variants for this API usage:
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 55


1463:.\Generated_Source\PSoC5/Pump_PL.c ****     *  1) SendBreak(3) - function will send the Break signal and take care on the
1464:.\Generated_Source\PSoC5/Pump_PL.c ****     *     configuration returning. Funcition will block CPU untill transmition
1465:.\Generated_Source\PSoC5/Pump_PL.c ****     *     complete.
1466:.\Generated_Source\PSoC5/Pump_PL.c ****     *  2) User may want to use bloking time if UART configured to the low speed
1467:.\Generated_Source\PSoC5/Pump_PL.c ****     *     operation
1468:.\Generated_Source\PSoC5/Pump_PL.c ****     *     Emample for this case:
1469:.\Generated_Source\PSoC5/Pump_PL.c ****     *     SendBreak(0);     - init Break signal transmition
1470:.\Generated_Source\PSoC5/Pump_PL.c ****     *         Add your code here to use CPU time
1471:.\Generated_Source\PSoC5/Pump_PL.c ****     *     SendBreak(1);     - complete Break operation
1472:.\Generated_Source\PSoC5/Pump_PL.c ****     *  3) Same to 2) but user may want to init and use the interrupt for complete
1473:.\Generated_Source\PSoC5/Pump_PL.c ****     *     break operation.
1474:.\Generated_Source\PSoC5/Pump_PL.c ****     *     Example for this case:
1475:.\Generated_Source\PSoC5/Pump_PL.c ****     *     Init TX interrupt whith "TX - On TX Complete" parameter
1476:.\Generated_Source\PSoC5/Pump_PL.c ****     *     SendBreak(0);     - init Break signal transmition
1477:.\Generated_Source\PSoC5/Pump_PL.c ****     *         Add your code here to use CPU time
1478:.\Generated_Source\PSoC5/Pump_PL.c ****     *     When interrupt appear with UART_TX_STS_COMPLETE status:
1479:.\Generated_Source\PSoC5/Pump_PL.c ****     *     SendBreak(2);     - complete Break operation
1480:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1481:.\Generated_Source\PSoC5/Pump_PL.c ****     * Side Effects:
1482:.\Generated_Source\PSoC5/Pump_PL.c ****     *   Uses static variable to keep registers configuration.
1483:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1484:.\Generated_Source\PSoC5/Pump_PL.c ****     *******************************************************************************/
1485:.\Generated_Source\PSoC5/Pump_PL.c ****     void Pump_PL_SendBreak(uint8 retMode) 
1486:.\Generated_Source\PSoC5/Pump_PL.c ****     {
 1613              		.loc 1 1486 0
 1614              		.cfi_startproc
 1615              		@ args = 0, pretend = 0, frame = 16
 1616              		@ frame_needed = 1, uses_anonymous_args = 0
 1617              		@ link register save eliminated.
 1618 0000 80B4     		push	{r7}
 1619              		.cfi_def_cfa_offset 4
 1620              		.cfi_offset 7, -4
 1621 0002 85B0     		sub	sp, sp, #20
 1622              		.cfi_def_cfa_offset 24
 1623 0004 00AF     		add	r7, sp, #0
 1624              		.cfi_def_cfa_register 7
 1625 0006 0346     		mov	r3, r0
 1626 0008 FB71     		strb	r3, [r7, #7]
1487:.\Generated_Source\PSoC5/Pump_PL.c **** 
1488:.\Generated_Source\PSoC5/Pump_PL.c ****         /* If not Initialized then skip this function*/
1489:.\Generated_Source\PSoC5/Pump_PL.c ****         if(Pump_PL_initVar != 0u)
 1627              		.loc 1 1489 0
 1628 000a 1F4B     		ldr	r3, .L118
 1629 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1630 000e 002B     		cmp	r3, #0
 1631 0010 35D0     		beq	.L110
 1632              	.LBB2:
1490:.\Generated_Source\PSoC5/Pump_PL.c ****         {
1491:.\Generated_Source\PSoC5/Pump_PL.c ****             /*Set the Counter to 13-bits and transmit a 00 byte*/
1492:.\Generated_Source\PSoC5/Pump_PL.c ****             /*When that is done then reset the counter value back*/
1493:.\Generated_Source\PSoC5/Pump_PL.c ****             uint8 tmpStat;
1494:.\Generated_Source\PSoC5/Pump_PL.c **** 
1495:.\Generated_Source\PSoC5/Pump_PL.c ****             #if(Pump_PL_HD_ENABLED) /* Half Duplex mode*/
1496:.\Generated_Source\PSoC5/Pump_PL.c **** 
1497:.\Generated_Source\PSoC5/Pump_PL.c ****                 if( (retMode == Pump_PL_SEND_BREAK) ||
1498:.\Generated_Source\PSoC5/Pump_PL.c ****                     (retMode == Pump_PL_SEND_WAIT_REINIT ) )
1499:.\Generated_Source\PSoC5/Pump_PL.c ****                 {
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 56


1500:.\Generated_Source\PSoC5/Pump_PL.c ****                     /* CTRL_HD_SEND_BREAK - sends break bits in HD mode*/
1501:.\Generated_Source\PSoC5/Pump_PL.c ****                     Pump_PL_WriteControlRegister(Pump_PL_ReadControlRegister() |
1502:.\Generated_Source\PSoC5/Pump_PL.c ****                                                           Pump_PL_CTRL_HD_SEND_BREAK);
1503:.\Generated_Source\PSoC5/Pump_PL.c ****                     /* Send zeros*/
1504:.\Generated_Source\PSoC5/Pump_PL.c ****                     Pump_PL_TXDATA_REG = 0u;
1505:.\Generated_Source\PSoC5/Pump_PL.c **** 
1506:.\Generated_Source\PSoC5/Pump_PL.c ****                     do /*wait until transmit starts*/
1507:.\Generated_Source\PSoC5/Pump_PL.c ****                     {
1508:.\Generated_Source\PSoC5/Pump_PL.c ****                         tmpStat = Pump_PL_TXSTATUS_REG;
1509:.\Generated_Source\PSoC5/Pump_PL.c ****                     }while((tmpStat & Pump_PL_TX_STS_FIFO_EMPTY) != 0u);
1510:.\Generated_Source\PSoC5/Pump_PL.c ****                 }
1511:.\Generated_Source\PSoC5/Pump_PL.c **** 
1512:.\Generated_Source\PSoC5/Pump_PL.c ****                 if( (retMode == Pump_PL_WAIT_FOR_COMPLETE_REINIT) ||
1513:.\Generated_Source\PSoC5/Pump_PL.c ****                     (retMode == Pump_PL_SEND_WAIT_REINIT) )
1514:.\Generated_Source\PSoC5/Pump_PL.c ****                 {
1515:.\Generated_Source\PSoC5/Pump_PL.c ****                     do /*wait until transmit complete*/
1516:.\Generated_Source\PSoC5/Pump_PL.c ****                     {
1517:.\Generated_Source\PSoC5/Pump_PL.c ****                         tmpStat = Pump_PL_TXSTATUS_REG;
1518:.\Generated_Source\PSoC5/Pump_PL.c ****                     }while(((uint8)~tmpStat & Pump_PL_TX_STS_COMPLETE) != 0u);
1519:.\Generated_Source\PSoC5/Pump_PL.c ****                 }
1520:.\Generated_Source\PSoC5/Pump_PL.c **** 
1521:.\Generated_Source\PSoC5/Pump_PL.c ****                 if( (retMode == Pump_PL_WAIT_FOR_COMPLETE_REINIT) ||
1522:.\Generated_Source\PSoC5/Pump_PL.c ****                     (retMode == Pump_PL_REINIT) ||
1523:.\Generated_Source\PSoC5/Pump_PL.c ****                     (retMode == Pump_PL_SEND_WAIT_REINIT) )
1524:.\Generated_Source\PSoC5/Pump_PL.c ****                 {
1525:.\Generated_Source\PSoC5/Pump_PL.c ****                     Pump_PL_WriteControlRegister(Pump_PL_ReadControlRegister() &
1526:.\Generated_Source\PSoC5/Pump_PL.c ****                                                   (uint8)~Pump_PL_CTRL_HD_SEND_BREAK);
1527:.\Generated_Source\PSoC5/Pump_PL.c ****                 }
1528:.\Generated_Source\PSoC5/Pump_PL.c **** 
1529:.\Generated_Source\PSoC5/Pump_PL.c ****             #else /* Pump_PL_HD_ENABLED Full Duplex mode */
1530:.\Generated_Source\PSoC5/Pump_PL.c **** 
1531:.\Generated_Source\PSoC5/Pump_PL.c ****                 static uint8 tx_period;
1532:.\Generated_Source\PSoC5/Pump_PL.c **** 
1533:.\Generated_Source\PSoC5/Pump_PL.c ****                 if( (retMode == Pump_PL_SEND_BREAK) ||
 1633              		.loc 1 1533 0
 1634 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1635 0014 002B     		cmp	r3, #0
 1636 0016 02D0     		beq	.L112
 1637              		.loc 1 1533 0 is_stmt 0 discriminator 1
 1638 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1639 001a 032B     		cmp	r3, #3
 1640 001c 12D1     		bne	.L113
 1641              	.L112:
1534:.\Generated_Source\PSoC5/Pump_PL.c ****                     (retMode == Pump_PL_SEND_WAIT_REINIT) )
1535:.\Generated_Source\PSoC5/Pump_PL.c ****                 {
1536:.\Generated_Source\PSoC5/Pump_PL.c ****                     /* CTRL_HD_SEND_BREAK - skip to send parity bit at Break signal in Full Duplex 
1537:.\Generated_Source\PSoC5/Pump_PL.c ****                     #if( (Pump_PL_PARITY_TYPE != Pump_PL__B_UART__NONE_REVB) || \
1538:.\Generated_Source\PSoC5/Pump_PL.c ****                                         (Pump_PL_PARITY_TYPE_SW != 0u) )
1539:.\Generated_Source\PSoC5/Pump_PL.c ****                         Pump_PL_WriteControlRegister(Pump_PL_ReadControlRegister() |
1540:.\Generated_Source\PSoC5/Pump_PL.c ****                                                               Pump_PL_CTRL_HD_SEND_BREAK);
1541:.\Generated_Source\PSoC5/Pump_PL.c ****                     #endif /* End Pump_PL_PARITY_TYPE != Pump_PL__B_UART__NONE_REVB  */
1542:.\Generated_Source\PSoC5/Pump_PL.c **** 
1543:.\Generated_Source\PSoC5/Pump_PL.c ****                     #if(Pump_PL_TXCLKGEN_DP)
1544:.\Generated_Source\PSoC5/Pump_PL.c ****                         tx_period = Pump_PL_TXBITCLKTX_COMPLETE_REG;
 1642              		.loc 1 1544 0 is_stmt 1
 1643 001e 1B4B     		ldr	r3, .L118+4
 1644 0020 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 57


 1645 0022 DAB2     		uxtb	r2, r3
 1646 0024 1A4B     		ldr	r3, .L118+8
 1647 0026 1A70     		strb	r2, [r3]
1545:.\Generated_Source\PSoC5/Pump_PL.c ****                         Pump_PL_TXBITCLKTX_COMPLETE_REG = Pump_PL_TXBITCTR_BREAKBITS;
 1648              		.loc 1 1545 0
 1649 0028 184B     		ldr	r3, .L118+4
 1650 002a 6722     		movs	r2, #103
 1651 002c 1A70     		strb	r2, [r3]
1546:.\Generated_Source\PSoC5/Pump_PL.c ****                     #else
1547:.\Generated_Source\PSoC5/Pump_PL.c ****                         tx_period = Pump_PL_TXBITCTR_PERIOD_REG;
1548:.\Generated_Source\PSoC5/Pump_PL.c ****                         Pump_PL_TXBITCTR_PERIOD_REG = Pump_PL_TXBITCTR_BREAKBITS8X;
1549:.\Generated_Source\PSoC5/Pump_PL.c ****                     #endif /* End Pump_PL_TXCLKGEN_DP */
1550:.\Generated_Source\PSoC5/Pump_PL.c **** 
1551:.\Generated_Source\PSoC5/Pump_PL.c ****                     /* Send zeros*/
1552:.\Generated_Source\PSoC5/Pump_PL.c ****                     Pump_PL_TXDATA_REG = 0u;
 1652              		.loc 1 1552 0
 1653 002e 194B     		ldr	r3, .L118+12
 1654 0030 0022     		movs	r2, #0
 1655 0032 1A70     		strb	r2, [r3]
 1656              	.L114:
1553:.\Generated_Source\PSoC5/Pump_PL.c **** 
1554:.\Generated_Source\PSoC5/Pump_PL.c ****                     do /* wait until transmit starts */
1555:.\Generated_Source\PSoC5/Pump_PL.c ****                     {
1556:.\Generated_Source\PSoC5/Pump_PL.c ****                         tmpStat = Pump_PL_TXSTATUS_REG;
 1657              		.loc 1 1556 0 discriminator 1
 1658 0034 184B     		ldr	r3, .L118+16
 1659 0036 1B78     		ldrb	r3, [r3]
 1660 0038 FB73     		strb	r3, [r7, #15]
1557:.\Generated_Source\PSoC5/Pump_PL.c ****                     }while((tmpStat & Pump_PL_TX_STS_FIFO_EMPTY) != 0u);
 1661              		.loc 1 1557 0 discriminator 1
 1662 003a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1663 003c 03F00203 		and	r3, r3, #2
 1664 0040 002B     		cmp	r3, #0
 1665 0042 F7D1     		bne	.L114
 1666              	.L113:
1558:.\Generated_Source\PSoC5/Pump_PL.c ****                 }
1559:.\Generated_Source\PSoC5/Pump_PL.c **** 
1560:.\Generated_Source\PSoC5/Pump_PL.c ****                 if( (retMode == Pump_PL_WAIT_FOR_COMPLETE_REINIT) ||
 1667              		.loc 1 1560 0
 1668 0044 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1669 0046 012B     		cmp	r3, #1
 1670 0048 02D0     		beq	.L115
 1671              		.loc 1 1560 0 is_stmt 0 discriminator 1
 1672 004a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1673 004c 032B     		cmp	r3, #3
 1674 004e 09D1     		bne	.L116
 1675              	.L115:
1561:.\Generated_Source\PSoC5/Pump_PL.c ****                     (retMode == Pump_PL_SEND_WAIT_REINIT) )
1562:.\Generated_Source\PSoC5/Pump_PL.c ****                 {
1563:.\Generated_Source\PSoC5/Pump_PL.c ****                     do /*wait until transmit complete*/
1564:.\Generated_Source\PSoC5/Pump_PL.c ****                     {
1565:.\Generated_Source\PSoC5/Pump_PL.c ****                         tmpStat = Pump_PL_TXSTATUS_REG;
 1676              		.loc 1 1565 0 is_stmt 1 discriminator 1
 1677 0050 114B     		ldr	r3, .L118+16
 1678 0052 1B78     		ldrb	r3, [r3]
 1679 0054 FB73     		strb	r3, [r7, #15]
1566:.\Generated_Source\PSoC5/Pump_PL.c ****                     }while(((uint8)~tmpStat & Pump_PL_TX_STS_COMPLETE) != 0u);
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 58


 1680              		.loc 1 1566 0 discriminator 1
 1681 0056 FB7B     		ldrb	r3, [r7, #15]
 1682 0058 DB43     		mvns	r3, r3
 1683 005a DBB2     		uxtb	r3, r3
 1684 005c 03F00103 		and	r3, r3, #1
 1685 0060 002B     		cmp	r3, #0
 1686 0062 F5D1     		bne	.L115
 1687              	.L116:
1567:.\Generated_Source\PSoC5/Pump_PL.c ****                 }
1568:.\Generated_Source\PSoC5/Pump_PL.c **** 
1569:.\Generated_Source\PSoC5/Pump_PL.c ****                 if( (retMode == Pump_PL_WAIT_FOR_COMPLETE_REINIT) ||
 1688              		.loc 1 1569 0
 1689 0064 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1690 0066 012B     		cmp	r3, #1
 1691 0068 05D0     		beq	.L117
 1692              		.loc 1 1569 0 is_stmt 0 discriminator 1
 1693 006a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1694 006c 022B     		cmp	r3, #2
 1695 006e 02D0     		beq	.L117
1570:.\Generated_Source\PSoC5/Pump_PL.c ****                     (retMode == Pump_PL_REINIT) ||
 1696              		.loc 1 1570 0 is_stmt 1
 1697 0070 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1698 0072 032B     		cmp	r3, #3
 1699 0074 03D1     		bne	.L110
 1700              	.L117:
1571:.\Generated_Source\PSoC5/Pump_PL.c ****                     (retMode == Pump_PL_SEND_WAIT_REINIT) )
1572:.\Generated_Source\PSoC5/Pump_PL.c ****                 {
1573:.\Generated_Source\PSoC5/Pump_PL.c **** 
1574:.\Generated_Source\PSoC5/Pump_PL.c ****                     #if(Pump_PL_TXCLKGEN_DP)
1575:.\Generated_Source\PSoC5/Pump_PL.c ****                         Pump_PL_TXBITCLKTX_COMPLETE_REG = tx_period;
 1701              		.loc 1 1575 0
 1702 0076 054B     		ldr	r3, .L118+4
 1703 0078 054A     		ldr	r2, .L118+8
 1704 007a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1705 007c 1A70     		strb	r2, [r3]
 1706              	.L110:
 1707              	.LBE2:
1576:.\Generated_Source\PSoC5/Pump_PL.c ****                     #else
1577:.\Generated_Source\PSoC5/Pump_PL.c ****                         Pump_PL_TXBITCTR_PERIOD_REG = tx_period;
1578:.\Generated_Source\PSoC5/Pump_PL.c ****                     #endif /* End Pump_PL_TXCLKGEN_DP */
1579:.\Generated_Source\PSoC5/Pump_PL.c **** 
1580:.\Generated_Source\PSoC5/Pump_PL.c ****                     #if( (Pump_PL_PARITY_TYPE != Pump_PL__B_UART__NONE_REVB) || \
1581:.\Generated_Source\PSoC5/Pump_PL.c ****                          (Pump_PL_PARITY_TYPE_SW != 0u) )
1582:.\Generated_Source\PSoC5/Pump_PL.c ****                         Pump_PL_WriteControlRegister(Pump_PL_ReadControlRegister() &
1583:.\Generated_Source\PSoC5/Pump_PL.c ****                                                       (uint8)~Pump_PL_CTRL_HD_SEND_BREAK);
1584:.\Generated_Source\PSoC5/Pump_PL.c ****                     #endif /* End Pump_PL_PARITY_TYPE != NONE */
1585:.\Generated_Source\PSoC5/Pump_PL.c ****                 }
1586:.\Generated_Source\PSoC5/Pump_PL.c ****             #endif    /* End Pump_PL_HD_ENABLED */
1587:.\Generated_Source\PSoC5/Pump_PL.c ****         }
1588:.\Generated_Source\PSoC5/Pump_PL.c ****     }
 1708              		.loc 1 1588 0
 1709 007e 1437     		adds	r7, r7, #20
 1710              		.cfi_def_cfa_offset 4
 1711 0080 BD46     		mov	sp, r7
 1712              		.cfi_def_cfa_register 13
 1713              		@ sp needed
 1714 0082 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 59


 1715              		.cfi_restore 7
 1716              		.cfi_def_cfa_offset 0
 1717 0086 7047     		bx	lr
 1718              	.L119:
 1719              		.align	2
 1720              	.L118:
 1721 0088 00000000 		.word	Pump_PL_initVar
 1722 008c 39640040 		.word	1073767481
 1723 0090 08000000 		.word	tx_period.4989
 1724 0094 48650040 		.word	1073767752
 1725 0098 6C640040 		.word	1073767532
 1726              		.cfi_endproc
 1727              	.LFE27:
 1728              		.size	Pump_PL_SendBreak, .-Pump_PL_SendBreak
 1729              		.section	.text.Pump_PL_SetTxAddressMode,"ax",%progbits
 1730              		.align	2
 1731              		.global	Pump_PL_SetTxAddressMode
 1732              		.thumb
 1733              		.thumb_func
 1734              		.type	Pump_PL_SetTxAddressMode, %function
 1735              	Pump_PL_SetTxAddressMode:
 1736              	.LFB28:
1589:.\Generated_Source\PSoC5/Pump_PL.c **** 
1590:.\Generated_Source\PSoC5/Pump_PL.c **** 
1591:.\Generated_Source\PSoC5/Pump_PL.c ****     /*******************************************************************************
1592:.\Generated_Source\PSoC5/Pump_PL.c ****     * Function Name: Pump_PL_SetTxAddressMode
1593:.\Generated_Source\PSoC5/Pump_PL.c ****     ********************************************************************************
1594:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1595:.\Generated_Source\PSoC5/Pump_PL.c ****     * Summary:
1596:.\Generated_Source\PSoC5/Pump_PL.c ****     *  Set the transmit addressing mode
1597:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1598:.\Generated_Source\PSoC5/Pump_PL.c ****     * Parameters:
1599:.\Generated_Source\PSoC5/Pump_PL.c ****     *  addressMode: 0 -> Space
1600:.\Generated_Source\PSoC5/Pump_PL.c ****     *               1 -> Mark
1601:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1602:.\Generated_Source\PSoC5/Pump_PL.c ****     * Return:
1603:.\Generated_Source\PSoC5/Pump_PL.c ****     *  None.
1604:.\Generated_Source\PSoC5/Pump_PL.c ****     *
1605:.\Generated_Source\PSoC5/Pump_PL.c ****     *******************************************************************************/
1606:.\Generated_Source\PSoC5/Pump_PL.c ****     void Pump_PL_SetTxAddressMode(uint8 addressMode) 
1607:.\Generated_Source\PSoC5/Pump_PL.c ****     {
 1737              		.loc 1 1607 0
 1738              		.cfi_startproc
 1739              		@ args = 0, pretend = 0, frame = 8
 1740              		@ frame_needed = 1, uses_anonymous_args = 0
 1741              		@ link register save eliminated.
 1742 0000 80B4     		push	{r7}
 1743              		.cfi_def_cfa_offset 4
 1744              		.cfi_offset 7, -4
 1745 0002 83B0     		sub	sp, sp, #12
 1746              		.cfi_def_cfa_offset 16
 1747 0004 00AF     		add	r7, sp, #0
 1748              		.cfi_def_cfa_register 7
 1749 0006 0346     		mov	r3, r0
 1750 0008 FB71     		strb	r3, [r7, #7]
1608:.\Generated_Source\PSoC5/Pump_PL.c ****         /* Mark/Space sending enable*/
1609:.\Generated_Source\PSoC5/Pump_PL.c ****         if(addressMode != 0u)
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 60


1610:.\Generated_Source\PSoC5/Pump_PL.c ****         {
1611:.\Generated_Source\PSoC5/Pump_PL.c ****             #if( Pump_PL_CONTROL_REG_REMOVED == 0u )
1612:.\Generated_Source\PSoC5/Pump_PL.c ****                 Pump_PL_WriteControlRegister(Pump_PL_ReadControlRegister() |
1613:.\Generated_Source\PSoC5/Pump_PL.c ****                                                       Pump_PL_CTRL_MARK);
1614:.\Generated_Source\PSoC5/Pump_PL.c ****             #endif /* End Pump_PL_CONTROL_REG_REMOVED == 0u */
1615:.\Generated_Source\PSoC5/Pump_PL.c ****         }
1616:.\Generated_Source\PSoC5/Pump_PL.c ****         else
1617:.\Generated_Source\PSoC5/Pump_PL.c ****         {
1618:.\Generated_Source\PSoC5/Pump_PL.c ****             #if( Pump_PL_CONTROL_REG_REMOVED == 0u )
1619:.\Generated_Source\PSoC5/Pump_PL.c ****                 Pump_PL_WriteControlRegister(Pump_PL_ReadControlRegister() &
1620:.\Generated_Source\PSoC5/Pump_PL.c ****                                                     (uint8)~Pump_PL_CTRL_MARK);
1621:.\Generated_Source\PSoC5/Pump_PL.c ****             #endif /* End Pump_PL_CONTROL_REG_REMOVED == 0u */
1622:.\Generated_Source\PSoC5/Pump_PL.c ****         }
1623:.\Generated_Source\PSoC5/Pump_PL.c ****     }
 1751              		.loc 1 1623 0
 1752 000a 0C37     		adds	r7, r7, #12
 1753              		.cfi_def_cfa_offset 4
 1754 000c BD46     		mov	sp, r7
 1755              		.cfi_def_cfa_register 13
 1756              		@ sp needed
 1757 000e 5DF8047B 		ldr	r7, [sp], #4
 1758              		.cfi_restore 7
 1759              		.cfi_def_cfa_offset 0
 1760 0012 7047     		bx	lr
 1761              		.cfi_endproc
 1762              	.LFE28:
 1763              		.size	Pump_PL_SetTxAddressMode, .-Pump_PL_SetTxAddressMode
 1764              		.bss
 1765              	tx_period.4989:
 1766 0008 00       		.space	1
 1767 0009 00       		.text
 1768              	.Letext0:
 1769              		.file 2 ".\\Generated_Source\\PSoC5\\cytypes.h"
 1770              		.section	.debug_info,"",%progbits
 1771              	.Ldebug_info0:
 1772 0000 E7050000 		.4byte	0x5e7
 1773 0004 0400     		.2byte	0x4
 1774 0006 00000000 		.4byte	.Ldebug_abbrev0
 1775 000a 04       		.byte	0x4
 1776 000b 01       		.uleb128 0x1
 1777 000c 31020000 		.4byte	.LASF72
 1778 0010 01       		.byte	0x1
 1779 0011 36050000 		.4byte	.LASF73
 1780 0015 C8020000 		.4byte	.LASF74
 1781 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1782 001d 00000000 		.4byte	0
 1783 0021 00000000 		.4byte	.Ldebug_line0
 1784 0025 02       		.uleb128 0x2
 1785 0026 01       		.byte	0x1
 1786 0027 06       		.byte	0x6
 1787 0028 F7000000 		.4byte	.LASF0
 1788 002c 02       		.uleb128 0x2
 1789 002d 01       		.byte	0x1
 1790 002e 08       		.byte	0x8
 1791 002f BA030000 		.4byte	.LASF1
 1792 0033 02       		.uleb128 0x2
 1793 0034 02       		.byte	0x2
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 61


 1794 0035 05       		.byte	0x5
 1795 0036 C8030000 		.4byte	.LASF2
 1796 003a 02       		.uleb128 0x2
 1797 003b 02       		.byte	0x2
 1798 003c 07       		.byte	0x7
 1799 003d AA010000 		.4byte	.LASF3
 1800 0041 02       		.uleb128 0x2
 1801 0042 04       		.byte	0x4
 1802 0043 05       		.byte	0x5
 1803 0044 03010000 		.4byte	.LASF4
 1804 0048 02       		.uleb128 0x2
 1805 0049 04       		.byte	0x4
 1806 004a 07       		.byte	0x7
 1807 004b 81010000 		.4byte	.LASF5
 1808 004f 02       		.uleb128 0x2
 1809 0050 08       		.byte	0x8
 1810 0051 05       		.byte	0x5
 1811 0052 E9000000 		.4byte	.LASF6
 1812 0056 02       		.uleb128 0x2
 1813 0057 08       		.byte	0x8
 1814 0058 07       		.byte	0x7
 1815 0059 7B000000 		.4byte	.LASF7
 1816 005d 03       		.uleb128 0x3
 1817 005e 04       		.byte	0x4
 1818 005f 05       		.byte	0x5
 1819 0060 696E7400 		.ascii	"int\000"
 1820 0064 02       		.uleb128 0x2
 1821 0065 04       		.byte	0x4
 1822 0066 07       		.byte	0x7
 1823 0067 74010000 		.4byte	.LASF8
 1824 006b 04       		.uleb128 0x4
 1825 006c 0C010000 		.4byte	.LASF9
 1826 0070 02       		.byte	0x2
 1827 0071 A1       		.byte	0xa1
 1828 0072 2C000000 		.4byte	0x2c
 1829 0076 04       		.uleb128 0x4
 1830 0077 00000000 		.4byte	.LASF10
 1831 007b 02       		.byte	0x2
 1832 007c A2       		.byte	0xa2
 1833 007d 3A000000 		.4byte	0x3a
 1834 0081 04       		.uleb128 0x4
 1835 0082 3B010000 		.4byte	.LASF11
 1836 0086 02       		.byte	0x2
 1837 0087 A3       		.byte	0xa3
 1838 0088 48000000 		.4byte	0x48
 1839 008c 02       		.uleb128 0x2
 1840 008d 04       		.byte	0x4
 1841 008e 04       		.byte	0x4
 1842 008f 5E030000 		.4byte	.LASF12
 1843 0093 02       		.uleb128 0x2
 1844 0094 08       		.byte	0x8
 1845 0095 04       		.byte	0x4
 1846 0096 12010000 		.4byte	.LASF13
 1847 009a 04       		.uleb128 0x4
 1848 009b 3F040000 		.4byte	.LASF14
 1849 009f 02       		.byte	0x2
 1850 00a0 B2       		.byte	0xb2
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 62


 1851 00a1 A5000000 		.4byte	0xa5
 1852 00a5 02       		.uleb128 0x2
 1853 00a6 01       		.byte	0x1
 1854 00a7 08       		.byte	0x8
 1855 00a8 3A040000 		.4byte	.LASF15
 1856 00ac 05       		.uleb128 0x5
 1857 00ad A5030000 		.4byte	.LASF16
 1858 00b1 02       		.byte	0x2
 1859 00b2 4B01     		.2byte	0x14b
 1860 00b4 B8000000 		.4byte	0xb8
 1861 00b8 06       		.uleb128 0x6
 1862 00b9 6B000000 		.4byte	0x6b
 1863 00bd 06       		.uleb128 0x6
 1864 00be 76000000 		.4byte	0x76
 1865 00c2 05       		.uleb128 0x5
 1866 00c3 F0010000 		.4byte	.LASF17
 1867 00c7 02       		.byte	0x2
 1868 00c8 4D01     		.2byte	0x14d
 1869 00ca CE000000 		.4byte	0xce
 1870 00ce 06       		.uleb128 0x6
 1871 00cf 81000000 		.4byte	0x81
 1872 00d3 02       		.uleb128 0x2
 1873 00d4 04       		.byte	0x4
 1874 00d5 07       		.byte	0x7
 1875 00d6 FE010000 		.4byte	.LASF18
 1876 00da 07       		.uleb128 0x7
 1877 00db 0F020000 		.4byte	.LASF19
 1878 00df 01       		.byte	0x1
 1879 00e0 49       		.byte	0x49
 1880 00e1 00000000 		.4byte	.LFB0
 1881 00e5 20000000 		.4byte	.LFE0-.LFB0
 1882 00e9 01       		.uleb128 0x1
 1883 00ea 9C       		.byte	0x9c
 1884 00eb 07       		.uleb128 0x7
 1885 00ec FA030000 		.4byte	.LASF20
 1886 00f0 01       		.byte	0x1
 1887 00f1 65       		.byte	0x65
 1888 00f2 00000000 		.4byte	.LFB1
 1889 00f6 4C000000 		.4byte	.LFE1-.LFB1
 1890 00fa 01       		.uleb128 0x1
 1891 00fb 9C       		.byte	0x9c
 1892 00fc 08       		.uleb128 0x8
 1893 00fd 4F030000 		.4byte	.LASF21
 1894 0101 01       		.byte	0x1
 1895 0102 AE       		.byte	0xae
 1896 0103 00000000 		.4byte	.LFB2
 1897 0107 64000000 		.4byte	.LFE2-.LFB2
 1898 010b 01       		.uleb128 0x1
 1899 010c 9C       		.byte	0x9c
 1900 010d 20010000 		.4byte	0x120
 1901 0111 09       		.uleb128 0x9
 1902 0112 8C040000 		.4byte	.LASF23
 1903 0116 01       		.byte	0x1
 1904 0117 B0       		.byte	0xb0
 1905 0118 6B000000 		.4byte	0x6b
 1906 011c 02       		.uleb128 0x2
 1907 011d 91       		.byte	0x91
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 63


 1908 011e 77       		.sleb128 -9
 1909 011f 00       		.byte	0
 1910 0120 08       		.uleb128 0x8
 1911 0121 4A010000 		.4byte	.LASF22
 1912 0125 01       		.byte	0x1
 1913 0126 E3       		.byte	0xe3
 1914 0127 00000000 		.4byte	.LFB3
 1915 012b 5C000000 		.4byte	.LFE3-.LFB3
 1916 012f 01       		.uleb128 0x1
 1917 0130 9C       		.byte	0x9c
 1918 0131 44010000 		.4byte	0x144
 1919 0135 09       		.uleb128 0x9
 1920 0136 8C040000 		.4byte	.LASF23
 1921 013a 01       		.byte	0x1
 1922 013b E5       		.byte	0xe5
 1923 013c 6B000000 		.4byte	0x6b
 1924 0140 02       		.uleb128 0x2
 1925 0141 91       		.byte	0x91
 1926 0142 77       		.sleb128 -9
 1927 0143 00       		.byte	0
 1928 0144 0A       		.uleb128 0xa
 1929 0145 19000000 		.4byte	.LASF38
 1930 0149 01       		.byte	0x1
 1931 014a 1901     		.2byte	0x119
 1932 014c 6B000000 		.4byte	0x6b
 1933 0150 00000000 		.4byte	.LFB4
 1934 0154 10000000 		.4byte	.LFE4-.LFB4
 1935 0158 01       		.uleb128 0x1
 1936 0159 9C       		.byte	0x9c
 1937 015a 0B       		.uleb128 0xb
 1938 015b 4A000000 		.4byte	.LASF24
 1939 015f 01       		.byte	0x1
 1940 0160 3101     		.2byte	0x131
 1941 0162 00000000 		.4byte	.LFB5
 1942 0166 14000000 		.4byte	.LFE5-.LFB5
 1943 016a 01       		.uleb128 0x1
 1944 016b 9C       		.byte	0x9c
 1945 016c 80010000 		.4byte	0x180
 1946 0170 0C       		.uleb128 0xc
 1947 0171 42010000 		.4byte	.LASF28
 1948 0175 01       		.byte	0x1
 1949 0176 3101     		.2byte	0x131
 1950 0178 6B000000 		.4byte	0x6b
 1951 017c 02       		.uleb128 0x2
 1952 017d 91       		.byte	0x91
 1953 017e 77       		.sleb128 -9
 1954 017f 00       		.byte	0
 1955 0180 0D       		.uleb128 0xd
 1956 0181 67000000 		.4byte	.LASF25
 1957 0185 01       		.byte	0x1
 1958 0186 5001     		.2byte	0x150
 1959 0188 00000000 		.4byte	.LFB6
 1960 018c 18000000 		.4byte	.LFE6-.LFB6
 1961 0190 01       		.uleb128 0x1
 1962 0191 9C       		.byte	0x9c
 1963 0192 0D       		.uleb128 0xd
 1964 0193 35000000 		.4byte	.LASF26
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 64


 1965 0197 01       		.byte	0x1
 1966 0198 6701     		.2byte	0x167
 1967 019a 00000000 		.4byte	.LFB7
 1968 019e 18000000 		.4byte	.LFE7-.LFB7
 1969 01a2 01       		.uleb128 0x1
 1970 01a3 9C       		.byte	0x9c
 1971 01a4 0B       		.uleb128 0xb
 1972 01a5 45040000 		.4byte	.LASF27
 1973 01a9 01       		.byte	0x1
 1974 01aa 8101     		.2byte	0x181
 1975 01ac 00000000 		.4byte	.LFB8
 1976 01b0 20000000 		.4byte	.LFE8-.LFB8
 1977 01b4 01       		.uleb128 0x1
 1978 01b5 9C       		.byte	0x9c
 1979 01b6 CA010000 		.4byte	0x1ca
 1980 01ba 0C       		.uleb128 0xc
 1981 01bb E9010000 		.4byte	.LASF29
 1982 01bf 01       		.byte	0x1
 1983 01c0 8101     		.2byte	0x181
 1984 01c2 6B000000 		.4byte	0x6b
 1985 01c6 02       		.uleb128 0x2
 1986 01c7 91       		.byte	0x91
 1987 01c8 77       		.sleb128 -9
 1988 01c9 00       		.byte	0
 1989 01ca 0E       		.uleb128 0xe
 1990 01cb A2000000 		.4byte	.LASF33
 1991 01cf 01       		.byte	0x1
 1992 01d0 A201     		.2byte	0x1a2
 1993 01d2 6B000000 		.4byte	0x6b
 1994 01d6 00000000 		.4byte	.LFB9
 1995 01da 84000000 		.4byte	.LFE9-.LFB9
 1996 01de 01       		.uleb128 0x1
 1997 01df 9C       		.byte	0x9c
 1998 01e0 12020000 		.4byte	0x212
 1999 01e4 0F       		.uleb128 0xf
 2000 01e5 2C040000 		.4byte	.LASF30
 2001 01e9 01       		.byte	0x1
 2002 01ea A401     		.2byte	0x1a4
 2003 01ec 6B000000 		.4byte	0x6b
 2004 01f0 02       		.uleb128 0x2
 2005 01f1 91       		.byte	0x91
 2006 01f2 77       		.sleb128 -9
 2007 01f3 0F       		.uleb128 0xf
 2008 01f4 CE010000 		.4byte	.LASF31
 2009 01f8 01       		.byte	0x1
 2010 01f9 A701     		.2byte	0x1a7
 2011 01fb 76000000 		.4byte	0x76
 2012 01ff 02       		.uleb128 0x2
 2013 0200 91       		.byte	0x91
 2014 0201 74       		.sleb128 -12
 2015 0202 0F       		.uleb128 0xf
 2016 0203 07000000 		.4byte	.LASF32
 2017 0207 01       		.byte	0x1
 2018 0208 A801     		.2byte	0x1a8
 2019 020a 76000000 		.4byte	0x76
 2020 020e 02       		.uleb128 0x2
 2021 020f 91       		.byte	0x91
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 65


 2022 0210 72       		.sleb128 -14
 2023 0211 00       		.byte	0
 2024 0212 10       		.uleb128 0x10
 2025 0213 A4040000 		.4byte	.LASF34
 2026 0217 01       		.byte	0x1
 2027 0218 FD01     		.2byte	0x1fd
 2028 021a 6B000000 		.4byte	0x6b
 2029 021e 00000000 		.4byte	.LFB10
 2030 0222 40000000 		.4byte	.LFE10-.LFB10
 2031 0226 01       		.uleb128 0x1
 2032 0227 9C       		.byte	0x9c
 2033 0228 3C020000 		.4byte	0x23c
 2034 022c 0F       		.uleb128 0xf
 2035 022d 9D040000 		.4byte	.LASF35
 2036 0231 01       		.byte	0x1
 2037 0232 FF01     		.2byte	0x1ff
 2038 0234 6B000000 		.4byte	0x6b
 2039 0238 02       		.uleb128 0x2
 2040 0239 91       		.byte	0x91
 2041 023a 77       		.sleb128 -9
 2042 023b 00       		.byte	0
 2043 023c 0E       		.uleb128 0xe
 2044 023d 3F030000 		.4byte	.LASF36
 2045 0241 01       		.byte	0x1
 2046 0242 2C02     		.2byte	0x22c
 2047 0244 6B000000 		.4byte	0x6b
 2048 0248 00000000 		.4byte	.LFB11
 2049 024c A8000000 		.4byte	.LFE11-.LFB11
 2050 0250 01       		.uleb128 0x1
 2051 0251 9C       		.byte	0x9c
 2052 0252 93020000 		.4byte	0x293
 2053 0256 0F       		.uleb128 0xf
 2054 0257 2C040000 		.4byte	.LASF30
 2055 025b 01       		.byte	0x1
 2056 025c 2E02     		.2byte	0x22e
 2057 025e 6B000000 		.4byte	0x6b
 2058 0262 02       		.uleb128 0x2
 2059 0263 91       		.byte	0x91
 2060 0264 77       		.sleb128 -9
 2061 0265 0F       		.uleb128 0xf
 2062 0266 BF020000 		.4byte	.LASF37
 2063 026a 01       		.byte	0x1
 2064 026b 2F02     		.2byte	0x22f
 2065 026d 6B000000 		.4byte	0x6b
 2066 0271 02       		.uleb128 0x2
 2067 0272 91       		.byte	0x91
 2068 0273 71       		.sleb128 -15
 2069 0274 0F       		.uleb128 0xf
 2070 0275 CE010000 		.4byte	.LASF31
 2071 0279 01       		.byte	0x1
 2072 027a 3202     		.2byte	0x232
 2073 027c 76000000 		.4byte	0x76
 2074 0280 02       		.uleb128 0x2
 2075 0281 91       		.byte	0x91
 2076 0282 74       		.sleb128 -12
 2077 0283 0F       		.uleb128 0xf
 2078 0284 07000000 		.4byte	.LASF32
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 66


 2079 0288 01       		.byte	0x1
 2080 0289 3302     		.2byte	0x233
 2081 028b 76000000 		.4byte	0x76
 2082 028f 02       		.uleb128 0x2
 2083 0290 91       		.byte	0x91
 2084 0291 72       		.sleb128 -14
 2085 0292 00       		.byte	0
 2086 0293 11       		.uleb128 0x11
 2087 0294 92000000 		.4byte	.LASF39
 2088 0298 01       		.byte	0x1
 2089 0299 9202     		.2byte	0x292
 2090 029b 76000000 		.4byte	0x76
 2091 029f 00000000 		.4byte	.LFB12
 2092 02a3 22000000 		.4byte	.LFE12-.LFB12
 2093 02a7 01       		.uleb128 0x1
 2094 02a8 9C       		.byte	0x9c
 2095 02a9 0E       		.uleb128 0xe
 2096 02aa 14050000 		.4byte	.LASF40
 2097 02ae 01       		.byte	0x1
 2098 02af B302     		.2byte	0x2b3
 2099 02b1 76000000 		.4byte	0x76
 2100 02b5 00000000 		.4byte	.LFB13
 2101 02b9 84000000 		.4byte	.LFE13-.LFB13
 2102 02bd 01       		.uleb128 0x1
 2103 02be 9C       		.byte	0x9c
 2104 02bf D3020000 		.4byte	0x2d3
 2105 02c3 0F       		.uleb128 0xf
 2106 02c4 A5010000 		.4byte	.LASF41
 2107 02c8 01       		.byte	0x1
 2108 02c9 B602     		.2byte	0x2b6
 2109 02cb 76000000 		.4byte	0x76
 2110 02cf 02       		.uleb128 0x2
 2111 02d0 91       		.byte	0x91
 2112 02d1 76       		.sleb128 -10
 2113 02d2 00       		.byte	0
 2114 02d3 12       		.uleb128 0x12
 2115 02d4 D4040000 		.4byte	.LASF42
 2116 02d8 01       		.byte	0x1
 2117 02d9 0303     		.2byte	0x303
 2118 02db 00000000 		.4byte	.LFB14
 2119 02df 70000000 		.4byte	.LFE14-.LFB14
 2120 02e3 01       		.uleb128 0x1
 2121 02e4 9C       		.byte	0x9c
 2122 02e5 F9020000 		.4byte	0x2f9
 2123 02e9 0F       		.uleb128 0xf
 2124 02ea 8C040000 		.4byte	.LASF23
 2125 02ee 01       		.byte	0x1
 2126 02ef 0503     		.2byte	0x305
 2127 02f1 6B000000 		.4byte	0x6b
 2128 02f5 02       		.uleb128 0x2
 2129 02f6 91       		.byte	0x91
 2130 02f7 77       		.sleb128 -9
 2131 02f8 00       		.byte	0
 2132 02f9 0B       		.uleb128 0xb
 2133 02fa D0000000 		.4byte	.LASF43
 2134 02fe 01       		.byte	0x1
 2135 02ff 4003     		.2byte	0x340
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 67


 2136 0301 00000000 		.4byte	.LFB15
 2137 0305 14000000 		.4byte	.LFE15-.LFB15
 2138 0309 01       		.uleb128 0x1
 2139 030a 9C       		.byte	0x9c
 2140 030b 1F030000 		.4byte	0x31f
 2141 030f 0C       		.uleb128 0xc
 2142 0310 19010000 		.4byte	.LASF44
 2143 0314 01       		.byte	0x1
 2144 0315 4003     		.2byte	0x340
 2145 0317 6B000000 		.4byte	0x6b
 2146 031b 02       		.uleb128 0x2
 2147 031c 91       		.byte	0x91
 2148 031d 77       		.sleb128 -9
 2149 031e 00       		.byte	0
 2150 031f 0B       		.uleb128 0xb
 2151 0320 60040000 		.4byte	.LASF45
 2152 0324 01       		.byte	0x1
 2153 0325 6503     		.2byte	0x365
 2154 0327 00000000 		.4byte	.LFB16
 2155 032b 20000000 		.4byte	.LFE16-.LFB16
 2156 032f 01       		.uleb128 0x1
 2157 0330 9C       		.byte	0x9c
 2158 0331 45030000 		.4byte	0x345
 2159 0335 0C       		.uleb128 0xc
 2160 0336 07020000 		.4byte	.LASF46
 2161 033a 01       		.byte	0x1
 2162 033b 6503     		.2byte	0x365
 2163 033d 6B000000 		.4byte	0x6b
 2164 0341 02       		.uleb128 0x2
 2165 0342 91       		.byte	0x91
 2166 0343 77       		.sleb128 -9
 2167 0344 00       		.byte	0
 2168 0345 0B       		.uleb128 0xb
 2169 0346 76040000 		.4byte	.LASF47
 2170 034a 01       		.byte	0x1
 2171 034b 7A03     		.2byte	0x37a
 2172 034d 00000000 		.4byte	.LFB17
 2173 0351 20000000 		.4byte	.LFE17-.LFB17
 2174 0355 01       		.uleb128 0x1
 2175 0356 9C       		.byte	0x9c
 2176 0357 6B030000 		.4byte	0x36b
 2177 035b 0C       		.uleb128 0xc
 2178 035c 07020000 		.4byte	.LASF46
 2179 0360 01       		.byte	0x1
 2180 0361 7A03     		.2byte	0x37a
 2181 0363 6B000000 		.4byte	0x6b
 2182 0367 02       		.uleb128 0x2
 2183 0368 91       		.byte	0x91
 2184 0369 77       		.sleb128 -9
 2185 036a 00       		.byte	0
 2186 036b 0B       		.uleb128 0xb
 2187 036c 07040000 		.4byte	.LASF48
 2188 0370 01       		.byte	0x1
 2189 0371 C803     		.2byte	0x3c8
 2190 0373 00000000 		.4byte	.LFB18
 2191 0377 20000000 		.4byte	.LFE18-.LFB18
 2192 037b 01       		.uleb128 0x1
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 68


 2193 037c 9C       		.byte	0x9c
 2194 037d 91030000 		.4byte	0x391
 2195 0381 0C       		.uleb128 0xc
 2196 0382 E9010000 		.4byte	.LASF29
 2197 0386 01       		.byte	0x1
 2198 0387 C803     		.2byte	0x3c8
 2199 0389 6B000000 		.4byte	0x6b
 2200 038d 02       		.uleb128 0x2
 2201 038e 91       		.byte	0x91
 2202 038f 77       		.sleb128 -9
 2203 0390 00       		.byte	0
 2204 0391 0B       		.uleb128 0xb
 2205 0392 1D020000 		.4byte	.LASF49
 2206 0396 01       		.byte	0x1
 2207 0397 EA03     		.2byte	0x3ea
 2208 0399 00000000 		.4byte	.LFB19
 2209 039d 2C000000 		.4byte	.LFE19-.LFB19
 2210 03a1 01       		.uleb128 0x1
 2211 03a2 9C       		.byte	0x9c
 2212 03a3 B7030000 		.4byte	0x3b7
 2213 03a7 0C       		.uleb128 0xc
 2214 03a8 B9040000 		.4byte	.LASF50
 2215 03ac 01       		.byte	0x1
 2216 03ad EA03     		.2byte	0x3ea
 2217 03af 6B000000 		.4byte	0x6b
 2218 03b3 02       		.uleb128 0x2
 2219 03b4 91       		.byte	0x91
 2220 03b5 77       		.sleb128 -9
 2221 03b6 00       		.byte	0
 2222 03b7 0A       		.uleb128 0xa
 2223 03b8 57010000 		.4byte	.LASF51
 2224 03bc 01       		.byte	0x1
 2225 03bd 2E04     		.2byte	0x42e
 2226 03bf 6B000000 		.4byte	0x6b
 2227 03c3 00000000 		.4byte	.LFB20
 2228 03c7 18000000 		.4byte	.LFE20-.LFB20
 2229 03cb 01       		.uleb128 0x1
 2230 03cc 9C       		.byte	0x9c
 2231 03cd 0B       		.uleb128 0xb
 2232 03ce D2030000 		.4byte	.LASF52
 2233 03d2 01       		.byte	0x1
 2234 03d3 5204     		.2byte	0x452
 2235 03d5 00000000 		.4byte	.LFB21
 2236 03d9 34000000 		.4byte	.LFE21-.LFB21
 2237 03dd 01       		.uleb128 0x1
 2238 03de 9C       		.byte	0x9c
 2239 03df F3030000 		.4byte	0x3f3
 2240 03e3 0C       		.uleb128 0xc
 2241 03e4 B9040000 		.4byte	.LASF50
 2242 03e8 01       		.byte	0x1
 2243 03e9 5204     		.2byte	0x452
 2244 03eb 6B000000 		.4byte	0x6b
 2245 03ef 02       		.uleb128 0x2
 2246 03f0 91       		.byte	0x91
 2247 03f1 77       		.sleb128 -9
 2248 03f2 00       		.byte	0
 2249 03f3 12       		.uleb128 0x12
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 69


 2250 03f4 64030000 		.4byte	.LASF53
 2251 03f8 01       		.byte	0x1
 2252 03f9 AE04     		.2byte	0x4ae
 2253 03fb 00000000 		.4byte	.LFB22
 2254 03ff 40000000 		.4byte	.LFE22-.LFB22
 2255 0403 01       		.uleb128 0x1
 2256 0404 9C       		.byte	0x9c
 2257 0405 28040000 		.4byte	0x428
 2258 0409 0C       		.uleb128 0xc
 2259 040a 33040000 		.4byte	.LASF54
 2260 040e 01       		.byte	0x1
 2261 040f AE04     		.2byte	0x4ae
 2262 0411 28040000 		.4byte	0x428
 2263 0415 02       		.uleb128 0x2
 2264 0416 91       		.byte	0x91
 2265 0417 6C       		.sleb128 -20
 2266 0418 0F       		.uleb128 0xf
 2267 0419 2C050000 		.4byte	.LASF55
 2268 041d 01       		.byte	0x1
 2269 041e B004     		.2byte	0x4b0
 2270 0420 76000000 		.4byte	0x76
 2271 0424 02       		.uleb128 0x2
 2272 0425 91       		.byte	0x91
 2273 0426 76       		.sleb128 -10
 2274 0427 00       		.byte	0
 2275 0428 13       		.uleb128 0x13
 2276 0429 04       		.byte	0x4
 2277 042a 2E040000 		.4byte	0x42e
 2278 042e 14       		.uleb128 0x14
 2279 042f 9A000000 		.4byte	0x9a
 2280 0433 12       		.uleb128 0x12
 2281 0434 BD010000 		.4byte	.LASF56
 2282 0438 01       		.byte	0x1
 2283 0439 D404     		.2byte	0x4d4
 2284 043b 00000000 		.4byte	.LFB23
 2285 043f 40000000 		.4byte	.LFE23-.LFB23
 2286 0443 01       		.uleb128 0x1
 2287 0444 9C       		.byte	0x9c
 2288 0445 77040000 		.4byte	0x477
 2289 0449 0C       		.uleb128 0xc
 2290 044a 33040000 		.4byte	.LASF54
 2291 044e 01       		.byte	0x1
 2292 044f D404     		.2byte	0x4d4
 2293 0451 77040000 		.4byte	0x477
 2294 0455 02       		.uleb128 0x2
 2295 0456 91       		.byte	0x91
 2296 0457 6C       		.sleb128 -20
 2297 0458 0C       		.uleb128 0xc
 2298 0459 22040000 		.4byte	.LASF57
 2299 045d 01       		.byte	0x1
 2300 045e D404     		.2byte	0x4d4
 2301 0460 6B000000 		.4byte	0x6b
 2302 0464 02       		.uleb128 0x2
 2303 0465 91       		.byte	0x91
 2304 0466 6B       		.sleb128 -21
 2305 0467 0F       		.uleb128 0xf
 2306 0468 2C050000 		.4byte	.LASF55
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 70


 2307 046c 01       		.byte	0x1
 2308 046d D704     		.2byte	0x4d7
 2309 046f 6B000000 		.4byte	0x6b
 2310 0473 02       		.uleb128 0x2
 2311 0474 91       		.byte	0x91
 2312 0475 77       		.sleb128 -9
 2313 0476 00       		.byte	0
 2314 0477 13       		.uleb128 0x13
 2315 0478 04       		.byte	0x4
 2316 0479 7D040000 		.4byte	0x47d
 2317 047d 14       		.uleb128 0x14
 2318 047e 6B000000 		.4byte	0x6b
 2319 0482 12       		.uleb128 0x12
 2320 0483 C4040000 		.4byte	.LASF58
 2321 0487 01       		.byte	0x1
 2322 0488 F904     		.2byte	0x4f9
 2323 048a 00000000 		.4byte	.LFB24
 2324 048e 30000000 		.4byte	.LFE24-.LFB24
 2325 0492 01       		.uleb128 0x1
 2326 0493 9C       		.byte	0x9c
 2327 0494 A8040000 		.4byte	0x4a8
 2328 0498 0C       		.uleb128 0xc
 2329 0499 B9040000 		.4byte	.LASF50
 2330 049d 01       		.byte	0x1
 2331 049e F904     		.2byte	0x4f9
 2332 04a0 6B000000 		.4byte	0x6b
 2333 04a4 02       		.uleb128 0x2
 2334 04a5 91       		.byte	0x91
 2335 04a6 77       		.sleb128 -9
 2336 04a7 00       		.byte	0
 2337 04a8 10       		.uleb128 0x10
 2338 04a9 E2030000 		.4byte	.LASF59
 2339 04ad 01       		.byte	0x1
 2340 04ae 1E05     		.2byte	0x51e
 2341 04b0 6B000000 		.4byte	0x6b
 2342 04b4 00000000 		.4byte	.LFB25
 2343 04b8 44000000 		.4byte	.LFE25-.LFB25
 2344 04bc 01       		.uleb128 0x1
 2345 04bd 9C       		.byte	0x9c
 2346 04be D2040000 		.4byte	0x4d2
 2347 04c2 0F       		.uleb128 0xf
 2348 04c3 A5010000 		.4byte	.LASF41
 2349 04c7 01       		.byte	0x1
 2350 04c8 2105     		.2byte	0x521
 2351 04ca 6B000000 		.4byte	0x6b
 2352 04ce 02       		.uleb128 0x2
 2353 04cf 91       		.byte	0x91
 2354 04d0 77       		.sleb128 -9
 2355 04d1 00       		.byte	0
 2356 04d2 12       		.uleb128 0x12
 2357 04d3 76030000 		.4byte	.LASF60
 2358 04d7 01       		.byte	0x1
 2359 04d8 7405     		.2byte	0x574
 2360 04da 00000000 		.4byte	.LFB26
 2361 04de 40000000 		.4byte	.LFE26-.LFB26
 2362 04e2 01       		.uleb128 0x1
 2363 04e3 9C       		.byte	0x9c
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 71


 2364 04e4 F8040000 		.4byte	0x4f8
 2365 04e8 0F       		.uleb128 0xf
 2366 04e9 8C040000 		.4byte	.LASF23
 2367 04ed 01       		.byte	0x1
 2368 04ee 7605     		.2byte	0x576
 2369 04f0 6B000000 		.4byte	0x6b
 2370 04f4 02       		.uleb128 0x2
 2371 04f5 91       		.byte	0x91
 2372 04f6 77       		.sleb128 -9
 2373 04f7 00       		.byte	0
 2374 04f8 0B       		.uleb128 0xb
 2375 04f9 93010000 		.4byte	.LASF61
 2376 04fd 01       		.byte	0x1
 2377 04fe CD05     		.2byte	0x5cd
 2378 0500 00000000 		.4byte	.LFB27
 2379 0504 9C000000 		.4byte	.LFE27-.LFB27
 2380 0508 01       		.uleb128 0x1
 2381 0509 9C       		.byte	0x9c
 2382 050a 49050000 		.4byte	0x549
 2383 050e 0C       		.uleb128 0xc
 2384 050f 6C010000 		.4byte	.LASF62
 2385 0513 01       		.byte	0x1
 2386 0514 CD05     		.2byte	0x5cd
 2387 0516 6B000000 		.4byte	0x6b
 2388 051a 02       		.uleb128 0x2
 2389 051b 91       		.byte	0x91
 2390 051c 6F       		.sleb128 -17
 2391 051d 15       		.uleb128 0x15
 2392 051e 12000000 		.4byte	.LBB2
 2393 0522 6C000000 		.4byte	.LBE2-.LBB2
 2394 0526 0F       		.uleb128 0xf
 2395 0527 F6010000 		.4byte	.LASF63
 2396 052b 01       		.byte	0x1
 2397 052c D505     		.2byte	0x5d5
 2398 052e 6B000000 		.4byte	0x6b
 2399 0532 02       		.uleb128 0x2
 2400 0533 91       		.byte	0x91
 2401 0534 77       		.sleb128 -9
 2402 0535 0F       		.uleb128 0xf
 2403 0536 DF010000 		.4byte	.LASF64
 2404 053a 01       		.byte	0x1
 2405 053b FB05     		.2byte	0x5fb
 2406 053d 6B000000 		.4byte	0x6b
 2407 0541 05       		.uleb128 0x5
 2408 0542 03       		.byte	0x3
 2409 0543 08000000 		.4byte	tx_period.4989
 2410 0547 00       		.byte	0
 2411 0548 00       		.byte	0
 2412 0549 0B       		.uleb128 0xb
 2413 054a FB040000 		.4byte	.LASF65
 2414 054e 01       		.byte	0x1
 2415 054f 4606     		.2byte	0x646
 2416 0551 00000000 		.4byte	.LFB28
 2417 0555 14000000 		.4byte	.LFE28-.LFB28
 2418 0559 01       		.uleb128 0x1
 2419 055a 9C       		.byte	0x9c
 2420 055b 6F050000 		.4byte	0x56f
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 72


 2421 055f 0C       		.uleb128 0xc
 2422 0560 19010000 		.4byte	.LASF44
 2423 0564 01       		.byte	0x1
 2424 0565 4606     		.2byte	0x646
 2425 0567 6B000000 		.4byte	0x6b
 2426 056b 02       		.uleb128 0x2
 2427 056c 91       		.byte	0x91
 2428 056d 77       		.sleb128 -9
 2429 056e 00       		.byte	0
 2430 056f 16       		.uleb128 0x16
 2431 0570 AA030000 		.4byte	.LASF66
 2432 0574 01       		.byte	0x1
 2433 0575 1C       		.byte	0x1c
 2434 0576 6B000000 		.4byte	0x6b
 2435 057a 05       		.uleb128 0x5
 2436 057b 03       		.byte	0x3
 2437 057c 00000000 		.4byte	Pump_PL_initVar
 2438 0580 17       		.uleb128 0x17
 2439 0581 6B000000 		.4byte	0x6b
 2440 0585 90050000 		.4byte	0x590
 2441 0589 18       		.uleb128 0x18
 2442 058a D3000000 		.4byte	0xd3
 2443 058e FF       		.byte	0xff
 2444 058f 00       		.byte	0
 2445 0590 16       		.uleb128 0x16
 2446 0591 EA040000 		.4byte	.LASF67
 2447 0595 01       		.byte	0x1
 2448 0596 24       		.byte	0x24
 2449 0597 A1050000 		.4byte	0x5a1
 2450 059b 05       		.uleb128 0x5
 2451 059c 03       		.byte	0x3
 2452 059d 00000000 		.4byte	Pump_PL_rxBuffer
 2453 05a1 06       		.uleb128 0x6
 2454 05a2 80050000 		.4byte	0x580
 2455 05a6 16       		.uleb128 0x16
 2456 05a7 2A030000 		.4byte	.LASF68
 2457 05ab 01       		.byte	0x1
 2458 05ac 25       		.byte	0x25
 2459 05ad BD000000 		.4byte	0xbd
 2460 05b1 05       		.uleb128 0x5
 2461 05b2 03       		.byte	0x3
 2462 05b3 00000000 		.4byte	Pump_PL_rxBufferRead
 2463 05b7 16       		.uleb128 0x16
 2464 05b8 25010000 		.4byte	.LASF69
 2465 05bc 01       		.byte	0x1
 2466 05bd 26       		.byte	0x26
 2467 05be BD000000 		.4byte	0xbd
 2468 05c2 05       		.uleb128 0x5
 2469 05c3 03       		.byte	0x3
 2470 05c4 00000000 		.4byte	Pump_PL_rxBufferWrite
 2471 05c8 16       		.uleb128 0x16
 2472 05c9 B5000000 		.4byte	.LASF70
 2473 05cd 01       		.byte	0x1
 2474 05ce 27       		.byte	0x27
 2475 05cf B8000000 		.4byte	0xb8
 2476 05d3 05       		.uleb128 0x5
 2477 05d4 03       		.byte	0x3
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 73


 2478 05d5 00000000 		.4byte	Pump_PL_rxBufferLoopDetect
 2479 05d9 16       		.uleb128 0x16
 2480 05da 8C030000 		.4byte	.LASF71
 2481 05de 01       		.byte	0x1
 2482 05df 28       		.byte	0x28
 2483 05e0 B8000000 		.4byte	0xb8
 2484 05e4 05       		.uleb128 0x5
 2485 05e5 03       		.byte	0x3
 2486 05e6 00000000 		.4byte	Pump_PL_rxBufferOverflow
 2487 05ea 00       		.byte	0
 2488              		.section	.debug_abbrev,"",%progbits
 2489              	.Ldebug_abbrev0:
 2490 0000 01       		.uleb128 0x1
 2491 0001 11       		.uleb128 0x11
 2492 0002 01       		.byte	0x1
 2493 0003 25       		.uleb128 0x25
 2494 0004 0E       		.uleb128 0xe
 2495 0005 13       		.uleb128 0x13
 2496 0006 0B       		.uleb128 0xb
 2497 0007 03       		.uleb128 0x3
 2498 0008 0E       		.uleb128 0xe
 2499 0009 1B       		.uleb128 0x1b
 2500 000a 0E       		.uleb128 0xe
 2501 000b 55       		.uleb128 0x55
 2502 000c 17       		.uleb128 0x17
 2503 000d 11       		.uleb128 0x11
 2504 000e 01       		.uleb128 0x1
 2505 000f 10       		.uleb128 0x10
 2506 0010 17       		.uleb128 0x17
 2507 0011 00       		.byte	0
 2508 0012 00       		.byte	0
 2509 0013 02       		.uleb128 0x2
 2510 0014 24       		.uleb128 0x24
 2511 0015 00       		.byte	0
 2512 0016 0B       		.uleb128 0xb
 2513 0017 0B       		.uleb128 0xb
 2514 0018 3E       		.uleb128 0x3e
 2515 0019 0B       		.uleb128 0xb
 2516 001a 03       		.uleb128 0x3
 2517 001b 0E       		.uleb128 0xe
 2518 001c 00       		.byte	0
 2519 001d 00       		.byte	0
 2520 001e 03       		.uleb128 0x3
 2521 001f 24       		.uleb128 0x24
 2522 0020 00       		.byte	0
 2523 0021 0B       		.uleb128 0xb
 2524 0022 0B       		.uleb128 0xb
 2525 0023 3E       		.uleb128 0x3e
 2526 0024 0B       		.uleb128 0xb
 2527 0025 03       		.uleb128 0x3
 2528 0026 08       		.uleb128 0x8
 2529 0027 00       		.byte	0
 2530 0028 00       		.byte	0
 2531 0029 04       		.uleb128 0x4
 2532 002a 16       		.uleb128 0x16
 2533 002b 00       		.byte	0
 2534 002c 03       		.uleb128 0x3
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 74


 2535 002d 0E       		.uleb128 0xe
 2536 002e 3A       		.uleb128 0x3a
 2537 002f 0B       		.uleb128 0xb
 2538 0030 3B       		.uleb128 0x3b
 2539 0031 0B       		.uleb128 0xb
 2540 0032 49       		.uleb128 0x49
 2541 0033 13       		.uleb128 0x13
 2542 0034 00       		.byte	0
 2543 0035 00       		.byte	0
 2544 0036 05       		.uleb128 0x5
 2545 0037 16       		.uleb128 0x16
 2546 0038 00       		.byte	0
 2547 0039 03       		.uleb128 0x3
 2548 003a 0E       		.uleb128 0xe
 2549 003b 3A       		.uleb128 0x3a
 2550 003c 0B       		.uleb128 0xb
 2551 003d 3B       		.uleb128 0x3b
 2552 003e 05       		.uleb128 0x5
 2553 003f 49       		.uleb128 0x49
 2554 0040 13       		.uleb128 0x13
 2555 0041 00       		.byte	0
 2556 0042 00       		.byte	0
 2557 0043 06       		.uleb128 0x6
 2558 0044 35       		.uleb128 0x35
 2559 0045 00       		.byte	0
 2560 0046 49       		.uleb128 0x49
 2561 0047 13       		.uleb128 0x13
 2562 0048 00       		.byte	0
 2563 0049 00       		.byte	0
 2564 004a 07       		.uleb128 0x7
 2565 004b 2E       		.uleb128 0x2e
 2566 004c 00       		.byte	0
 2567 004d 3F       		.uleb128 0x3f
 2568 004e 19       		.uleb128 0x19
 2569 004f 03       		.uleb128 0x3
 2570 0050 0E       		.uleb128 0xe
 2571 0051 3A       		.uleb128 0x3a
 2572 0052 0B       		.uleb128 0xb
 2573 0053 3B       		.uleb128 0x3b
 2574 0054 0B       		.uleb128 0xb
 2575 0055 27       		.uleb128 0x27
 2576 0056 19       		.uleb128 0x19
 2577 0057 11       		.uleb128 0x11
 2578 0058 01       		.uleb128 0x1
 2579 0059 12       		.uleb128 0x12
 2580 005a 06       		.uleb128 0x6
 2581 005b 40       		.uleb128 0x40
 2582 005c 18       		.uleb128 0x18
 2583 005d 9642     		.uleb128 0x2116
 2584 005f 19       		.uleb128 0x19
 2585 0060 00       		.byte	0
 2586 0061 00       		.byte	0
 2587 0062 08       		.uleb128 0x8
 2588 0063 2E       		.uleb128 0x2e
 2589 0064 01       		.byte	0x1
 2590 0065 3F       		.uleb128 0x3f
 2591 0066 19       		.uleb128 0x19
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 75


 2592 0067 03       		.uleb128 0x3
 2593 0068 0E       		.uleb128 0xe
 2594 0069 3A       		.uleb128 0x3a
 2595 006a 0B       		.uleb128 0xb
 2596 006b 3B       		.uleb128 0x3b
 2597 006c 0B       		.uleb128 0xb
 2598 006d 27       		.uleb128 0x27
 2599 006e 19       		.uleb128 0x19
 2600 006f 11       		.uleb128 0x11
 2601 0070 01       		.uleb128 0x1
 2602 0071 12       		.uleb128 0x12
 2603 0072 06       		.uleb128 0x6
 2604 0073 40       		.uleb128 0x40
 2605 0074 18       		.uleb128 0x18
 2606 0075 9642     		.uleb128 0x2116
 2607 0077 19       		.uleb128 0x19
 2608 0078 01       		.uleb128 0x1
 2609 0079 13       		.uleb128 0x13
 2610 007a 00       		.byte	0
 2611 007b 00       		.byte	0
 2612 007c 09       		.uleb128 0x9
 2613 007d 34       		.uleb128 0x34
 2614 007e 00       		.byte	0
 2615 007f 03       		.uleb128 0x3
 2616 0080 0E       		.uleb128 0xe
 2617 0081 3A       		.uleb128 0x3a
 2618 0082 0B       		.uleb128 0xb
 2619 0083 3B       		.uleb128 0x3b
 2620 0084 0B       		.uleb128 0xb
 2621 0085 49       		.uleb128 0x49
 2622 0086 13       		.uleb128 0x13
 2623 0087 02       		.uleb128 0x2
 2624 0088 18       		.uleb128 0x18
 2625 0089 00       		.byte	0
 2626 008a 00       		.byte	0
 2627 008b 0A       		.uleb128 0xa
 2628 008c 2E       		.uleb128 0x2e
 2629 008d 00       		.byte	0
 2630 008e 3F       		.uleb128 0x3f
 2631 008f 19       		.uleb128 0x19
 2632 0090 03       		.uleb128 0x3
 2633 0091 0E       		.uleb128 0xe
 2634 0092 3A       		.uleb128 0x3a
 2635 0093 0B       		.uleb128 0xb
 2636 0094 3B       		.uleb128 0x3b
 2637 0095 05       		.uleb128 0x5
 2638 0096 27       		.uleb128 0x27
 2639 0097 19       		.uleb128 0x19
 2640 0098 49       		.uleb128 0x49
 2641 0099 13       		.uleb128 0x13
 2642 009a 11       		.uleb128 0x11
 2643 009b 01       		.uleb128 0x1
 2644 009c 12       		.uleb128 0x12
 2645 009d 06       		.uleb128 0x6
 2646 009e 40       		.uleb128 0x40
 2647 009f 18       		.uleb128 0x18
 2648 00a0 9742     		.uleb128 0x2117
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 76


 2649 00a2 19       		.uleb128 0x19
 2650 00a3 00       		.byte	0
 2651 00a4 00       		.byte	0
 2652 00a5 0B       		.uleb128 0xb
 2653 00a6 2E       		.uleb128 0x2e
 2654 00a7 01       		.byte	0x1
 2655 00a8 3F       		.uleb128 0x3f
 2656 00a9 19       		.uleb128 0x19
 2657 00aa 03       		.uleb128 0x3
 2658 00ab 0E       		.uleb128 0xe
 2659 00ac 3A       		.uleb128 0x3a
 2660 00ad 0B       		.uleb128 0xb
 2661 00ae 3B       		.uleb128 0x3b
 2662 00af 05       		.uleb128 0x5
 2663 00b0 27       		.uleb128 0x27
 2664 00b1 19       		.uleb128 0x19
 2665 00b2 11       		.uleb128 0x11
 2666 00b3 01       		.uleb128 0x1
 2667 00b4 12       		.uleb128 0x12
 2668 00b5 06       		.uleb128 0x6
 2669 00b6 40       		.uleb128 0x40
 2670 00b7 18       		.uleb128 0x18
 2671 00b8 9742     		.uleb128 0x2117
 2672 00ba 19       		.uleb128 0x19
 2673 00bb 01       		.uleb128 0x1
 2674 00bc 13       		.uleb128 0x13
 2675 00bd 00       		.byte	0
 2676 00be 00       		.byte	0
 2677 00bf 0C       		.uleb128 0xc
 2678 00c0 05       		.uleb128 0x5
 2679 00c1 00       		.byte	0
 2680 00c2 03       		.uleb128 0x3
 2681 00c3 0E       		.uleb128 0xe
 2682 00c4 3A       		.uleb128 0x3a
 2683 00c5 0B       		.uleb128 0xb
 2684 00c6 3B       		.uleb128 0x3b
 2685 00c7 05       		.uleb128 0x5
 2686 00c8 49       		.uleb128 0x49
 2687 00c9 13       		.uleb128 0x13
 2688 00ca 02       		.uleb128 0x2
 2689 00cb 18       		.uleb128 0x18
 2690 00cc 00       		.byte	0
 2691 00cd 00       		.byte	0
 2692 00ce 0D       		.uleb128 0xd
 2693 00cf 2E       		.uleb128 0x2e
 2694 00d0 00       		.byte	0
 2695 00d1 3F       		.uleb128 0x3f
 2696 00d2 19       		.uleb128 0x19
 2697 00d3 03       		.uleb128 0x3
 2698 00d4 0E       		.uleb128 0xe
 2699 00d5 3A       		.uleb128 0x3a
 2700 00d6 0B       		.uleb128 0xb
 2701 00d7 3B       		.uleb128 0x3b
 2702 00d8 05       		.uleb128 0x5
 2703 00d9 27       		.uleb128 0x27
 2704 00da 19       		.uleb128 0x19
 2705 00db 11       		.uleb128 0x11
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 77


 2706 00dc 01       		.uleb128 0x1
 2707 00dd 12       		.uleb128 0x12
 2708 00de 06       		.uleb128 0x6
 2709 00df 40       		.uleb128 0x40
 2710 00e0 18       		.uleb128 0x18
 2711 00e1 9742     		.uleb128 0x2117
 2712 00e3 19       		.uleb128 0x19
 2713 00e4 00       		.byte	0
 2714 00e5 00       		.byte	0
 2715 00e6 0E       		.uleb128 0xe
 2716 00e7 2E       		.uleb128 0x2e
 2717 00e8 01       		.byte	0x1
 2718 00e9 3F       		.uleb128 0x3f
 2719 00ea 19       		.uleb128 0x19
 2720 00eb 03       		.uleb128 0x3
 2721 00ec 0E       		.uleb128 0xe
 2722 00ed 3A       		.uleb128 0x3a
 2723 00ee 0B       		.uleb128 0xb
 2724 00ef 3B       		.uleb128 0x3b
 2725 00f0 05       		.uleb128 0x5
 2726 00f1 27       		.uleb128 0x27
 2727 00f2 19       		.uleb128 0x19
 2728 00f3 49       		.uleb128 0x49
 2729 00f4 13       		.uleb128 0x13
 2730 00f5 11       		.uleb128 0x11
 2731 00f6 01       		.uleb128 0x1
 2732 00f7 12       		.uleb128 0x12
 2733 00f8 06       		.uleb128 0x6
 2734 00f9 40       		.uleb128 0x40
 2735 00fa 18       		.uleb128 0x18
 2736 00fb 9642     		.uleb128 0x2116
 2737 00fd 19       		.uleb128 0x19
 2738 00fe 01       		.uleb128 0x1
 2739 00ff 13       		.uleb128 0x13
 2740 0100 00       		.byte	0
 2741 0101 00       		.byte	0
 2742 0102 0F       		.uleb128 0xf
 2743 0103 34       		.uleb128 0x34
 2744 0104 00       		.byte	0
 2745 0105 03       		.uleb128 0x3
 2746 0106 0E       		.uleb128 0xe
 2747 0107 3A       		.uleb128 0x3a
 2748 0108 0B       		.uleb128 0xb
 2749 0109 3B       		.uleb128 0x3b
 2750 010a 05       		.uleb128 0x5
 2751 010b 49       		.uleb128 0x49
 2752 010c 13       		.uleb128 0x13
 2753 010d 02       		.uleb128 0x2
 2754 010e 18       		.uleb128 0x18
 2755 010f 00       		.byte	0
 2756 0110 00       		.byte	0
 2757 0111 10       		.uleb128 0x10
 2758 0112 2E       		.uleb128 0x2e
 2759 0113 01       		.byte	0x1
 2760 0114 3F       		.uleb128 0x3f
 2761 0115 19       		.uleb128 0x19
 2762 0116 03       		.uleb128 0x3
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 78


 2763 0117 0E       		.uleb128 0xe
 2764 0118 3A       		.uleb128 0x3a
 2765 0119 0B       		.uleb128 0xb
 2766 011a 3B       		.uleb128 0x3b
 2767 011b 05       		.uleb128 0x5
 2768 011c 27       		.uleb128 0x27
 2769 011d 19       		.uleb128 0x19
 2770 011e 49       		.uleb128 0x49
 2771 011f 13       		.uleb128 0x13
 2772 0120 11       		.uleb128 0x11
 2773 0121 01       		.uleb128 0x1
 2774 0122 12       		.uleb128 0x12
 2775 0123 06       		.uleb128 0x6
 2776 0124 40       		.uleb128 0x40
 2777 0125 18       		.uleb128 0x18
 2778 0126 9742     		.uleb128 0x2117
 2779 0128 19       		.uleb128 0x19
 2780 0129 01       		.uleb128 0x1
 2781 012a 13       		.uleb128 0x13
 2782 012b 00       		.byte	0
 2783 012c 00       		.byte	0
 2784 012d 11       		.uleb128 0x11
 2785 012e 2E       		.uleb128 0x2e
 2786 012f 00       		.byte	0
 2787 0130 3F       		.uleb128 0x3f
 2788 0131 19       		.uleb128 0x19
 2789 0132 03       		.uleb128 0x3
 2790 0133 0E       		.uleb128 0xe
 2791 0134 3A       		.uleb128 0x3a
 2792 0135 0B       		.uleb128 0xb
 2793 0136 3B       		.uleb128 0x3b
 2794 0137 05       		.uleb128 0x5
 2795 0138 27       		.uleb128 0x27
 2796 0139 19       		.uleb128 0x19
 2797 013a 49       		.uleb128 0x49
 2798 013b 13       		.uleb128 0x13
 2799 013c 11       		.uleb128 0x11
 2800 013d 01       		.uleb128 0x1
 2801 013e 12       		.uleb128 0x12
 2802 013f 06       		.uleb128 0x6
 2803 0140 40       		.uleb128 0x40
 2804 0141 18       		.uleb128 0x18
 2805 0142 9642     		.uleb128 0x2116
 2806 0144 19       		.uleb128 0x19
 2807 0145 00       		.byte	0
 2808 0146 00       		.byte	0
 2809 0147 12       		.uleb128 0x12
 2810 0148 2E       		.uleb128 0x2e
 2811 0149 01       		.byte	0x1
 2812 014a 3F       		.uleb128 0x3f
 2813 014b 19       		.uleb128 0x19
 2814 014c 03       		.uleb128 0x3
 2815 014d 0E       		.uleb128 0xe
 2816 014e 3A       		.uleb128 0x3a
 2817 014f 0B       		.uleb128 0xb
 2818 0150 3B       		.uleb128 0x3b
 2819 0151 05       		.uleb128 0x5
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 79


 2820 0152 27       		.uleb128 0x27
 2821 0153 19       		.uleb128 0x19
 2822 0154 11       		.uleb128 0x11
 2823 0155 01       		.uleb128 0x1
 2824 0156 12       		.uleb128 0x12
 2825 0157 06       		.uleb128 0x6
 2826 0158 40       		.uleb128 0x40
 2827 0159 18       		.uleb128 0x18
 2828 015a 9642     		.uleb128 0x2116
 2829 015c 19       		.uleb128 0x19
 2830 015d 01       		.uleb128 0x1
 2831 015e 13       		.uleb128 0x13
 2832 015f 00       		.byte	0
 2833 0160 00       		.byte	0
 2834 0161 13       		.uleb128 0x13
 2835 0162 0F       		.uleb128 0xf
 2836 0163 00       		.byte	0
 2837 0164 0B       		.uleb128 0xb
 2838 0165 0B       		.uleb128 0xb
 2839 0166 49       		.uleb128 0x49
 2840 0167 13       		.uleb128 0x13
 2841 0168 00       		.byte	0
 2842 0169 00       		.byte	0
 2843 016a 14       		.uleb128 0x14
 2844 016b 26       		.uleb128 0x26
 2845 016c 00       		.byte	0
 2846 016d 49       		.uleb128 0x49
 2847 016e 13       		.uleb128 0x13
 2848 016f 00       		.byte	0
 2849 0170 00       		.byte	0
 2850 0171 15       		.uleb128 0x15
 2851 0172 0B       		.uleb128 0xb
 2852 0173 01       		.byte	0x1
 2853 0174 11       		.uleb128 0x11
 2854 0175 01       		.uleb128 0x1
 2855 0176 12       		.uleb128 0x12
 2856 0177 06       		.uleb128 0x6
 2857 0178 00       		.byte	0
 2858 0179 00       		.byte	0
 2859 017a 16       		.uleb128 0x16
 2860 017b 34       		.uleb128 0x34
 2861 017c 00       		.byte	0
 2862 017d 03       		.uleb128 0x3
 2863 017e 0E       		.uleb128 0xe
 2864 017f 3A       		.uleb128 0x3a
 2865 0180 0B       		.uleb128 0xb
 2866 0181 3B       		.uleb128 0x3b
 2867 0182 0B       		.uleb128 0xb
 2868 0183 49       		.uleb128 0x49
 2869 0184 13       		.uleb128 0x13
 2870 0185 3F       		.uleb128 0x3f
 2871 0186 19       		.uleb128 0x19
 2872 0187 02       		.uleb128 0x2
 2873 0188 18       		.uleb128 0x18
 2874 0189 00       		.byte	0
 2875 018a 00       		.byte	0
 2876 018b 17       		.uleb128 0x17
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 80


 2877 018c 01       		.uleb128 0x1
 2878 018d 01       		.byte	0x1
 2879 018e 49       		.uleb128 0x49
 2880 018f 13       		.uleb128 0x13
 2881 0190 01       		.uleb128 0x1
 2882 0191 13       		.uleb128 0x13
 2883 0192 00       		.byte	0
 2884 0193 00       		.byte	0
 2885 0194 18       		.uleb128 0x18
 2886 0195 21       		.uleb128 0x21
 2887 0196 00       		.byte	0
 2888 0197 49       		.uleb128 0x49
 2889 0198 13       		.uleb128 0x13
 2890 0199 2F       		.uleb128 0x2f
 2891 019a 0B       		.uleb128 0xb
 2892 019b 00       		.byte	0
 2893 019c 00       		.byte	0
 2894 019d 00       		.byte	0
 2895              		.section	.debug_aranges,"",%progbits
 2896 0000 FC000000 		.4byte	0xfc
 2897 0004 0200     		.2byte	0x2
 2898 0006 00000000 		.4byte	.Ldebug_info0
 2899 000a 04       		.byte	0x4
 2900 000b 00       		.byte	0
 2901 000c 0000     		.2byte	0
 2902 000e 0000     		.2byte	0
 2903 0010 00000000 		.4byte	.LFB0
 2904 0014 20000000 		.4byte	.LFE0-.LFB0
 2905 0018 00000000 		.4byte	.LFB1
 2906 001c 4C000000 		.4byte	.LFE1-.LFB1
 2907 0020 00000000 		.4byte	.LFB2
 2908 0024 64000000 		.4byte	.LFE2-.LFB2
 2909 0028 00000000 		.4byte	.LFB3
 2910 002c 5C000000 		.4byte	.LFE3-.LFB3
 2911 0030 00000000 		.4byte	.LFB4
 2912 0034 10000000 		.4byte	.LFE4-.LFB4
 2913 0038 00000000 		.4byte	.LFB5
 2914 003c 14000000 		.4byte	.LFE5-.LFB5
 2915 0040 00000000 		.4byte	.LFB6
 2916 0044 18000000 		.4byte	.LFE6-.LFB6
 2917 0048 00000000 		.4byte	.LFB7
 2918 004c 18000000 		.4byte	.LFE7-.LFB7
 2919 0050 00000000 		.4byte	.LFB8
 2920 0054 20000000 		.4byte	.LFE8-.LFB8
 2921 0058 00000000 		.4byte	.LFB9
 2922 005c 84000000 		.4byte	.LFE9-.LFB9
 2923 0060 00000000 		.4byte	.LFB10
 2924 0064 40000000 		.4byte	.LFE10-.LFB10
 2925 0068 00000000 		.4byte	.LFB11
 2926 006c A8000000 		.4byte	.LFE11-.LFB11
 2927 0070 00000000 		.4byte	.LFB12
 2928 0074 22000000 		.4byte	.LFE12-.LFB12
 2929 0078 00000000 		.4byte	.LFB13
 2930 007c 84000000 		.4byte	.LFE13-.LFB13
 2931 0080 00000000 		.4byte	.LFB14
 2932 0084 70000000 		.4byte	.LFE14-.LFB14
 2933 0088 00000000 		.4byte	.LFB15
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 81


 2934 008c 14000000 		.4byte	.LFE15-.LFB15
 2935 0090 00000000 		.4byte	.LFB16
 2936 0094 20000000 		.4byte	.LFE16-.LFB16
 2937 0098 00000000 		.4byte	.LFB17
 2938 009c 20000000 		.4byte	.LFE17-.LFB17
 2939 00a0 00000000 		.4byte	.LFB18
 2940 00a4 20000000 		.4byte	.LFE18-.LFB18
 2941 00a8 00000000 		.4byte	.LFB19
 2942 00ac 2C000000 		.4byte	.LFE19-.LFB19
 2943 00b0 00000000 		.4byte	.LFB20
 2944 00b4 18000000 		.4byte	.LFE20-.LFB20
 2945 00b8 00000000 		.4byte	.LFB21
 2946 00bc 34000000 		.4byte	.LFE21-.LFB21
 2947 00c0 00000000 		.4byte	.LFB22
 2948 00c4 40000000 		.4byte	.LFE22-.LFB22
 2949 00c8 00000000 		.4byte	.LFB23
 2950 00cc 40000000 		.4byte	.LFE23-.LFB23
 2951 00d0 00000000 		.4byte	.LFB24
 2952 00d4 30000000 		.4byte	.LFE24-.LFB24
 2953 00d8 00000000 		.4byte	.LFB25
 2954 00dc 44000000 		.4byte	.LFE25-.LFB25
 2955 00e0 00000000 		.4byte	.LFB26
 2956 00e4 40000000 		.4byte	.LFE26-.LFB26
 2957 00e8 00000000 		.4byte	.LFB27
 2958 00ec 9C000000 		.4byte	.LFE27-.LFB27
 2959 00f0 00000000 		.4byte	.LFB28
 2960 00f4 14000000 		.4byte	.LFE28-.LFB28
 2961 00f8 00000000 		.4byte	0
 2962 00fc 00000000 		.4byte	0
 2963              		.section	.debug_ranges,"",%progbits
 2964              	.Ldebug_ranges0:
 2965 0000 00000000 		.4byte	.LFB0
 2966 0004 20000000 		.4byte	.LFE0
 2967 0008 00000000 		.4byte	.LFB1
 2968 000c 4C000000 		.4byte	.LFE1
 2969 0010 00000000 		.4byte	.LFB2
 2970 0014 64000000 		.4byte	.LFE2
 2971 0018 00000000 		.4byte	.LFB3
 2972 001c 5C000000 		.4byte	.LFE3
 2973 0020 00000000 		.4byte	.LFB4
 2974 0024 10000000 		.4byte	.LFE4
 2975 0028 00000000 		.4byte	.LFB5
 2976 002c 14000000 		.4byte	.LFE5
 2977 0030 00000000 		.4byte	.LFB6
 2978 0034 18000000 		.4byte	.LFE6
 2979 0038 00000000 		.4byte	.LFB7
 2980 003c 18000000 		.4byte	.LFE7
 2981 0040 00000000 		.4byte	.LFB8
 2982 0044 20000000 		.4byte	.LFE8
 2983 0048 00000000 		.4byte	.LFB9
 2984 004c 84000000 		.4byte	.LFE9
 2985 0050 00000000 		.4byte	.LFB10
 2986 0054 40000000 		.4byte	.LFE10
 2987 0058 00000000 		.4byte	.LFB11
 2988 005c A8000000 		.4byte	.LFE11
 2989 0060 00000000 		.4byte	.LFB12
 2990 0064 22000000 		.4byte	.LFE12
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 82


 2991 0068 00000000 		.4byte	.LFB13
 2992 006c 84000000 		.4byte	.LFE13
 2993 0070 00000000 		.4byte	.LFB14
 2994 0074 70000000 		.4byte	.LFE14
 2995 0078 00000000 		.4byte	.LFB15
 2996 007c 14000000 		.4byte	.LFE15
 2997 0080 00000000 		.4byte	.LFB16
 2998 0084 20000000 		.4byte	.LFE16
 2999 0088 00000000 		.4byte	.LFB17
 3000 008c 20000000 		.4byte	.LFE17
 3001 0090 00000000 		.4byte	.LFB18
 3002 0094 20000000 		.4byte	.LFE18
 3003 0098 00000000 		.4byte	.LFB19
 3004 009c 2C000000 		.4byte	.LFE19
 3005 00a0 00000000 		.4byte	.LFB20
 3006 00a4 18000000 		.4byte	.LFE20
 3007 00a8 00000000 		.4byte	.LFB21
 3008 00ac 34000000 		.4byte	.LFE21
 3009 00b0 00000000 		.4byte	.LFB22
 3010 00b4 40000000 		.4byte	.LFE22
 3011 00b8 00000000 		.4byte	.LFB23
 3012 00bc 40000000 		.4byte	.LFE23
 3013 00c0 00000000 		.4byte	.LFB24
 3014 00c4 30000000 		.4byte	.LFE24
 3015 00c8 00000000 		.4byte	.LFB25
 3016 00cc 44000000 		.4byte	.LFE25
 3017 00d0 00000000 		.4byte	.LFB26
 3018 00d4 40000000 		.4byte	.LFE26
 3019 00d8 00000000 		.4byte	.LFB27
 3020 00dc 9C000000 		.4byte	.LFE27
 3021 00e0 00000000 		.4byte	.LFB28
 3022 00e4 14000000 		.4byte	.LFE28
 3023 00e8 00000000 		.4byte	0
 3024 00ec 00000000 		.4byte	0
 3025              		.section	.debug_line,"",%progbits
 3026              	.Ldebug_line0:
 3027 0000 35030000 		.section	.debug_str,"MS",%progbits,1
 3027      02004600 
 3027      00000201 
 3027      FB0E0D00 
 3027      01010101 
 3028              	.LASF10:
 3029 0000 75696E74 		.ascii	"uint16\000"
 3029      313600
 3030              	.LASF32:
 3031 0007 6C6F635F 		.ascii	"loc_rxBufferWrite\000"
 3031      72784275 
 3031      66666572 
 3031      57726974 
 3031      6500
 3032              	.LASF38:
 3033 0019 50756D70 		.ascii	"Pump_PL_ReadControlRegister\000"
 3033      5F504C5F 
 3033      52656164 
 3033      436F6E74 
 3033      726F6C52 
 3034              	.LASF26:
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 83


 3035 0035 50756D70 		.ascii	"Pump_PL_DisableRxInt\000"
 3035      5F504C5F 
 3035      44697361 
 3035      626C6552 
 3035      78496E74 
 3036              	.LASF24:
 3037 004a 50756D70 		.ascii	"Pump_PL_WriteControlRegister\000"
 3037      5F504C5F 
 3037      57726974 
 3037      65436F6E 
 3037      74726F6C 
 3038              	.LASF25:
 3039 0067 50756D70 		.ascii	"Pump_PL_EnableRxInt\000"
 3039      5F504C5F 
 3039      456E6162 
 3039      6C655278 
 3039      496E7400 
 3040              	.LASF7:
 3041 007b 6C6F6E67 		.ascii	"long long unsigned int\000"
 3041      206C6F6E 
 3041      6720756E 
 3041      7369676E 
 3041      65642069 
 3042              	.LASF39:
 3043 0092 50756D70 		.ascii	"Pump_PL_GetByte\000"
 3043      5F504C5F 
 3043      47657442 
 3043      79746500 
 3044              	.LASF33:
 3045 00a2 50756D70 		.ascii	"Pump_PL_ReadRxData\000"
 3045      5F504C5F 
 3045      52656164 
 3045      52784461 
 3045      746100
 3046              	.LASF70:
 3047 00b5 50756D70 		.ascii	"Pump_PL_rxBufferLoopDetect\000"
 3047      5F504C5F 
 3047      72784275 
 3047      66666572 
 3047      4C6F6F70 
 3048              	.LASF43:
 3049 00d0 50756D70 		.ascii	"Pump_PL_SetRxAddressMode\000"
 3049      5F504C5F 
 3049      53657452 
 3049      78416464 
 3049      72657373 
 3050              	.LASF6:
 3051 00e9 6C6F6E67 		.ascii	"long long int\000"
 3051      206C6F6E 
 3051      6720696E 
 3051      7400
 3052              	.LASF0:
 3053 00f7 7369676E 		.ascii	"signed char\000"
 3053      65642063 
 3053      68617200 
 3054              	.LASF4:
 3055 0103 6C6F6E67 		.ascii	"long int\000"
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 84


 3055      20696E74 
 3055      00
 3056              	.LASF9:
 3057 010c 75696E74 		.ascii	"uint8\000"
 3057      3800
 3058              	.LASF13:
 3059 0112 646F7562 		.ascii	"double\000"
 3059      6C6500
 3060              	.LASF44:
 3061 0119 61646472 		.ascii	"addressMode\000"
 3061      6573734D 
 3061      6F646500 
 3062              	.LASF69:
 3063 0125 50756D70 		.ascii	"Pump_PL_rxBufferWrite\000"
 3063      5F504C5F 
 3063      72784275 
 3063      66666572 
 3063      57726974 
 3064              	.LASF11:
 3065 013b 75696E74 		.ascii	"uint32\000"
 3065      333200
 3066              	.LASF28:
 3067 0142 636F6E74 		.ascii	"control\000"
 3067      726F6C00 
 3068              	.LASF22:
 3069 014a 50756D70 		.ascii	"Pump_PL_Stop\000"
 3069      5F504C5F 
 3069      53746F70 
 3069      00
 3070              	.LASF51:
 3071 0157 50756D70 		.ascii	"Pump_PL_ReadTxStatus\000"
 3071      5F504C5F 
 3071      52656164 
 3071      54785374 
 3071      61747573 
 3072              	.LASF62:
 3073 016c 7265744D 		.ascii	"retMode\000"
 3073      6F646500 
 3074              	.LASF8:
 3075 0174 756E7369 		.ascii	"unsigned int\000"
 3075      676E6564 
 3075      20696E74 
 3075      00
 3076              	.LASF5:
 3077 0181 6C6F6E67 		.ascii	"long unsigned int\000"
 3077      20756E73 
 3077      69676E65 
 3077      6420696E 
 3077      7400
 3078              	.LASF61:
 3079 0193 50756D70 		.ascii	"Pump_PL_SendBreak\000"
 3079      5F504C5F 
 3079      53656E64 
 3079      42726561 
 3079      6B00
 3080              	.LASF41:
 3081 01a5 73697A65 		.ascii	"size\000"
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 85


 3081      00
 3082              	.LASF3:
 3083 01aa 73686F72 		.ascii	"short unsigned int\000"
 3083      7420756E 
 3083      7369676E 
 3083      65642069 
 3083      6E7400
 3084              	.LASF56:
 3085 01bd 50756D70 		.ascii	"Pump_PL_PutArray\000"
 3085      5F504C5F 
 3085      50757441 
 3085      72726179 
 3085      00
 3086              	.LASF31:
 3087 01ce 6C6F635F 		.ascii	"loc_rxBufferRead\000"
 3087      72784275 
 3087      66666572 
 3087      52656164 
 3087      00
 3088              	.LASF64:
 3089 01df 74785F70 		.ascii	"tx_period\000"
 3089      6572696F 
 3089      6400
 3090              	.LASF29:
 3091 01e9 696E7453 		.ascii	"intSrc\000"
 3091      726300
 3092              	.LASF17:
 3093 01f0 72656733 		.ascii	"reg32\000"
 3093      3200
 3094              	.LASF63:
 3095 01f6 746D7053 		.ascii	"tmpStat\000"
 3095      74617400 
 3096              	.LASF18:
 3097 01fe 73697A65 		.ascii	"sizetype\000"
 3097      74797065 
 3097      00
 3098              	.LASF46:
 3099 0207 61646472 		.ascii	"address\000"
 3099      65737300 
 3100              	.LASF19:
 3101 020f 50756D70 		.ascii	"Pump_PL_Start\000"
 3101      5F504C5F 
 3101      53746172 
 3101      7400
 3102              	.LASF49:
 3103 021d 50756D70 		.ascii	"Pump_PL_WriteTxData\000"
 3103      5F504C5F 
 3103      57726974 
 3103      65547844 
 3103      61746100 
 3104              	.LASF72:
 3105 0231 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 3105      4320342E 
 3105      392E3320 
 3105      32303135 
 3105      30333033 
 3106 0264 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 86


 3106      20726576 
 3106      6973696F 
 3106      6E203232 
 3106      31323230 
 3107 0297 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3107      66756E63 
 3107      74696F6E 
 3107      2D736563 
 3107      74696F6E 
 3108              	.LASF37:
 3109 02bf 72785374 		.ascii	"rxStatus\000"
 3109      61747573 
 3109      00
 3110              	.LASF74:
 3111 02c8 433A5C55 		.ascii	"C:\\Users\\Proyectos_Hardware\\Dropbox\\Proyecto Co"
 3111      73657273 
 3111      5C50726F 
 3111      79656374 
 3111      6F735F48 
 3112 02f7 6E74726F 		.ascii	"ntroller\\Mux Advance Encore V1_00\\MuxAdvance.cyds"
 3112      6C6C6572 
 3112      5C4D7578 
 3112      20416476 
 3112      616E6365 
 3113 0328 6E00     		.ascii	"n\000"
 3114              	.LASF68:
 3115 032a 50756D70 		.ascii	"Pump_PL_rxBufferRead\000"
 3115      5F504C5F 
 3115      72784275 
 3115      66666572 
 3115      52656164 
 3116              	.LASF36:
 3117 033f 50756D70 		.ascii	"Pump_PL_GetChar\000"
 3117      5F504C5F 
 3117      47657443 
 3117      68617200 
 3118              	.LASF21:
 3119 034f 50756D70 		.ascii	"Pump_PL_Enable\000"
 3119      5F504C5F 
 3119      456E6162 
 3119      6C6500
 3120              	.LASF12:
 3121 035e 666C6F61 		.ascii	"float\000"
 3121      7400
 3122              	.LASF53:
 3123 0364 50756D70 		.ascii	"Pump_PL_PutString\000"
 3123      5F504C5F 
 3123      50757453 
 3123      7472696E 
 3123      6700
 3124              	.LASF60:
 3125 0376 50756D70 		.ascii	"Pump_PL_ClearTxBuffer\000"
 3125      5F504C5F 
 3125      436C6561 
 3125      72547842 
 3125      75666665 
 3126              	.LASF71:
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 87


 3127 038c 50756D70 		.ascii	"Pump_PL_rxBufferOverflow\000"
 3127      5F504C5F 
 3127      72784275 
 3127      66666572 
 3127      4F766572 
 3128              	.LASF16:
 3129 03a5 72656738 		.ascii	"reg8\000"
 3129      00
 3130              	.LASF66:
 3131 03aa 50756D70 		.ascii	"Pump_PL_initVar\000"
 3131      5F504C5F 
 3131      696E6974 
 3131      56617200 
 3132              	.LASF1:
 3133 03ba 756E7369 		.ascii	"unsigned char\000"
 3133      676E6564 
 3133      20636861 
 3133      7200
 3134              	.LASF2:
 3135 03c8 73686F72 		.ascii	"short int\000"
 3135      7420696E 
 3135      7400
 3136              	.LASF52:
 3137 03d2 50756D70 		.ascii	"Pump_PL_PutChar\000"
 3137      5F504C5F 
 3137      50757443 
 3137      68617200 
 3138              	.LASF59:
 3139 03e2 50756D70 		.ascii	"Pump_PL_GetTxBufferSize\000"
 3139      5F504C5F 
 3139      47657454 
 3139      78427566 
 3139      66657253 
 3140              	.LASF20:
 3141 03fa 50756D70 		.ascii	"Pump_PL_Init\000"
 3141      5F504C5F 
 3141      496E6974 
 3141      00
 3142              	.LASF48:
 3143 0407 50756D70 		.ascii	"Pump_PL_SetTxInterruptMode\000"
 3143      5F504C5F 
 3143      53657454 
 3143      78496E74 
 3143      65727275 
 3144              	.LASF57:
 3145 0422 62797465 		.ascii	"byteCount\000"
 3145      436F756E 
 3145      7400
 3146              	.LASF30:
 3147 042c 72784461 		.ascii	"rxData\000"
 3147      746100
 3148              	.LASF54:
 3149 0433 73747269 		.ascii	"string\000"
 3149      6E6700
 3150              	.LASF15:
 3151 043a 63686172 		.ascii	"char\000"
 3151      00
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 88


 3152              	.LASF14:
 3153 043f 63686172 		.ascii	"char8\000"
 3153      3800
 3154              	.LASF27:
 3155 0445 50756D70 		.ascii	"Pump_PL_SetRxInterruptMode\000"
 3155      5F504C5F 
 3155      53657452 
 3155      78496E74 
 3155      65727275 
 3156              	.LASF45:
 3157 0460 50756D70 		.ascii	"Pump_PL_SetRxAddress1\000"
 3157      5F504C5F 
 3157      53657452 
 3157      78416464 
 3157      72657373 
 3158              	.LASF47:
 3159 0476 50756D70 		.ascii	"Pump_PL_SetRxAddress2\000"
 3159      5F504C5F 
 3159      53657452 
 3159      78416464 
 3159      72657373 
 3160              	.LASF23:
 3161 048c 656E6162 		.ascii	"enableInterrupts\000"
 3161      6C65496E 
 3161      74657272 
 3161      75707473 
 3161      00
 3162              	.LASF35:
 3163 049d 73746174 		.ascii	"status\000"
 3163      757300
 3164              	.LASF34:
 3165 04a4 50756D70 		.ascii	"Pump_PL_ReadRxStatus\000"
 3165      5F504C5F 
 3165      52656164 
 3165      52785374 
 3165      61747573 
 3166              	.LASF50:
 3167 04b9 74784461 		.ascii	"txDataByte\000"
 3167      74614279 
 3167      746500
 3168              	.LASF58:
 3169 04c4 50756D70 		.ascii	"Pump_PL_PutCRLF\000"
 3169      5F504C5F 
 3169      50757443 
 3169      524C4600 
 3170              	.LASF42:
 3171 04d4 50756D70 		.ascii	"Pump_PL_ClearRxBuffer\000"
 3171      5F504C5F 
 3171      436C6561 
 3171      72527842 
 3171      75666665 
 3172              	.LASF67:
 3173 04ea 50756D70 		.ascii	"Pump_PL_rxBuffer\000"
 3173      5F504C5F 
 3173      72784275 
 3173      66666572 
 3173      00
ARM GAS  C:\Users\PROYEC~1\AppData\Local\Temp\ccWr0KWq.s 			page 89


 3174              	.LASF65:
 3175 04fb 50756D70 		.ascii	"Pump_PL_SetTxAddressMode\000"
 3175      5F504C5F 
 3175      53657454 
 3175      78416464 
 3175      72657373 
 3176              	.LASF40:
 3177 0514 50756D70 		.ascii	"Pump_PL_GetRxBufferSize\000"
 3177      5F504C5F 
 3177      47657452 
 3177      78427566 
 3177      66657253 
 3178              	.LASF55:
 3179 052c 6275665F 		.ascii	"buf_index\000"
 3179      696E6465 
 3179      7800
 3180              	.LASF73:
 3181 0536 2E5C4765 		.ascii	".\\Generated_Source\\PSoC5\\Pump_PL.c\000"
 3181      6E657261 
 3181      7465645F 
 3181      536F7572 
 3181      63655C50 
 3182              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
